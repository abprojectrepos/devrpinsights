<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/30/2019 1:46:31 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NCS-110119GM22"
  DTS:CreatorName="NCS\P0500388"
  DTS:DelayValidation="True"
  DTS:DTSID="{0E2C05AE-F809-426A-ABCF-2B4DCB0F0A6D}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.0900.40"
  DTS:LocaleID="18441"
  DTS:ObjectName="DM_ORG_PET_MODULE_COMPLETION"
  DTS:PackageType="5"
  DTS:VersionBuild="136"
  DTS:VersionGUID="{0FD36446-9E45-4324-94CE-06079B4795E2}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DW]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{80DB3F40-FE3C-450D-B96A-E696A07E53AF}"
      DTS:ObjectName="DW">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Password">@[$Project::Password]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=172.22.2.38;User ID=svc-dw-prod-etl;Initial Catalog=RPDW_PRD;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAlCwu7a+0BkKkvKRrRO6REwAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAAD0G0Vlf+6WEDAemzwj+gnwAAAAAASAAACgAAAAEAAAAAFfiJ9ah3Ul8bIvWqFfrHAYAAAAPN9AC4PDMHhbZ28tMCKux/scTW9whfwFFAAAAOwgaYGbYEzEqGlw3hHv0MH+w6SI</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ErrorLog]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{3CC74AA5-C1C0-4675-A57F-E5AC44004B7C}"
      DTS:ObjectName="ErrorLog">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Password">@[$Project::Password]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=172.22.2.38;User ID=svc-dw-prod-etl;Initial Catalog=RPDW_PRD;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAlCwu7a+0BkKkvKRrRO6REwAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAABP86pSIGJPhB1HrsS6hGxMAAAAAASAAACgAAAAEAAAAFc7iswHFZiqy1pykaOyLtMYAAAAMh01rrudcCRVt9B4UtPWaD5vJXM6h/OwFAAAACjIWHm0aoiaScew+Ug3RiiArFQX</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{15765F61-01AE-4847-B640-89133AA59DEB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Duplicate_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DF2B9EB2-06F3-409C-BABB-A5FF1A30C286}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Job_name">
      <DTS:VariableValue
        DTS:DataType="8">DM_ORG_PET_MODULE_COMPLETION</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{09CBF5CC-3749-4F01-B79E-A73667F5D334}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Job_Status">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9BF1C87F-3730-4A40-92AF-86BC0C0155D5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="JOB_STATUS_ID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D751F66E-D7D6-4F4F-B77A-AF0124758505}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Mandatory_constraint_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{758FC6E9-13F8-4A03-9118-02E646F25D00}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Process_date">
      <DTS:VariableValue
        DTS:DataType="7">2/1/2019 2:58:47 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0563C19B-C48F-4B8E-A67D-BF21A8F96C49}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceTable">
      <DTS:VariableValue
        DTS:DataType="8">DW_STUDENT_MOVEMENT</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{59C1DC39-719D-41F3-B878-A30ACE808D4A}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;BEGIN TRANSACTION&#xA;BEGIN TRY&#xA;------------&#xA;DELETE FROM DM_ORG_PET_MODULE_COMPLETION&#xA;--------------DECLARE PROCESS DATE--------&#xA;DECLARE @PROCESSDATE DATETIME&#xA;,@jobstatusid varchar(5)&#xA;SELECT @PROCESSDATE=GETDATE()&#xA;select @jobstatusid=&quot;+ (DT_STR, 5,1252) @[User::JOB_STATUS_ID] +&quot;&#xA;---------------------------------/* step 1 Distinct_Active_Students_with_Specialisatn_and_Course WITHOUT PRIORITY */--------------------------------------------------&#xA;&#xA;&#xA;INSERT INTO DM_ORG_PET_MODULE_COMPLETION_STEP_1&#xA;SELECT *&#xA; FROM &#xA; (SELECT DASS.*,ROW_NUMBER()OVER( PARTITION BY STUDENT_ID,MODULE_ID ORDER BY Module_Category_priority )PR&#xA; ,Module_Id,Module_Code,Req_Category,Module_Desc,Mod_Credit,Module_Category_priority, Min_Mc_Rq,&#xA; &#xA; ROW_NUMBER() OVER (PARTITION BY &#xA; DASS.Student_Id, DASS.Admit_Term, DASS.Prog, DASS.Reqmt_Term, DASS.Student_Status,DASS.Effective_Date,DASS.Specialisation,&#xA; Module_Id,Module_Code,Req_Category,Mod_Credit,Module_Category_priority, Min_Mc_Rq&#xA; ORDER BY CS.CS_MODIFIED_ON DESC) CSROWNUM&#xA; &#xA; FROM &#xA;(SELECT  DAS.Student_Id, Admit_Term, Prog, DAS.Reqmt_Term, Student_Status,Effective_Date,Specialisation FROM &#xA;(SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Student_Status,Effective_Date&#xA;FROM (&#xA;SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Student_Status, Effective_Date,&#xA; ROW_NUMBER() OVER (&#xA;  PARTITION BY Student_Id&#xA;  ORDER BY Effective_Date DESC, Effective_Seq DESC) rownum&#xA;FROM (&#xA; SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Prog_Action&#xA; FROM (&#xA;  SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Prog_Action,&#xA;  ROW_NUMBER() OVER (&#xA;   PARTITION BY Student_Id, Prog&#xA;   ORDER BY Effective_Date DESC, Effective_Seq DESC) rownum&#xA;  FROM DW_STUDENT_MOVEMENT&#xA;  WHERE Qual_Type = 'DPFT') sm&#xA; WHERE sm.rownum = 1&#xA; AND (Student_Status = 'AC' AND Prog_Action = 'MATR'&#xA; OR (Student_Status = 'CM' AND Prog_Action = 'COMP'))&#xA; UNION ALL&#xA; SELECT DISTINCT sm.Student_Id, Admit_Term, Prog, Reqmt_Term, sm.Effective_Date, sm.Effective_Seq, Student_Status, Prog_Action&#xA; FROM (&#xA;  SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Prog_Action&#xA;  FROM (&#xA;   SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Prog_Action,&#xA;   ROW_NUMBER() OVER (&#xA;    PARTITION BY Student_Id, Prog&#xA;    ORDER BY Effective_Date DESC, Effective_Seq DESC) rownum&#xA;   FROM DW_STUDENT_MOVEMENT&#xA;   WHERE Qual_Type = 'DPFT') sm&#xA;  WHERE sm.rownum = 1&#xA;  AND Student_Status = 'AC' AND Prog_Action IN ('PRGC','RADM','RLOA')) sm&#xA; INNER JOIN (&#xA;  SELECT Student_Id, Effective_Date, Effective_Seq&#xA;  FROM DW_STUDENT_MOVEMENT&#xA;  WHERE Qual_Type = 'DPFT'&#xA;  AND Student_Status = 'AC' AND Prog_Action = 'MATR') m&#xA; ON sm.Student_Id = m.Student_Id&#xA; AND (m.Effective_Date &lt; sm.Effective_Date&#xA; OR (m.Effective_Date = sm.Effective_Date AND m.Effective_Seq &lt; sm.Effective_Seq))) sm) sm&#xA;WHERE rownum = 1&#xA;)DAS&#xA;INNER JOIN &#xA;( select Student_id, Qual_Type, Specialisation, Rqmt_Term from (&#xA;select student_id, qual_type, specialisation, rqmt_term, ROW_NUMBER() OVER (&#xA;    PARTITION BY Student_Id, Rqmt_Term&#xA;    ORDER BY Effective_Date DESC, Effective_Sequence DESC) rownum&#xA;   FROM [DW_STUDENT_SPECIALISATN]&#xA;  where Qual_Type='DPFT') active&#xA;    WHERE active.rownum = 1) DSS--55145&#xA;&#x9;ON DAS.Student_Id=DSS.Student_id AND DAS.Reqmt_Term=DSS.Rqmt_Term)DASS&#xA;&#x9;INNER JOIN &#xA;&#x9;(SELECT  DISTINCT Specialisatn,Module_Id,Module_Code,Prog,Reqmt_Term,Req_Category,Module_Desc,Mod_Credit,Modified_On AS CS_MODIFIED_ON,&#xA;&#x9;(CASE WHEN Req_Category='Discipline Modules' THEN 2&#xA;WHEN Req_Category='Elective ModuleS' THEN 4&#xA;WHEN Req_Category='Freely Chosen Modules' THEN 5&#xA;WHEN Req_Category='General Modules' THEN 1&#xA;WHEN Req_Category='Industry Immersion Programme' THEN 1&#xA;WHEN Req_Category='Industry Orientation Programme' THEN 1&#xA;WHEN Req_Category='Specialisation Modules' THEN 3&#xA;ELSE '' END )Module_Category_priority, Min_Mc_Rq&#xA;FROM DW_COURSE_STRUCTURE WHERE Qual_Type='DPFT')CS&#xA;ON CS.Specialisatn=DASS.Specialisation&#xA;AND CS.Prog = DASS.Prog &#xA;and CS.Reqmt_Term=DASS.Reqmt_Term&#xA;)A&#xA;WHERE CSROWNUM = 1&#xA;--AND PR=1&#xA;&#xA; ------------------------------------------/* step 2 Active_Students_with_cgpa WITH COURSE STRUNCTURE PRIORITY AS 1*/------------------------&#xA;INSERT INTO [DM_ORG_PET_MODULE_COMPLETION_STEP_2]&#xA;&#xA;SELECT * FROM &#xA;(SELECT a.*,Acad_Term,Final_Grade FROM &#xA;[DM_ORG_PET_MODULE_COMPLETION_STEP_1] A &#xA;INNER JOIN &#xA;(&#xA;SELECT gpa.Student_Id, gpa.Module_Code, gpa.Acad_Term, gpa.Revised_Grade AS Final_Grade &#xA;FROM (&#xA;       SELECT &#xA;              gpa.Student_Id, gpa.Module_Code, gpa.Acad_Term, gpa.Revised_Grade,&#xA;              ROW_NUMBER() OVER (&#xA;                     PARTITION BY gpa.Student_Id, gpa.Module_Code&#xA;                     ORDER BY ---- most recent passed grade, otherwise most recent non-passed grade&#xA;                           CASE WHEN gpa.Revised_Grade IN ('AD','A','B+','B','C+','C','D+','D','P','PC') THEN 1&#xA;                           ELSE 0&#xA;                           END DESC, &#xA;                           gpa.Acad_Term DESC) AS rownum&#xA;       FROM DW_STUDENT_GPA gpa&#xA;       INNER JOIN (&#xA;       SELECT Student_Id, Module_Code&#xA;       FROM DW_STUDENT_GPA&#xA;       WHERE Qual_Type = 'DPFT'&#xA;       EXCEPT&#xA;       SELECT Student_ID, Module_Code&#xA;       FROM DW_MODULE_EXEMPTION&#xA;       WHERE Qual_Type = 'DPFT'&#xA;       AND Grade = 'EX') non_ex&#xA;       ON gpa.Student_Id = non_ex.Student_Id&#xA;       AND gpa.Module_Code = non_ex.Module_Code&#xA;       WHERE Qual_Type = 'DPFT') gpa&#xA;WHERE gpa.rownum = 1&#xA;UNION &#xA;SELECT Student_ID, Module_Code, CAST(Articulation_Term as varchar(4))AS Acad_Term, 'EX' AS Final_Grade&#xA;FROM DW_MODULE_EXEMPTION&#xA;WHERE Qual_Type = 'DPFT'&#xA;AND Grade = 'EX'&#xA;&#xA; )&#xA; B&#xA;ON A.STUDENT_ID=B.Student_Id&#xA;AND a.module_code=b.Module_Code&#x9;&#xA;WHERE A.PR=1&#xA;)a&#xA;---------------------/*step 3 Distinct Active_Students_with_cgpa  JOINING COURSE PRIORITY AND NON PRIORITY */------------&#xA;&#xA;INSERT INTO [DM_ORG_PET_MODULE_COMPLETION_STEP_3]&#xA;SELECT a.*,B.ACAD_TERM,Final_Grade&#xA;FROM [DM_ORG_PET_MODULE_COMPLETION_STEP_1] A&#xA;LEFT JOIN &#xA; [DM_ORG_PET_MODULE_COMPLETION_STEP_2] B&#xA; on A.Student_ID=B.Student_ID&#xA; AND A.MODULE_ID=B.MODULE_ID&#xA; and a.Req_Category=b.Req_Category&#xA;&#xA;&#xA;---------------------------------------INSERT INTO MAIN TABLE-----------------------------------------&#xA;&#xA;INSERT INTO [dbo].[DM_ORG_PET_MODULE_COMPLETION]&#xA;&#xA;SELECT  &#xA;DAS.Student_Id&#xA;,Frozen_Intake_Term AS Frozen_Enrolment_Term&#xA;,Acad_Prog AS Frozen_Enrolment_Programme_Code&#xA;,PT1.Prog_Code+' - '+PT1.Prog_Descr AS Frozen_Enrolment_Programme&#xA;,DAS.Admit_Term AS Admit_Term&#xA;,PT.School_Centre AS Department&#xA;,Descr AS Department_Descr&#xA;,DAS.Prog AS Programme_Code&#xA;,(DAS.PROG+' - '+ PT.Prog_Descr)Programme &#xA;,DAS.REqmt_Term AS Requirement_Term&#xA;,Specialisation &#xA;,NULL AS No_of_Semesters_Completed----need to update once confirmed with huimei for calculation&#xA;,NULL AS Year_of_Study----need to update once confirmed with huimei for calculation&#xA;,Student_Status AS Latest_Student_Status&#xA;,(CASE WHEN STUDENT_STATUS='CM' THEN TERM ELSE NULL END ) AS Completion_Term&#xA;,Cumulative_Gpa AS Latest_Cgpa&#xA;,DAS.Req_Category as Module_Category&#xA;,DAS.Min_Mc_Rq as Min_MC_Requirement&#xA;,Module_Id&#xA;,Module_Code&#xA;,Module_Desc as Module_Name&#xA;,(Module_Code+ ' '+ Module_Desc) AS Module&#xA;,Mod_Credit&#x9;&#x9;&#xA;,('AY20'+(LEFT(CAST(DAS.Acad_Term AS VARCHAR(4)),2))) AS Academic_Year&#xA;,(CASE WHEN (RIGHT(CAST(DAS.Acad_Term AS VARCHAR(4)),2))='10' THEN 'S1'&#xA;WHEN (RIGHT(CAST(DAS.Acad_Term AS VARCHAR(4)),2))='20' THEN 'S2'&#xA; ELSE null END) as Semester&#xA;&#xA;,(('AY'+(LEFT(CAST(DAS.Acad_Term AS VARCHAR(4)),2)))+(CASE WHEN (RIGHT(CAST(DAS.Acad_Term AS VARCHAR(4)),2))='10' THEN 'S1' ELSE 'S2' END)) Academic_Term &#xA;,FINAL_GRADE AS Final_Grade&#x9;&#xA;&#xA;,(CASE WHEN (FINAL_GRADE in ('N', 'E', 'F') OR FINAL_GRADE IS NULL) Then 'N' Else 'Y' END ) Module_Completion_Indicator&#xA;,NULL AS No_of_Modules_Completed_for_Category&#xA;, NULL AS Module_Credits_Obtained_for_Category&#xA;,NULL AS Module_Completion_Rate_for_Category&#xA;,Overall_Min_MC_Req&#xA;,NULL AS Overall_No_of_Modules_Completed&#xA;,NULL AS Overall_Module_Credits_Obtained&#xA;,NULL AS Overall_Module_Completion_Rate&#xA;,NULL AS Completion_within_6_Semesters&#xA;,getdate() as created_on&#xA;,getdate() as modified_on&#xA;,NULL as Module_Taken_Ind&#xA;FROM DM_ORG_PET_MODULE_COMPLETION_STEP_3&#xA;DAS&#xA;LEFT JOIN (select distinct Term_Begin_Date,term from DW_TERM_SETUP WHERE Qual_Type='DPFT') TS&#xA;ON TS.Term_Begin_Date=DAS.Effective_Date&#xA;LEFT JOIN DW_STUDENT_FROZEN_ENROLMENT DF ON DF.Student_Id =DAS.Student_Id AND DAS.Admit_Term=DF.Admit_Term--1651694&#xA;LEFT JOIN (SELECT  Prog_Descr,Prog_Code,School_Centre,ROW_NUMBER()OVER( PARTITION BY Prog_Code ORDER BY EFFECTIVE_DATE DESC)ROW_NUM &#xA;FROM DW_PET_PROGRAMME) PT1 ON PT1.ROW_NUM=1 and PT1.Prog_Code=DF.Acad_Prog--1651694&#xA;LEFT JOIN (SELECT  Prog_Descr,Prog_Code,School_Centre,ROW_NUMBER()OVER( PARTITION BY Prog_Code ORDER BY EFFECTIVE_DATE DESC)ROW_NUM &#xA;FROM DW_PET_PROGRAMME) PT ON PT.ROW_NUM=1 and PT.Prog_Code=DAS.Prog--1651694&#xA;LEFT JOIN DW_EXT_DEPARTMENT D ON PT.School_Centre=D.Department --1651694&#xA;LEFT JOIN (SELECT&#xA;Sum(Min_MC_Rq)Overall_Min_MC_Req ,Reqmt_Term, Specialisatn,prog, Req_Category&#xA;FROM DW_COURSE_STRUCTURE WHERE Qual_Type='DPFT'&#xA;GROUP BY Reqmt_Term, Specialisatn,PROG, Req_Category)A&#xA;ON DAS.Reqmt_Term=A.Reqmt_Term&#xA;AND DAS.Specialisation=A.Specialisatn&#xA;AND A.Req_Category=DAS.Req_Category&#xA;and A.PROG=DAS.PROG&#xA;LEFT Join (SELECT DISTINCT  Student_Id, Programme,Acad_Term, Reqmt_Term ,  Cumulative_Gpa  FROM DW_STUDENT_GPA where Latest_GPA_Indicator ='Y'&#xA;AND Qual_Type='DPFT') B&#xA;ON B.Student_Id=DAS.Student_Id&#xA;AND DAS.Reqmt_Term=A.Reqmt_Term&#xA;and A.PROG=DAS.PROG;&#xA;------------------------------------------------UPDATE No_of_Modules_Completed_for_Category,Module_Credits_Obtained_for_Category--------------------------------------&#xA;;with modcomagg&#xA;as&#xA;(&#xA;       SELECT &#xA;              Student_ID, Admit_Term, Programme_Code, Module_Category, No_of_Modules_Completed_for_Category, Module_Credits_Obtained_for_Category,&#xA;              CAST(Module_Credits_Obtained_for_Category AS decimal)/Min_MC_Requirement * 100.0 AS Module_Completion_Rate_for_Category&#xA;       FROM (&#xA;              SELECT Student_ID, Admit_Term, Programme_Code, Module_Category, Min_MC_Requirement,&#xA;              SUM(CASE Module_Completion_Ind&#xA;                     WHEN 'Y' THEN 1&#xA;                     ELSE 0&#xA;              END) AS No_of_Modules_Completed_for_Category,&#xA;              SUM(CASE Module_Completion_Ind&#xA;                     WHEN 'Y' THEN Progress_Unit&#xA;                     ELSE 0&#xA;              END) AS Module_Credits_Obtained_for_Category&#xA;              FROM DM_ORG_PET_MODULE_COMPLETION&#xA;              GROUP BY Student_ID, Admit_Term, Programme_Code, Module_Category, Min_MC_Requirement) modcomagg)&#xA;&#xA;UPDATE modcom&#xA;SET modcom.No_of_Modules_Completed_for_Category = modcomagg.No_of_Modules_Completed_for_Category,&#xA;       modcom.Module_Credits_Obtained_for_Category = modcomagg.Module_Credits_Obtained_for_Category,&#xA;       modcom.Module_Completion_Rate_for_Category = modcomagg.Module_Completion_Rate_for_Category&#xA;FROM DM_ORG_PET_MODULE_COMPLETION modcom&#xA;INNER JOIN&#xA;modcomagg&#xA;&#xA;ON modcom.Student_ID = modcomagg.Student_ID&#xA;AND modcom.Admit_Term = modcomagg.Admit_Term&#xA;AND modcom.Programme_Code = modcomagg.Programme_Code&#xA;AND modcom.Module_Category = modcomagg.Module_Category;&#xA;------------------------------------------------ update Overall_Min_MC_Req,Overall_No_of_Modules_Completed,Overall_Module_Credits_Obtaine------------------------&#xA;;with modcomagg1&#xA;as &#xA;&#xA;(&#xA;       SELECT Student_ID, Admit_Term, Programme_Code,&#xA;              SUM(Min_MC_Requirement) AS Overall_Min_MC_Req,&#xA;              SUM(No_of_Modules_Completed_for_Category) AS Overall_No_of_Modules_Completed,&#xA;              SUM(Module_Credits_Obtained_for_Category) AS Overall_Module_Credits_Obtained,&#xA;              CAST(SUM(Module_Credits_Obtained_for_Category) AS decimal)/SUM(Min_MC_Requirement) * 100.0 AS Overall_Module_Completion_Rate&#xA;       FROM (&#xA;       SELECT DISTINCT&#xA;              Student_ID, Admit_Term, Programme_Code, Module_Category,&#xA;              Min_MC_Requirement,&#xA;              No_of_Modules_Completed_for_Category,&#xA;              Module_Credits_Obtained_for_Category            &#xA;       FROM DM_ORG_PET_MODULE_COMPLETION) modcomagg&#xA;       GROUP BY Student_ID, Admit_Term, Programme_Code)&#xA;&#x9;   &#xA;UPDATE modcom&#xA;SET modcom.Overall_Min_MC_Req = modcomagg1.Overall_Min_MC_Req,&#xA;       modcom.Overall_No_of_Modules_Completed = modcomagg1.Overall_No_of_Modules_Completed,&#xA;       modcom.Overall_Module_Credits_Obtained = modcomagg1.Overall_Module_Credits_Obtained,&#xA;       modcom.Overall_Module_Completion_Rate = modcomagg1.Overall_Module_Completion_Rate&#xA;FROM DM_ORG_PET_MODULE_COMPLETION modcom&#xA;INNER JOIN &#xA; modcomagg1&#xA;ON modcom.Student_ID = modcomagg1.Student_ID&#xA;AND modcom.Admit_Term = modcomagg1.Admit_Term&#xA;AND modcom.Programme_Code = modcomagg1.Programme_Code;&#xA;&#xA;&#xA;/* update   No_of_Semesters_Completed, Year_of_Study*/&#xA;UPDATE modcom&#xA;SET modcom.No_of_Semesters_Completed = ISNULL(sem.No_of_Semesters_Completed,0),&#xA;modcom.Year_of_Study = ISNULL(sem.Year_of_Study,1)&#xA;FROM DM_ORG_PET_MODULE_COMPLETION modcom&#xA;LEFT JOIN (&#xA;       SELECT *,&#xA;       (CASE WHEN  No_of_Semesters_Completed IN (0 , 1) Then 1&#xA;       WHEN No_of_Semesters_Completed IN (2 , 3) Then 2&#xA;       WHEN  No_of_Semesters_Completed &gt;=4 Then 3&#xA;       ELSE NULL&#xA;       END)Year_of_Study&#xA;       FROM &#xA;        (SELECT ISNULL(A.Student_Id,B.Student_ID) AS Student_ID,&#xA;       (CASE WHEN SUM_MOD&lt;20 THEN ISNULL(Sem_Completed,0)&#xA;       WHEN   (SUM_MOD &gt;= 20 and SUM_MOD &lt; 40) Then ISNULL(Sem_Completed,0) + 1&#xA;       WHEN SUM_MOD &gt;= 40 Then ISNULL(Sem_Completed,0) + 2&#xA;       WHEN SUM_MOD is null Then ISNULL(Sem_Completed,0)&#xA;       ELSE SUM_MOD&#xA;       END)No_of_Semesters_Completed&#xA;       from (select count(distinct Acad_Term) as Sem_Completed, Student_Id from DW_STUDENT_GPA&#xA;       WHERE Qual_Type = 'DPFT'&#xA;       group by Student_Id)a&#xA;       FULL OUTER JOIN &#xA;         (SELECT Student_ID, SUM(Progress_Unit) AS SUM_MOD&#xA;       FROM DM_ORG_PET_MODULE_COMPLETION&#xA;       WHERE Final_Grade = 'EX'&#xA;       GROUP BY Student_ID)B&#xA;         ON A.Student_Id=B.STUDENT_ID&#xA;         )A) sem&#xA;ON modcom.Student_ID = sem.Student_ID&#xA;  ----------------------------------UPDATE Completion_within_6_Semesters--------------&#xA;  UPDATE DM_ORG_PET_MODULE_COMPLETION&#xA;SET Completion_within_6_Semesters = &#xA;CASE &#xA;       WHEN No_of_Semesters_Completed &lt;= 6 AND Overall_Module_Completion_Rate &gt;= 100 THEN 'Y'&#xA;       ELSE 'N'&#xA;END&#xA;&#xA;---------------------UPDATE Module_Taken_Ind------------------&#xA;&#xA;UPDATE mc&#xA;SET mc.Module_Taken_Ind = 'Y'&#xA;FROM DM_ORG_PET_MODULE_COMPLETION mc&#xA;INNER JOIN (&#xA;       SELECT DISTINCT Student_ID, Module_Code&#xA;       FROM DM_ORG_PET_MODULE_COMPLETION&#xA;       WHERE Module_Completion_Ind = 'Y') mod_completed&#xA;ON mc.Student_ID = mod_completed.Student_ID&#xA;AND mc.Module_Code = mod_completed.Module_Code;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;------TRUNCATE TABLE INTERMEDIATE TABLE------&#xA;TRUNCATE TABLE DM_ORG_PET_MODULE_COMPLETION_STEP_1&#xA;TRUNCATE TABLE DM_ORG_PET_MODULE_COMPLETION_STEP_2&#xA;TRUNCATE TABLE DM_ORG_PET_MODULE_COMPLETION_STEP_3&#xA;--------------------------------------&#xA;COMMIT TRANSACTION&#xA;END TRY&#xA;&#xA;BEGIN CATCH&#xA;  ROLLBACK TRANSACTION&#xA;INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)&#xA;  SELECT   &#xA;         CAST(@jobstatusid as int) as JOB_STATUS_ID&#xA;        ,ERROR_MESSAGE() AS ErrorMessage&#xA;&#x9;&#x9;,@PROCESSDATE  as created_on&#xA;  &#xA;  &#xA;END CATCH  &#xA;GO&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SQL_DM_Load">
      <DTS:VariableValue
        DTS:DataType="8">BEGIN TRANSACTION
BEGIN TRY
------------
DELETE FROM DM_ORG_PET_MODULE_COMPLETION
--------------DECLARE PROCESS DATE--------
DECLARE @PROCESSDATE DATETIME
,@jobstatusid varchar(5)
SELECT @PROCESSDATE=GETDATE()
select @jobstatusid=0
---------------------------------/* step 1 Distinct_Active_Students_with_Specialisatn_and_Course WITHOUT PRIORITY */--------------------------------------------------


INSERT INTO DM_ORG_PET_MODULE_COMPLETION_STEP_1
SELECT *
 FROM 
 (SELECT DASS.*,ROW_NUMBER()OVER( PARTITION BY STUDENT_ID,MODULE_ID ORDER BY Module_Category_priority )PR
 ,Module_Id,Module_Code,Req_Category,Module_Desc,Mod_Credit,Module_Category_priority, Min_Mc_Rq,
 
 ROW_NUMBER() OVER (PARTITION BY 
 DASS.Student_Id, DASS.Admit_Term, DASS.Prog, DASS.Reqmt_Term, DASS.Student_Status,DASS.Effective_Date,DASS.Specialisation,
 Module_Id,Module_Code,Req_Category,Mod_Credit,Module_Category_priority, Min_Mc_Rq
 ORDER BY CS.CS_MODIFIED_ON DESC) CSROWNUM
 
 FROM 
(SELECT  DAS.Student_Id, Admit_Term, Prog, DAS.Reqmt_Term, Student_Status,Effective_Date,Specialisation FROM 
(SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Student_Status,Effective_Date
FROM (
SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Student_Status, Effective_Date,
 ROW_NUMBER() OVER (
  PARTITION BY Student_Id
  ORDER BY Effective_Date DESC, Effective_Seq DESC) rownum
FROM (
 SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Prog_Action
 FROM (
  SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Prog_Action,
  ROW_NUMBER() OVER (
   PARTITION BY Student_Id, Prog
   ORDER BY Effective_Date DESC, Effective_Seq DESC) rownum
  FROM DW_STUDENT_MOVEMENT
  WHERE Qual_Type = 'DPFT') sm
 WHERE sm.rownum = 1
 AND (Student_Status = 'AC' AND Prog_Action = 'MATR'
 OR (Student_Status = 'CM' AND Prog_Action = 'COMP'))
 UNION ALL
 SELECT DISTINCT sm.Student_Id, Admit_Term, Prog, Reqmt_Term, sm.Effective_Date, sm.Effective_Seq, Student_Status, Prog_Action
 FROM (
  SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Prog_Action
  FROM (
   SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Prog_Action,
   ROW_NUMBER() OVER (
    PARTITION BY Student_Id, Prog
    ORDER BY Effective_Date DESC, Effective_Seq DESC) rownum
   FROM DW_STUDENT_MOVEMENT
   WHERE Qual_Type = 'DPFT') sm
  WHERE sm.rownum = 1
  AND Student_Status = 'AC' AND Prog_Action IN ('PRGC','RADM','RLOA')) sm
 INNER JOIN (
  SELECT Student_Id, Effective_Date, Effective_Seq
  FROM DW_STUDENT_MOVEMENT
  WHERE Qual_Type = 'DPFT'
  AND Student_Status = 'AC' AND Prog_Action = 'MATR') m
 ON sm.Student_Id = m.Student_Id
 AND (m.Effective_Date &lt; sm.Effective_Date
 OR (m.Effective_Date = sm.Effective_Date AND m.Effective_Seq &lt; sm.Effective_Seq))) sm) sm
WHERE rownum = 1
)DAS
INNER JOIN 
( select Student_id, Qual_Type, Specialisation, Rqmt_Term from (
select student_id, qual_type, specialisation, rqmt_term, ROW_NUMBER() OVER (
    PARTITION BY Student_Id, Rqmt_Term
    ORDER BY Effective_Date DESC, Effective_Sequence DESC) rownum
   FROM [DW_STUDENT_SPECIALISATN]
  where Qual_Type='DPFT') active
    WHERE active.rownum = 1) DSS--55145
	ON DAS.Student_Id=DSS.Student_id AND DAS.Reqmt_Term=DSS.Rqmt_Term)DASS
	INNER JOIN 
	(SELECT  DISTINCT Specialisatn,Module_Id,Module_Code,Prog,Reqmt_Term,Req_Category,Module_Desc,Mod_Credit,Modified_On AS CS_MODIFIED_ON,
	(CASE WHEN Req_Category='Discipline Modules' THEN 2
WHEN Req_Category='Elective ModuleS' THEN 4
WHEN Req_Category='Freely Chosen Modules' THEN 5
WHEN Req_Category='General Modules' THEN 1
WHEN Req_Category='Industry Immersion Programme' THEN 1
WHEN Req_Category='Industry Orientation Programme' THEN 1
WHEN Req_Category='Specialisation Modules' THEN 3
ELSE '' END )Module_Category_priority, Min_Mc_Rq
FROM DW_COURSE_STRUCTURE WHERE Qual_Type='DPFT')CS
ON CS.Specialisatn=DASS.Specialisation
AND CS.Prog = DASS.Prog 
and CS.Reqmt_Term=DASS.Reqmt_Term
)A
WHERE CSROWNUM = 1
--AND PR=1

 ------------------------------------------/* step 2 Active_Students_with_cgpa WITH COURSE STRUNCTURE PRIORITY AS 1*/------------------------
INSERT INTO [DM_ORG_PET_MODULE_COMPLETION_STEP_2]

SELECT * FROM 
(SELECT a.*,Acad_Term,Final_Grade FROM 
[DM_ORG_PET_MODULE_COMPLETION_STEP_1] A 
INNER JOIN 
(
SELECT gpa.Student_Id, gpa.Module_Code, gpa.Acad_Term, gpa.Revised_Grade AS Final_Grade 
FROM (
       SELECT 
              gpa.Student_Id, gpa.Module_Code, gpa.Acad_Term, gpa.Revised_Grade,
              ROW_NUMBER() OVER (
                     PARTITION BY gpa.Student_Id, gpa.Module_Code
                     ORDER BY ---- most recent passed grade, otherwise most recent non-passed grade
                           CASE WHEN gpa.Revised_Grade IN ('AD','A','B+','B','C+','C','D+','D','P','PC') THEN 1
                           ELSE 0
                           END DESC, 
                           gpa.Acad_Term DESC) AS rownum
       FROM DW_STUDENT_GPA gpa
       INNER JOIN (
       SELECT Student_Id, Module_Code
       FROM DW_STUDENT_GPA
       WHERE Qual_Type = 'DPFT'
       EXCEPT
       SELECT Student_ID, Module_Code
       FROM DW_MODULE_EXEMPTION
       WHERE Qual_Type = 'DPFT'
       AND Grade = 'EX') non_ex
       ON gpa.Student_Id = non_ex.Student_Id
       AND gpa.Module_Code = non_ex.Module_Code
       WHERE Qual_Type = 'DPFT') gpa
WHERE gpa.rownum = 1
UNION 
SELECT Student_ID, Module_Code, CAST(Articulation_Term as varchar(4))AS Acad_Term, 'EX' AS Final_Grade
FROM DW_MODULE_EXEMPTION
WHERE Qual_Type = 'DPFT'
AND Grade = 'EX'

 )
 B
ON A.STUDENT_ID=B.Student_Id
AND a.module_code=b.Module_Code	
WHERE A.PR=1
)a
---------------------/*step 3 Distinct Active_Students_with_cgpa  JOINING COURSE PRIORITY AND NON PRIORITY */------------

INSERT INTO [DM_ORG_PET_MODULE_COMPLETION_STEP_3]
SELECT a.*,B.ACAD_TERM,Final_Grade
FROM [DM_ORG_PET_MODULE_COMPLETION_STEP_1] A
LEFT JOIN 
 [DM_ORG_PET_MODULE_COMPLETION_STEP_2] B
 on A.Student_ID=B.Student_ID
 AND A.MODULE_ID=B.MODULE_ID
 and a.Req_Category=b.Req_Category


---------------------------------------INSERT INTO MAIN TABLE-----------------------------------------

INSERT INTO [dbo].[DM_ORG_PET_MODULE_COMPLETION]

SELECT  
DAS.Student_Id
,Frozen_Intake_Term AS Frozen_Enrolment_Term
,Acad_Prog AS Frozen_Enrolment_Programme_Code
,PT1.Prog_Code+' - '+PT1.Prog_Descr AS Frozen_Enrolment_Programme
,DAS.Admit_Term AS Admit_Term
,PT.School_Centre AS Department
,Descr AS Department_Descr
,DAS.Prog AS Programme_Code
,(DAS.PROG+' - '+ PT.Prog_Descr)Programme 
,DAS.REqmt_Term AS Requirement_Term
,Specialisation 
,NULL AS No_of_Semesters_Completed----need to update once confirmed with huimei for calculation
,NULL AS Year_of_Study----need to update once confirmed with huimei for calculation
,Student_Status AS Latest_Student_Status
,(CASE WHEN STUDENT_STATUS='CM' THEN TERM ELSE NULL END ) AS Completion_Term
,Cumulative_Gpa AS Latest_Cgpa
,DAS.Req_Category as Module_Category
,DAS.Min_Mc_Rq as Min_MC_Requirement
,Module_Id
,Module_Code
,Module_Desc as Module_Name
,(Module_Code+ ' '+ Module_Desc) AS Module
,Mod_Credit		
,('AY20'+(LEFT(CAST(DAS.Acad_Term AS VARCHAR(4)),2))) AS Academic_Year
,(CASE WHEN (RIGHT(CAST(DAS.Acad_Term AS VARCHAR(4)),2))='10' THEN 'S1'
WHEN (RIGHT(CAST(DAS.Acad_Term AS VARCHAR(4)),2))='20' THEN 'S2'
 ELSE null END) as Semester

,(('AY'+(LEFT(CAST(DAS.Acad_Term AS VARCHAR(4)),2)))+(CASE WHEN (RIGHT(CAST(DAS.Acad_Term AS VARCHAR(4)),2))='10' THEN 'S1' ELSE 'S2' END)) Academic_Term 
,FINAL_GRADE AS Final_Grade	

,(CASE WHEN (FINAL_GRADE in ('N', 'E', 'F') OR FINAL_GRADE IS NULL) Then 'N' Else 'Y' END ) Module_Completion_Indicator
,NULL AS No_of_Modules_Completed_for_Category
, NULL AS Module_Credits_Obtained_for_Category
,NULL AS Module_Completion_Rate_for_Category
,Overall_Min_MC_Req
,NULL AS Overall_No_of_Modules_Completed
,NULL AS Overall_Module_Credits_Obtained
,NULL AS Overall_Module_Completion_Rate
,NULL AS Completion_within_6_Semesters
,getdate() as created_on
,getdate() as modified_on
,NULL as Module_Taken_Ind
FROM DM_ORG_PET_MODULE_COMPLETION_STEP_3
DAS
LEFT JOIN (select distinct Term_Begin_Date,term from DW_TERM_SETUP WHERE Qual_Type='DPFT') TS
ON TS.Term_Begin_Date=DAS.Effective_Date
LEFT JOIN DW_STUDENT_FROZEN_ENROLMENT DF ON DF.Student_Id =DAS.Student_Id AND DAS.Admit_Term=DF.Admit_Term--1651694
LEFT JOIN (SELECT  Prog_Descr,Prog_Code,School_Centre,ROW_NUMBER()OVER( PARTITION BY Prog_Code ORDER BY EFFECTIVE_DATE DESC)ROW_NUM 
FROM DW_PET_PROGRAMME) PT1 ON PT1.ROW_NUM=1 and PT1.Prog_Code=DF.Acad_Prog--1651694
LEFT JOIN (SELECT  Prog_Descr,Prog_Code,School_Centre,ROW_NUMBER()OVER( PARTITION BY Prog_Code ORDER BY EFFECTIVE_DATE DESC)ROW_NUM 
FROM DW_PET_PROGRAMME) PT ON PT.ROW_NUM=1 and PT.Prog_Code=DAS.Prog--1651694
LEFT JOIN DW_EXT_DEPARTMENT D ON PT.School_Centre=D.Department --1651694
LEFT JOIN (SELECT
Sum(Min_MC_Rq)Overall_Min_MC_Req ,Reqmt_Term, Specialisatn,prog, Req_Category
FROM DW_COURSE_STRUCTURE WHERE Qual_Type='DPFT'
GROUP BY Reqmt_Term, Specialisatn,PROG, Req_Category)A
ON DAS.Reqmt_Term=A.Reqmt_Term
AND DAS.Specialisation=A.Specialisatn
AND A.Req_Category=DAS.Req_Category
and A.PROG=DAS.PROG
LEFT Join (SELECT DISTINCT  Student_Id, Programme,Acad_Term, Reqmt_Term ,  Cumulative_Gpa  FROM DW_STUDENT_GPA where Latest_GPA_Indicator ='Y'
AND Qual_Type='DPFT') B
ON B.Student_Id=DAS.Student_Id
AND DAS.Reqmt_Term=A.Reqmt_Term
and A.PROG=DAS.PROG;
------------------------------------------------UPDATE No_of_Modules_Completed_for_Category,Module_Credits_Obtained_for_Category--------------------------------------
;with modcomagg
as
(
       SELECT 
              Student_ID, Admit_Term, Programme_Code, Module_Category, No_of_Modules_Completed_for_Category, Module_Credits_Obtained_for_Category,
              CAST(Module_Credits_Obtained_for_Category AS decimal)/Min_MC_Requirement * 100.0 AS Module_Completion_Rate_for_Category
       FROM (
              SELECT Student_ID, Admit_Term, Programme_Code, Module_Category, Min_MC_Requirement,
              SUM(CASE Module_Completion_Ind
                     WHEN 'Y' THEN 1
                     ELSE 0
              END) AS No_of_Modules_Completed_for_Category,
              SUM(CASE Module_Completion_Ind
                     WHEN 'Y' THEN Progress_Unit
                     ELSE 0
              END) AS Module_Credits_Obtained_for_Category
              FROM DM_ORG_PET_MODULE_COMPLETION
              GROUP BY Student_ID, Admit_Term, Programme_Code, Module_Category, Min_MC_Requirement) modcomagg)

UPDATE modcom
SET modcom.No_of_Modules_Completed_for_Category = modcomagg.No_of_Modules_Completed_for_Category,
       modcom.Module_Credits_Obtained_for_Category = modcomagg.Module_Credits_Obtained_for_Category,
       modcom.Module_Completion_Rate_for_Category = modcomagg.Module_Completion_Rate_for_Category
FROM DM_ORG_PET_MODULE_COMPLETION modcom
INNER JOIN
modcomagg

ON modcom.Student_ID = modcomagg.Student_ID
AND modcom.Admit_Term = modcomagg.Admit_Term
AND modcom.Programme_Code = modcomagg.Programme_Code
AND modcom.Module_Category = modcomagg.Module_Category;
------------------------------------------------ update Overall_Min_MC_Req,Overall_No_of_Modules_Completed,Overall_Module_Credits_Obtaine------------------------
;with modcomagg1
as 

(
       SELECT Student_ID, Admit_Term, Programme_Code,
              SUM(Min_MC_Requirement) AS Overall_Min_MC_Req,
              SUM(No_of_Modules_Completed_for_Category) AS Overall_No_of_Modules_Completed,
              SUM(Module_Credits_Obtained_for_Category) AS Overall_Module_Credits_Obtained,
              CAST(SUM(Module_Credits_Obtained_for_Category) AS decimal)/SUM(Min_MC_Requirement) * 100.0 AS Overall_Module_Completion_Rate
       FROM (
       SELECT DISTINCT
              Student_ID, Admit_Term, Programme_Code, Module_Category,
              Min_MC_Requirement,
              No_of_Modules_Completed_for_Category,
              Module_Credits_Obtained_for_Category            
       FROM DM_ORG_PET_MODULE_COMPLETION) modcomagg
       GROUP BY Student_ID, Admit_Term, Programme_Code)
	   
UPDATE modcom
SET modcom.Overall_Min_MC_Req = modcomagg1.Overall_Min_MC_Req,
       modcom.Overall_No_of_Modules_Completed = modcomagg1.Overall_No_of_Modules_Completed,
       modcom.Overall_Module_Credits_Obtained = modcomagg1.Overall_Module_Credits_Obtained,
       modcom.Overall_Module_Completion_Rate = modcomagg1.Overall_Module_Completion_Rate
FROM DM_ORG_PET_MODULE_COMPLETION modcom
INNER JOIN 
 modcomagg1
ON modcom.Student_ID = modcomagg1.Student_ID
AND modcom.Admit_Term = modcomagg1.Admit_Term
AND modcom.Programme_Code = modcomagg1.Programme_Code;


/* update   No_of_Semesters_Completed, Year_of_Study*/
UPDATE modcom
SET modcom.No_of_Semesters_Completed = ISNULL(sem.No_of_Semesters_Completed,0),
modcom.Year_of_Study = ISNULL(sem.Year_of_Study,1)
FROM DM_ORG_PET_MODULE_COMPLETION modcom
LEFT JOIN (
       SELECT *,
       (CASE WHEN  No_of_Semesters_Completed IN (0 , 1) Then 1
       WHEN No_of_Semesters_Completed IN (2 , 3) Then 2
       WHEN  No_of_Semesters_Completed &gt;=4 Then 3
       ELSE NULL
       END)Year_of_Study
       FROM 
        (SELECT ISNULL(A.Student_Id,B.Student_ID) AS Student_ID,
       (CASE WHEN SUM_MOD&lt;20 THEN ISNULL(Sem_Completed,0)
       WHEN   (SUM_MOD &gt;= 20 and SUM_MOD &lt; 40) Then ISNULL(Sem_Completed,0) + 1
       WHEN SUM_MOD &gt;= 40 Then ISNULL(Sem_Completed,0) + 2
       WHEN SUM_MOD is null Then ISNULL(Sem_Completed,0)
       ELSE SUM_MOD
       END)No_of_Semesters_Completed
       from (select count(distinct Acad_Term) as Sem_Completed, Student_Id from DW_STUDENT_GPA
       WHERE Qual_Type = 'DPFT'
       group by Student_Id)a
       FULL OUTER JOIN 
         (SELECT Student_ID, SUM(Progress_Unit) AS SUM_MOD
       FROM DM_ORG_PET_MODULE_COMPLETION
       WHERE Final_Grade = 'EX'
       GROUP BY Student_ID)B
         ON A.Student_Id=B.STUDENT_ID
         )A) sem
ON modcom.Student_ID = sem.Student_ID
  ----------------------------------UPDATE Completion_within_6_Semesters--------------
  UPDATE DM_ORG_PET_MODULE_COMPLETION
SET Completion_within_6_Semesters = 
CASE 
       WHEN No_of_Semesters_Completed &lt;= 6 AND Overall_Module_Completion_Rate &gt;= 100 THEN 'Y'
       ELSE 'N'
END

---------------------UPDATE Module_Taken_Ind------------------

UPDATE mc
SET mc.Module_Taken_Ind = 'Y'
FROM DM_ORG_PET_MODULE_COMPLETION mc
INNER JOIN (
       SELECT DISTINCT Student_ID, Module_Code
       FROM DM_ORG_PET_MODULE_COMPLETION
       WHERE Module_Completion_Ind = 'Y') mod_completed
ON mc.Student_ID = mod_completed.Student_ID
AND mc.Module_Code = mod_completed.Module_Code;





------TRUNCATE TABLE INTERMEDIATE TABLE------
TRUNCATE TABLE DM_ORG_PET_MODULE_COMPLETION_STEP_1
TRUNCATE TABLE DM_ORG_PET_MODULE_COMPLETION_STEP_2
TRUNCATE TABLE DM_ORG_PET_MODULE_COMPLETION_STEP_3
--------------------------------------
COMMIT TRANSACTION
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION
INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)
  SELECT   
         CAST(@jobstatusid as int) as JOB_STATUS_ID
        ,ERROR_MESSAGE() AS ErrorMessage
		,@PROCESSDATE  as created_on
  
  
END CATCH  
GO</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8F4E5E3B-B9C0-4233-AF02-B18DDD779DE5}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="STAGE">
      <DTS:VariableValue
        DTS:DataType="8">DW</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2669DB7F-3975-4A7A-8D5C-662D7BFE8CDF}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TgtTableName">
      <DTS:VariableValue
        DTS:DataType="8">DM_ORG_PET_MODULE_COMPLETION</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create ETL Job Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{9618250C-6E95-438D-B5DE-BFC7DE6C554F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create ETL Job Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{3CC74AA5-C1C0-4675-A57F-E5AC44004B7C}"
          SQLTask:SqlStatementSource="Exec [dbo].[usp_InsertETLJobLog] ?, ?, ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Job_name"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="1"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="2"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="3"
            SQLTask:DtsVariableName="User::TgtTableName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Error Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{F083A6BD-0E0C-45C3-B991-09C71C9B7F55}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Error Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{3CC74AA5-C1C0-4675-A57F-E5AC44004B7C}"
          SQLTask:SqlStatementSource="UPDATE [dbo].[ETL_JOB_STATUS]&#xA;SET&#xA;ERROR_MSG = 'STG table is not completed',&#xA;JOB_STATUS ='Fail'&#xA;--PROCESSED_ON =getdate()&#xA;WHERE JOB_STATUS_ID=?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\JOB_STATUS_ID"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{F70D7A2B-B313-465A-AD78-9E161B1BE86E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="JOB_STATUS_ID"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{3CC74AA5-C1C0-4675-A57F-E5AC44004B7C}"
          SQLTask:SqlStatementSource="SELECT max([JOB_STATUS_ID])&#xA;      &#xA;  FROM [dbo].[ETL_JOB_STATUS] where [SOURCE_FILENAME]=? &#xA;---and convert(varchar(8),CREATED_ON,112)=convert--(varchar(8) ,getdate(),112)"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Into DM"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{656B5BFA-C1CD-4D4F-B120-58DB00C1D2BE}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Into DM"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{80DB3F40-FE3C-450D-B96A-E696A07E53AF}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::SQL_DM_Load" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Process_Date"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{C331FF02-633D-426D-A7A6-5AC9EC046730}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Process_Date"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{80DB3F40-FE3C-450D-B96A-E696A07E53AF}"
          SQLTask:SqlStatementSource="Select getdate()"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Process_date" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Process_date"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="135"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update Job Status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{602145FC-32B5-4AF8-B74F-E22273036994}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update Job Status"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{3CC74AA5-C1C0-4675-A57F-E5AC44004B7C}"
          SQLTask:SqlStatementSource="DECLARE &#xA;@jobstatusid INT &#xA;select @jobstatusid=?&#xA;IF exists(select * from dbo.ETL_ERROR_LOG where [JOB_STATUS_ID]=@jobstatusid)&#xA; BEGIN&#xA; Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Fail'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;  END&#xA;ELSE&#xA;BEGIN&#xA;Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Success'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;END" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Validate job status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{5F6BF274-3F4E-42C1-9936-F2706343004C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Validate job status"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{3CC74AA5-C1C0-4675-A57F-E5AC44004B7C}"
          SQLTask:SqlStatementSource="select CASE WHEN JOB_STATUS='Success' then 0 ELSE 1 END AS  JOB_STATUS&#xA;&#xA;from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT' and &#xA;  JOB_STATUS_ID in (Select max(JOB_STATUS_ID) from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT')"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Job_Status" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{0FFBF000-9756-4688-BF0C-C4E74F00B41E}"
      DTS:From="Package\Process_Date"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Load Into DM" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{F5028AF1-6469-4733-A713-65E54A127A7D}"
      DTS:From="Package\Create ETL Job Log"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\JOB_STATUS_ID" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{C6F20353-FA31-4DFB-8C11-2BE33F4649CA}"
      DTS:From="Package\JOB_STATUS_ID"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Validate job status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{157517E8-A855-483B-939E-19EF2A468510}"
      DTS:From="Package\Load Into DM"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Update Job Status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[False]"
      DTS:CreationName=""
      DTS:DTSID="{B86519B8-09F6-401F-8DD3-BB2CFFA409ED}"
      DTS:Expression="@[User::Job_Status]==1"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="False"
      DTS:To="Package\Error Log" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[True]"
      DTS:CreationName=""
      DTS:DTSID="{9B743C07-EB3F-4075-B9EB-CB78F0C63304}"
      DTS:Expression="@[User::Job_Status]==0"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="True"
      DTS:To="Package\Process_Date" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{57D6995E-A1A5-4864-81C2-4BF6D2BC4B4C}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{7C6A6624-68F8-48B0-84B9-1B93D3168884}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{B2E0177D-A2E7-4C82-B172-7E74EDB2A428}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="ETL_ERROR_LOG">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{3CC74AA5-C1C0-4675-A57F-E5AC44004B7C}"
              SQLTask:SqlStatementSource="[dbo].[usp_InsertETLErrorLog] ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::JOB_STATUS_ID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="131"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::ErrorDescription"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="157,42"
          Id="Package\Create ETL Job Log"
          TopLeft="17,13" />
        <NodeLayout
          Size="123,42"
          Id="Package\Error Log"
          TopLeft="699,21" />
        <NodeLayout
          Size="142,42"
          Id="Package\JOB_STATUS_ID"
          TopLeft="230,18" />
        <NodeLayout
          Size="143,42"
          Id="Package\Load Into DM"
          TopLeft="486,219" />
        <NodeLayout
          Size="142,42"
          Id="Package\Process_Date"
          TopLeft="487,131" />
        <NodeLayout
          Size="165,42"
          Id="Package\Update Job Status"
          TopLeft="526,322" />
        <NodeLayout
          Size="166,42"
          Id="Package\Validate job status"
          TopLeft="446,22" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="557.75,173">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46"
              Start="0,0"
              End="0,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="174,36.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="56,0"
              Start="0,0"
              End="48.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="48.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="372,41">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="74,0"
              Start="0,0"
              End="66.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="66.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="557.5,261">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="51,61"
              Start="0,0"
              End="51,53.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.5"
                    Point2="0,30.5"
                    Point3="4,30.5" />
                  <mssgle:LineSegment
                    End="47,30.5" />
                  <mssgle:CubicBezierSegment
                    Point1="47,30.5"
                    Point2="51,30.5"
                    Point3="51,34.5" />
                  <mssgle:LineSegment
                    End="51,53.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[False]"
          TopLeft="612,42.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="87,0"
              Start="0,0"
              End="79.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="79.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="28.01365234375,5,23.4726953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[True]"
          TopLeft="529,64">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="29,67"
              Start="0,0"
              End="29,59.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.5"
                    Point2="0,33.5"
                    Point3="4,33.5" />
                  <mssgle:LineSegment
                    End="25,33.5" />
                  <mssgle:CubicBezierSegment
                    Point1="25,33.5"
                    Point2="29,33.5"
                    Point3="29,37.5" />
                  <mssgle:LineSegment
                    End="29,59.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="3.48755859375,38.5,22.0248828125,9.421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="162,42"
          Id="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          TopLeft="370,98" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[False]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[True]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>