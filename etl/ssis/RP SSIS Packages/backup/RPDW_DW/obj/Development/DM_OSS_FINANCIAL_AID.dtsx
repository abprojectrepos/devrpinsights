<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/30/2019 1:46:31 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NCS-110119GM22"
  DTS:CreatorName="NCS\P0500388"
  DTS:DelayValidation="True"
  DTS:DTSID="{E4C0B314-A925-4F96-BEA7-7AE29CD1855F}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.0900.40"
  DTS:LocaleID="18441"
  DTS:ObjectName="DM_OSS_FINANCIAL_AID"
  DTS:PackageType="5"
  DTS:VersionBuild="140"
  DTS:VersionGUID="{A4835C7C-09F2-4F18-A083-E5D3503100D4}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DW]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{E120A360-F458-43D5-8AD9-42F4CF132D17}"
      DTS:ObjectName="DW">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=172.22.2.38;User ID=svc-dw-prod-etl;Initial Catalog=RPDW_PRD;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ErrorLog]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{0649B45E-653A-42BF-B163-ACE0A66FB3BD}"
      DTS:ObjectName="ErrorLog">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=172.22.2.38;User ID=svc-dw-prod-etl;Initial Catalog=RPDW_PRD;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9FC1A902-0D39-408C-AF31-03F8CA0D08A6}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Duplicate_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D9452DC5-17E2-45EF-BA26-38ECB52BAB3C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Job_name">
      <DTS:VariableValue
        DTS:DataType="8">DM_OSS_FINANCIAL_AID</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{22204D0B-9205-4169-8043-26828B638396}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Job_Status">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{26C6757E-A339-4CD8-92F7-BBF99D697E4B}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="JOB_STATUS_ID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AF3E0181-E198-4ED5-B820-CEA9DB99E005}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Mandatory_constraint_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{42F032DB-028B-42B1-A2E9-B72D481089A6}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Process_date">
      <DTS:VariableValue
        DTS:DataType="7">2/1/2019 2:58:47 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{98A36154-784D-47F7-8DD6-F6B654273D7B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceTable">
      <DTS:VariableValue
        DTS:DataType="8">DW_FINANCIAL_AID_OUTCOME_CONSOLIDATED</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{986AC3FB-4683-4200-AC3B-19AB965E37F8}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;BEGIN TRANSACTION&#xA;BEGIN TRY&#xA;--------------------------------------&#xA;DECLARE @jobstatusid varchar(10)&#xA;select @jobstatusid=&quot;+ (DT_STR, 5,1252) @[User::JOB_STATUS_ID] +&quot;&#xA;&#xA;&#xA;DELETE FROM [dbo].[DM_OSS_FINANCIAL_AID]&#xA;INSERT INTO [dbo].[DM_OSS_FINANCIAL_AID]&#xA;           ([Academic_Year]&#xA;           ,[Semester]&#xA;           ,[Academic_Term]&#xA;           ,[Student_ID]&#xA;           ,[Student_Name]&#xA;&#x9;&#x9;   ,[AY_Student_ID]&#xA;           ,[Qualification_Type]&#xA;           ,[Department]&#xA;           ,[Department_Descr]&#xA;           ,[Programme_Code]&#xA;           ,[Programme]&#xA;           ,[Program_Chair_Name]&#xA;           ,[Mentor_Name]&#xA;           ,[Mentor_Notes_Count]&#xA;           ,[Mentor_Notes_Date_of_Meeting]&#xA;           ,[Counselling_Notes_Count]&#xA;           ,[Counselling_Notes_Date_of_Meeting]&#xA;           ,[Specialisation]&#xA;           ,[Frozen_Enrolment_Term]&#xA;           ,[Admit_Term]&#xA;           ,[Admit_Year]&#xA;           ,[Requirement_Term]&#xA;           ,[Programme_Status]&#xA;           ,[Program_Status_Descr]&#xA;           ,[Effective_Date_for_Programme_Status]&#xA;           ,[Action_Reason]&#xA;           ,[Action_Reason_Descr]&#xA;           ,[No_of_Semesters_Completed]&#xA;           ,[Graduation_Term]&#xA;           ,[Year_of_Study]&#xA;           ,[Residency_Type]&#xA;           ,[Citizenship]&#xA;           ,[Citizenship_Descr]&#xA;           ,[Gender]&#xA;           ,[Race]&#xA;           ,[Race_Mapping_CMIO]&#xA;           ,[Entry_Qualification]&#xA;           ,[Religion]&#xA;           ,[Postal_Code]&#xA;           ,[Term_cGPA]&#xA;           ,[Financial_Aid_Category]&#xA;           ,[Financial_Aid_Category_Remarks]&#xA;           ,[Financial_Aid_Type]&#xA;           ,[Financial_Aid_Type_Remarks]&#xA;           ,[Financial_Aid_Descr]&#xA;           ,[Financial_Aid_Status_Descr]&#xA;           ,[Application_ID]&#xA;           ,[Application_Type]&#xA;           ,[Application_Status]&#xA;           ,[Application_Status_Descr]&#xA;           ,[Award_ID]&#xA;           ,[Award_Descr]&#xA;           ,[Item_Type]&#xA;           ,[Item_Descr]&#xA;           ,[Award_Amount]&#xA;           ,[Application_Date]&#xA;           ,[Disbursement_Date]&#xA;           ,[Award_Remarks]&#xA;           ,[Eligible_for_Govt_Bursary]&#xA;           ,[Eligibility_Check_Required]&#xA;           ,[Eligible_for_Financial_Aid_Category]&#xA;           ,[Receiving_Status_for_Financial_Aid_Category]&#xA;           ,[Residency_Requirement]&#xA;           ,[Race_Requirement]&#xA;           ,[PCI_Max]&#xA;           ,[GHI_Max]&#xA;           ,[Quantum_Amount]&#xA;           ,[Scheme_Remarks]&#xA;           ,[Financial_Aid_Type_Purpose]&#xA;           ,[Financial_Aid_Type_Application_Month]&#xA;           ,[Verified_PCI_for_Award]&#xA;           ,[Verified_GHI_for_Award]&#xA;           ,[Number_of_Household_Members]&#xA;           ,[Property_Type]&#xA;           ,[Tenancy_Type]&#xA;           ,[Special_Circumstances]&#xA;           ,[Remarks_by_Staff_Verifier]&#xA;           ,[PCI_Bursary]&#xA;           ,[GHI_Bursary]&#xA;           ,[PCI_iCARE]&#xA;           ,[GHI_iCARE]&#xA;           ,[PCI_Enrolment]&#xA;           ,[GHI_Enrolment]&#xA;           ,[PCI_Available]&#xA;           ,[GHI_Available]&#xA;           ,[Total_Outstanding_Amount]&#xA;           ,[Worst_Module_Absence_Rate]&#xA;           ,[Worst_Module_Absence_without_LOA_Rate]&#xA;           ,[Number_of_Modules_Taken_with_Attendance]&#xA;           ,[Total_Absence_Count]&#xA;           ,[Total_Absence_with_LOA_Count]&#xA;           ,[Disciplinary_Indicator]&#xA;           ,[Has_GIRO_Account]&#xA;           ,[iCARE_PartTime]&#xA;           ,[iCARE_Data_X1]&#xA;           ,[iCARE_Data_X2]&#xA;           ,[iCARE_Data_X3]&#xA;           ,[iCARE_Data_X4]&#xA;           ,[iCARE_Data_X5]&#xA;           ,[iCARE_Data_X6]&#xA;           ,[iCARE_Data_X7]&#xA;           ,[iCARE_Data_X8]&#xA;           ,[iCARE_Data_X9]&#xA;           ,[iCARE_Data_X10]&#xA;           ,[iCARE_Data_X11]&#xA;           ,[iCARE_Data_X12]&#xA;           ,[iCARE_Data_X13]&#xA;           ,[iCARE_Data_X14]&#xA;           ,[iCARE_Data_X15]&#xA;           ,[iCARE_Data_X16]&#xA;           ,[iCARE_Data_X17]&#xA;           ,[iCARE_Data_X18]&#xA;           ,[iCARE_Data_X19]&#xA;           ,[iCARE_Data_X20]&#xA;           ,[Care_Category]&#xA;           ,[Student_Care_Main_Type]&#xA;           ,[Student_Care_Sub_Type]&#xA;           ,[Student_Care_Admin_Remarks]&#xA;           ,[Student_Care_Date_Updated]&#xA;           ,[Care_Indicator]&#xA;&#x9;&#x9;   ,[CREATED_ON]&#xA;&#x9;&#x9;   ,[MODIFIED_ON])&#xA;SELECT 'AY' + ossfa.Acad_Year AS Academic_Year, 'S' + ossfa.Semester AS Semester, 'AY' + RIGHT(ossfa.Acad_Year,2) + 'S' + Semester AS  Academic_Term,&#xA;&#x9;ossfa.Student_ID, ossfa.Student_Name, &#xA;&#x9;RIGHT(ossfa.Acad_Year,2) + '_' + ossfa.Student_ID AS AY_Student_ID,&#xA;&#x9;ossfa.Qual_Type AS Qualification_Type, ossfa.Dept AS Department, ossfa.Department_Descr,&#xA;&#x9;ossfa.Prog AS Programme_Code, ossfa.Prog + ' - ' + ossfa.Prog_Descr AS Programme, ossfa.Program_Chair_Name,&#xA;&#x9;ossfa.Mentor_Name, ossfa.Mentor_Notes_Count, ossfa.Mentor_Notes_Date_of_Meeting, ossfa.Counselling_Notes_Count, ossfa.Counselling_Notes_Date_of_Meeting,&#xA;    ossfa.Specialisatn AS Specialisation, ossfa.Enrolment_Term AS Frozen_Enrolment_Term, ossfa.Admit_Term, '20' + LEFT(ossfa.Admit_Term,2) AS Admit_Year,&#xA;    ossfa.Reqmt_Term AS Requirement_Term, &#xA;&#x9;ossfa.Student_Status AS Programme_Status, ossfa.Student_Status_Descr AS Program_Status_Descr, ossfa.Student_Status_Effective_Date AS Effective_Date_for_Programme_Status,&#xA;    ossfa.Action_Reason, ossfa.Action_Reason_Descr, ossfa.No_of_Semesters_Completed_EX AS No_of_Semesters_Completed, &#xA;&#x9;ossfa.Graduation_Term, ossfa.Year_of_Study,&#xA;&#x9;ossfa.Residency_Type, ossfa.Citizenship, ossfa.Citizenship_Descr, ossfa.Gender, ossfa.Race, ossfa.Race_Mapping_CMIO,&#xA;    ossfa.Entry_Qualification, ossfa.Religion, ossfa.Postal_Code, ossfa.Term_cGPA,&#xA;&#x9;ossfa.Fin_Aid_Category AS Financial_Aid_Category, ossfa.Fin_Aid_Category_Remarks AS Financial_Aid_Category_Remarks,&#xA;    ISNULL(ossfa.Fin_Aid_Type,'Non-Recipient') AS Financial_Aid_Type, ossfa.Fin_Aid_Type_Remarks Financial_Aid_Type_Remarks,&#xA;    ISNULL(ossfa.Fin_Aid_Desc,'Non-Recipient') AS Financial_Aid_Descr, ISNULL(ossfa.Fin_Aid_Status_Desc,'Non-Recipient') AS Financial_Aid_Status_Descr,&#xA;    ISNULL(ossfa.App_ID,'NA') AS Application_ID, ossfa.App_Type AS Application_Type, &#xA;&#x9;ISNULL(ossfa.App_Status,'NA') AS Application_Status, ISNULL(ossfa.App_Status_Desc,'Not Applied') AS Application_Status_Descr,&#xA;    ossfa.Award_ID, ossfa.Award_Description AS Award_Descr, ossfa.Item_Type, ossfa.Item_Descr, ossfa.Total_Award_Amt AS Award_Amount,&#xA;    ossfa.Application_Date, ossfa.Disbursement_Date, ossfa.Award_Remarks, ossfa.Eligible_for_Govt_Bursary,&#xA;&#x9;ossfa.Eligibility_Check_Required,&#xA;&#x9;CASE &#xA;&#x9;&#x9;WHEN ossfa.Eligibility_Check_Required = 'N' THEN 'NA'&#xA;&#x9;&#x9;WHEN ossfa.Fin_Aid_Category_Eligibility_Matched IS NOT NULL THEN 'Y'&#xA;&#x9;&#x9;ELSE 'N'&#xA;&#x9;END AS Eligible_for_Financial_Aid_Category,&#xA;    NULL AS Receiving_Status_for_Financial_Aid_Category, -- KIV&#xA;    ossfa.Residency_Requirement,&#xA;    ossfa.Race_Requirement,&#xA;    ossfa.PCI_Max, &#xA;    ossfa.GHI_Max, &#xA;    ossfa.Quantum_Amount, &#xA;    ossfa.Scheme_Remarks, &#xA;&#x9;ossfa.Financial_Aid_Type_Purpose, &#xA;    ossfa.Financial_Aid_Type_Application_Month, &#xA;    ossfa.Verified_PCI_Award AS Verified_PCI_for_Award, ossfa.Verified_GHI_Award AS Verified_GHI_for_Award, ossfa.Num_Household_Members AS Number_of_Household_Members,&#xA;    ossfa.Property_Type, ossfa.Tenancy_Type, ossfa.Special_Circumstances, ossfa.Remarks_Staff_Verifier AS Remarks_by_Staff_Verifier,&#xA;    ossfa.PCI_Bursary, ossfa.GHI_Bursary, &#xA;&#x9;ossfa.PCI_iCARE, ossfa.GHI_iCARE, &#xA;&#x9;ossfa.PCI_Enrolment, ossfa.GHI_Enrolment,&#xA;&#x9;ossfa.PCI_Available, &#xA;&#x9;ossfa.GHI_Available,&#xA;    ossfa.Total_Outstanding_Amount, &#xA;&#x9;ossfa.Worst_Module_Absence_Rate, &#xA;&#x9;ossfa.Worst_Module_Absence_without_LOA_Rate, &#xA;&#x9;ossfa.Number_of_Modules_Taken_with_Attendance, ossfa.Total_Absence_Count, ossfa.Total_Absence_with_LOA_Count,&#xA;    ossfa.Disciplinary_Indicator, ossfa.Has_GIRO_Account,&#xA;&#x9;ossfa.iCARE_PartTime,&#xA;    ossfa.iCARE_Data_X1, ossfa.iCARE_Data_X2, ossfa.iCARE_Data_X3, ossfa.iCARE_Data_X4, ossfa.iCARE_Data_X5,&#xA;    ossfa.iCARE_Data_X6, ossfa.iCARE_Data_X7, ossfa.iCARE_Data_X8, ossfa.iCARE_Data_X9, ossfa.iCARE_Data_X10,&#xA;    ossfa.iCARE_Data_X11, ossfa.iCARE_Data_X12, ossfa.iCARE_Data_X13, ossfa.iCARE_Data_X14, ossfa.iCARE_Data_X15,&#xA;    ossfa.iCARE_Data_X16, ossfa.iCARE_Data_X17, ossfa.iCARE_Data_X18, ossfa.iCARE_Data_X19, ossfa.iCARE_Data_X20,&#xA;    ossfa.Care_Category, ossfa.Care_Main_Type AS Student_Care_Main_Type, ossfa.Care_Sub_Type AS Student_Care_Sub_Type,&#xA;    ossfa.Care_Admin_Remarks AS Student_Care_Admin_Remarks, ossfa.Care_Date_Updated AS Student_Care_Date_Updated,&#xA;    ossfa.Care_Indicator,&#xA;&#x9;SYSDATETIME() AS CREATED_ON,&#xA;&#x9;SYSDATETIME() AS MODIFIED_ON&#xA;FROM (&#xA;&#x9;SELECT sfabt.*, &#xA;&#x9;&#x9;fselig.Residency_Reqmt AS Residency_Requirement, &#xA;&#x9;&#x9;fselig.Race_Reqmt AS Race_Requirement,&#xA;&#x9;&#x9;fselig.PCI_Max,&#xA;&#x9;&#x9;fselig.GHI_Max,&#xA;&#x9;&#x9;fselig.Quantum_Amt AS Quantum_Amount, &#xA;&#x9;&#x9;fselig.Scheme_Remarks,&#xA;&#x9;&#x9;fselig.Fin_Aid_Category AS Fin_Aid_Category_Eligibility_Matched,&#xA;&#x9;&#x9;ROW_NUMBER() OVER ( &#xA;&#x9;&#x9;PARTITION BY sfabt.Acad_Year, sfabt.Semester, sfabt.Student_ID, sfabt.Fin_Aid_Category, sfabt.Fin_Aid_Type, &#xA;&#x9;&#x9;&#x9;sfabt.Fin_Aid_Desc, sfabt.Fin_Aid_Status_Desc, sfabt.App_ID&#xA;&#x9;&#x9;ORDER BY fselig.PCI_Max ASC, fselig.GHI_Max ASC) AS rownum&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT sat.Student_ID, sat.Student_Name, sat.Acad_Year, sat.Semester, sat.Qual_Type, sat.Dept, sat.Department_Descr, sat.Prog, sat.Prog_Descr,&#xA;&#x9;&#x9;&#x9;sat.Program_Chair_Name, sat.Mentor_Name, sat.Mentor_Notes_Count, sat.Mentor_Notes_Date_of_Meeting,&#xA;&#x9;&#x9;&#x9;sat.Counselling_Notes_Count, sat.Counselling_Notes_Date_of_Meeting, sat.Specialisatn, &#xA;&#x9;&#x9;&#x9;sat.Enrolment_Term, sat.Admit_Term, sat.Reqmt_Term, sat.Student_Status, sat.Student_Status_Descr, sat.Student_Status_Effective_Date,&#xA;&#x9;&#x9;&#x9;sat.Action_Reason, sat.Action_Reason_Descr, sat.No_of_Semesters_Completed_EX, sat.Graduation_Term,&#xA;&#x9;&#x9;&#x9;sat.Year_of_Study, sat.Residency_Type, sat.Citizenship, sat.Citizenship_Descr, sat.Gender,&#xA;&#x9;&#x9;&#x9;sat.Race, sat.Race_Mapping_CMIO, sat.Entry_Qualification, NULL AS Religion, sat.Postal_Code,&#xA;&#x9;&#x9;&#x9;sat.Term_cGPA,&#xA;&#x9;&#x9;&#x9;dfac.Fin_Aid_Category, catrem.Fin_Aid_Category_Remarks, faoc.Fin_Aid_Type, typerem.Fin_Aid_Type_Remarks,&#xA;&#x9;&#x9;&#x9;faoc.Fin_Aid_Desc, faoc.Fin_Aid_Status_Desc, faoc.App_ID, faoc.App_Type, faoc.App_Status, faoc.App_Status_Desc,&#xA;&#x9;&#x9;&#x9;faoc.Award_ID, faoc.Award_Description, faoc.Item_Type, faoc.Item_Descr, faoc.Total_Award_Amt, faoc.Date_Updated AS Application_Date,&#xA;&#x9;&#x9;&#x9;faoc.Disbursement_Date, faoc.Award_Remarks, &#xA;&#x9;&#x9;&#x9;sat.Computed_Eligible_for_Govt_Bursary AS Eligible_for_Govt_Bursary,&#xA;&#x9;&#x9;&#x9;ISNULL(eligchkreq.Eligibility_Check_Required,'N') AS Eligibility_Check_Required,&#xA;&#x9;&#x9;&#x9;typerem.Fin_Aid_Type_Purpose AS Financial_Aid_Type_Purpose, &#xA;&#x9;&#x9;&#x9;typerem.Fin_Aid_Type_App_Mth AS Financial_Aid_Type_Application_Month,&#xA;&#x9;&#x9;&#x9;faoc.Verified_GHI_Award, faoc.Verified_PCI_Award, &#xA;&#x9;&#x9;&#x9;faoc.Num_Household_Members, faoc.Property_Type, faoc.Tenancy_Type, faoc.Special_Circumstances, faoc.Remarks_Staff_Verifier,&#xA;&#x9;&#x9;&#x9;sat.PCI_Bursary, sat.GHI_Bursary, &#xA;&#x9;&#x9;&#x9;sat.PCI_iCARE, sat.GHI_iCARE,&#xA;&#x9;&#x9;&#x9;sat.PCI_Enrolment, sat.GHI_Enrolment, &#xA;&#x9;&#x9;&#x9;sat.PCI_Available, sat.GHI_Available,&#xA;&#x9;&#x9;&#x9;sat.Total_Outstanding_Amount,&#xA;&#x9;&#x9;&#x9;sat.Worst_Module_Absence_Rate, sat.Worst_Module_Absence_without_LOA_Rate, sat.Number_Of_Modules_Taken_with_Attendance, sat.Total_Absence_Count, sat.Total_Absence_with_LOA_Count,&#xA;&#x9;&#x9;&#x9;sat.Disciplinary_Indicator, sat.Has_GIRO_Account,&#xA;&#x9;&#x9;&#x9;sat.iCARE_PartTime,  &#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X1,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X2,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X3,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X4,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X5,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X6,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X7,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X8,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X9,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X10,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X11,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X12,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X13,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X14,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X15,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X16,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X17,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X18,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X19,&#xA;&#x9;&#x9;&#x9;sat.iCARE_Data_X20,&#xA;&#x9;&#x9;&#x9;sat.Care_Category, sat.Care_Main_Type, sat.Care_Sub_Type, sat.Care_Admin_Remarks, sat.Care_Date_Updated,&#xA;&#x9;&#x9;&#x9;sat.Care_Indicator&#xA;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;SELECT sat.Student_ID, sd.Student_Name, sat.Acad_Year, sat.Semester, sat.Qual_Type, sat.Dept, dep.Descr AS Department_Descr, sat.Prog, sat.Prog_Descr,&#xA;&#x9;&#x9;&#x9;&#x9;pc.Staff_Name AS Program_Chair_Name, mt.Advisor_Name AS Mentor_Name, mtn.Mentor_Notes_Count, mtn.Mentor_Notes_Date_of_Meeting,&#xA;&#x9;&#x9;&#x9;&#x9;csn.Counselling_Notes_Count, csn.Counselling_Notes_Date_of_Meeting, sd.Specialisatn, &#xA;&#x9;&#x9;&#x9;&#x9;sat.Enrolment_Term, sat.Admit_Term, sat.Reqmt_Term, sat.Student_Status, sat.Student_Status_Descr, sat.Student_Status_Effective_Date,&#xA;&#x9;&#x9;&#x9;&#x9;sat.Action_Reason, armc.Long_Name AS Action_Reason_Descr, sat.No_of_Semesters_Completed_EX, grad.Graduation_Term,&#xA;&#x9;&#x9;&#x9;&#x9;sat.Year_of_Study, sat.Residency_Type, sd.Citizenship, citizenmc.Long_Name AS Citizenship_Descr, sd.Gender,&#xA;&#x9;&#x9;&#x9;&#x9;ethnicmc.Long_Name AS Race, sat.Race_Mapping_CMIO, sat.Entry_Qualification, NULL AS Religion, sda.Postal_Code,&#xA;&#x9;&#x9;&#x9;&#x9;sat.Term_cGPA,&#xA;&#x9;&#x9;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN faocbyay.Eligibility_Govt_Bursary IS NOT NULL THEN faocbyay.Eligibility_Govt_Bursary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN sat.Residency_Type IN ('PR','OTH') THEN 'N'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 'Y'&#xA;&#x9;&#x9;&#x9;&#x9;END AS Computed_Eligible_for_Govt_Bursary,&#xA;&#x9;&#x9;&#x9;&#x9;incomebur.PCI AS PCI_Bursary, incomebur.GHI AS GHI_Bursary, &#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.ICAREPCI,icareprevyr.ICAREPCI) AS PCI_iCARE, ISNULL(icare.ICAREGHI,icareprevyr.ICAREGHI) AS GHI_iCARE,&#xA;&#x9;&#x9;&#x9;&#x9;incomeapplcn.PCI AS PCI_Enrolment, incomeapplcn.GHI AS GHI_Enrolment, &#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(ISNULL(incomebur.PCI,ISNULL(icare.ICAREPCI,icareprevyr.ICAREPCI)),incomeapplcn.PCI) AS PCI_Available, &#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(ISNULL(incomebur.GHI,ISNULL(icare.ICAREGHI,icareprevyr.ICAREGHI)),incomeapplcn.GHI) AS GHI_Available,&#xA;&#x9;&#x9;&#x9;&#x9;cab.Total AS Total_Outstanding_Amount,&#xA;&#x9;&#x9;&#x9;&#x9;attd.Worst_Module_Absence_Rate, attd.Worst_Module_Absence_without_LOA_Rate, attd.Number_Of_Modules_Taken_with_Attendance, attd.Total_Absence_Count, attd.Total_Absence_with_LOA_Count,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(dispa.Disciplinary_Indicator,'N') AS Disciplinary_Indicator, ISNULL(giro.Has_GIRO_Account,'N') AS Has_GIRO_Account,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.ICAREPARTTIME,icareprevyr.ICAREPARTTIME) AS iCARE_PartTime,  &#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X1,icareprevyr.X1) AS iCARE_Data_X1,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X2,icareprevyr.X2) AS iCARE_Data_X2,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X3,icareprevyr.X3) AS iCARE_Data_X3,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X4,icareprevyr.X4) AS iCARE_Data_X4,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X5,icareprevyr.X5) AS iCARE_Data_X5,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X6,icareprevyr.X6) AS iCARE_Data_X6,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X7,icareprevyr.X7) AS iCARE_Data_X7,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X8,icareprevyr.X8) AS iCARE_Data_X8,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X9,icareprevyr.X9) AS iCARE_Data_X9,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X10,icareprevyr.X10) AS iCARE_Data_X10,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X11,icareprevyr.X11) AS iCARE_Data_X11,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X12,icareprevyr.X12) AS iCARE_Data_X12,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X13,icareprevyr.X13) AS iCARE_Data_X13,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X14,icareprevyr.X14) AS iCARE_Data_X14,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X15,icareprevyr.X15) AS iCARE_Data_X15,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X16,icareprevyr.X16) AS iCARE_Data_X16,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X17,icareprevyr.X17) AS iCARE_Data_X17,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X18,icareprevyr.X18) AS iCARE_Data_X18,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X19,icareprevyr.X19) AS iCARE_Data_X19,&#xA;&#x9;&#x9;&#x9;&#x9;ISNULL(icare.X20,icareprevyr.X20) AS iCARE_Data_X20,&#xA;&#x9;&#x9;&#x9;&#x9;scare.Care_Category, scare.Care_Main_Type, scare.Care_Sub_Type, Scare.Care_Admin_Remarks, scare.Care_Date_Updated,&#xA;&#x9;&#x9;&#x9;&#x9;scare.Care_Indicator&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Year, Semester, Qual_Type, Dept, Prog, Prog_Descr,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Enrolment_Term, Admit_Term, Reqmt_Term, Student_Status, Student_Status_Descr, Student_Status_Effective_Date,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Action_Reason, No_of_Semesters_Completed_EX, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Year_of_Study, Residency_Type, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Race_Mapping_CMIO, Entry_Qualification, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Term_cGPA&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester, sdbat.Qual_Type, sdbat.Dept, sdbat.Prog, sdbat.Prog_Descr,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sdbat.Enrolment_Term, sdbat.Admit_Term, sdbat.Reqmt_Term, sdbat.Student_Status, sdbat.Student_Status_Descr, sdbat.Student_Status_Effective_Date,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sdbat.Action_Reason, sdbat.No_of_Semesters_Completed_EX, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sdbat.Year_of_Study, sdbat.Residency_Type, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sdbat.Race_Mapping_CMIO, sdbat.Entry_Qualification, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sdbat.Term_cGPA,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY ts.Term_End_Date DESC, sdbat.Admit_Term DESC, sdbat.Student_Status_Effective_Date ASC, sdbat.Prog ASC, sdbat.Qual_Type DESC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Student_ID, Admit_Term, Prog, Acad_Year, Semester&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Vacation_Term = 'No') nonvac&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON sdbat.Student_ID = nonvac.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND sdbat.Admit_Term = nonvac.Admit_Term&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND sdbat.Prog = nonvac.Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND sdbat.Acad_Year = nonvac.Acad_Year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND sdbat.Semester = nonvac.Semester&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN DW_TERM_SETUP ts&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON sdbat.Qual_Type = ts.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND sdbat.Term = ts.Term &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE sdbat.Qual_Type IN ('DPFT','PFP')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND ts.Qual_Type IN ('DPFT','PFP')) sat&#xA;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) sat -- Students with Acad Terms&#xA;&#x9;&#x9;&#x9;LEFT JOIN DW_EXT_DEPARTMENT dep&#xA;&#x9;&#x9;&#x9;ON sat.Dept = dep.Department&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Field_Value, Long_Name&#xA;&#x9;&#x9;&#x9;&#x9;FROM &quot;+ @[$Project::Staging_Initial_Catalog] +&quot;..STG_OASIS_MASTER_CODE&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Field_Name = 'PROG_REASON') armc -- Action_Reason_Master_Code&#xA;&#x9;&#x9;&#x9;ON sat.Action_Reason = armc.Field_Value&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Student_Id, Qual_Type, Programme_Code, Graduation_Term&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_GRADUATION&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) grad -- Graduation_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = grad.Student_Id&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Qual_Type = grad.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Prog = grad.Programme_Code&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT pc.Prog_Code, pc.Staff_Name&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT p.Prog_Code, s.Staff_Name,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER ( &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY p.Prog_Code&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY p.Effective_Date DESC) AS rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_PET_PROGRAMME p&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Staff_ID, Staff_Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STAFF_DETAILS) s&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON p.Prog_Chair_ID = s.Staff_ID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) pc&#xA;&#x9;&#x9;&#x9;&#x9;WHERE pc.rownum = 1) pc -- Program_Chair_Base&#xA;&#x9;&#x9;&#x9;ON sat.Prog = pc.Prog_Code&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Qual_Type, Advisor_Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Qual_Type, Advisor_Name,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_ID, Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY Advisor_Num ASC) AS rownnum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MENTOR) mt&#xA;&#x9;&#x9;&#x9;&#x9;WHERE mt.rownnum = 1) mt -- Mentor_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = mt.Student_ID &#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Qual_Type = mt.Qual_Type&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT mtn.Student_ID, mtn.Qual_Type, ts.Acad_Year, ts.Semester, COUNT(1) AS Mentor_Notes_Count, MAX(Meeting_Date) AS Mentor_Notes_Date_of_Meeting&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MENTOR_NOTES mtn&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN DW_TERM_SETUP ts&#xA;&#x9;&#x9;&#x9;&#x9;ON mtn.Term = ts.Term&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY mtn.Student_ID, mtn.Qual_Type, ts.Acad_Year, ts.Semester) mtn -- Mentor_Notes_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = mtn.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Qual_Type = mtn.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Acad_Year = mtn.Acad_Year&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Semester = mtn.Semester&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT csn.Student_ID, csn.Qual_Type, ts.Acad_Year, ts.Semester, COUNT(1) AS Counselling_Notes_Count, MAX(Meeting_Date) AS Counselling_Notes_Date_of_Meeting&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_COUNSELLING_NOTES csn&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN DW_TERM_SETUP ts&#xA;&#x9;&#x9;&#x9;&#x9;ON csn.Term = ts.Term&#xA;&#x9;&#x9;&#x9;&#x9;WHERE csn.Counsellor_Status = 'Submitted'&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY csn.Student_ID, csn.Qual_Type, ts.Acad_Year, ts.Semester) csn -- Counselling_Notes_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = csn.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Qual_Type = csn.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Acad_Year = csn.Acad_Year&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Semester = csn.Semester&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Student_ID, Student_Name, Admit_Term, Specialisatn, Citizenship, Gender, Ethnic_Group&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS) sd -- Student_Details_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = sd.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Admit_Term = sd.Admit_Term&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Field_Value, Long_Name&#xA;&#x9;&#x9;&#x9;&#x9;FROM &quot;+ @[$Project::Staging_Initial_Catalog] +&quot;..STG_OASIS_MASTER_CODE&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Field_Name = 'CITIZENSHIP') citizenmc&#xA;&#x9;&#x9;&#x9;ON sd.Citizenship = citizenmc.Field_Value&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Field_Value, Long_Name&#xA;&#x9;&#x9;&#x9;&#x9;FROM &quot;+ @[$Project::Staging_Initial_Catalog] +&quot;..STG_OASIS_MASTER_CODE&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Field_Name = 'ETHNIC_GROUP')  ethnicmc&#xA;&#x9;&#x9;&#x9;ON sd.Ethnic_Group = ethnicmc.Field_Value&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Admit_Term, Postal_Code&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Admit_Term, Postal_Code,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER ( &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_ID, Admit_Term&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY Addrs_Effective_Date DESC) AS rownum&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS) sd&#xA;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) sda -- Student_Details_Address_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = sda.Student_ID&#xA;&#x9;&#x9;&#x9;AND sat.Admit_Term = sda.Admit_Term&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Yr, PCI, PCI * Family_Members AS GHI&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Yr, PCI, Family_Members,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER ( &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_ID, Acad_Yr&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY App_Date DESC) AS rownum&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_SCHOLARSHIP_BURSARY_STATUS&#xA;&#x9;&#x9;&#x9;&#x9;WHERE App_Type = 'CDC'&#xA;&#x9;&#x9;&#x9;&#x9;AND Family_Members &gt; 0&#xA;&#x9;&#x9;&#x9;&#x9;AND App_Status NOT IN ('REJ','RRP','AUS','WTD','WTH','WHD','WDN')) incomebur&#xA;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) incomebur -- Income_Data_Bursary_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = incomebur.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Acad_Year = incomebur.Acad_Yr&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Year, CAST(ICAREPCI AS decimal(8,2)) AS ICAREPCI, ICAREGHI, ICAREPARTTIME, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, RIGHT(Survey_ID,4) AS Acad_Year, Qns_ID, Response&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_ICARE_SURVEY_RESPONSE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Survey_ID LIKE 'ICARE%') icare -- ICARE_Survey_Response_Base&#xA;&#x9;&#x9;&#x9;&#x9;PIVOT&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MAX(Response)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FOR Qns_ID IN (ICAREPCI, ICAREGHI, ICAREPARTTIME, X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20)&#xA;&#x9;&#x9;&#x9;&#x9;) icarepiv) icare&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = icare.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Acad_Year = icare.Acad_Year&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Year, CAST(ICAREPCI AS decimal(8,2)) AS ICAREPCI, ICAREGHI, ICAREPARTTIME, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, RIGHT(Survey_ID,4) AS Acad_Year, Qns_ID, Response&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_ICARE_SURVEY_RESPONSE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Survey_ID LIKE 'ICARE%') icare -- ICARE_Survey_Response_Base&#xA;&#x9;&#x9;&#x9;&#x9;PIVOT&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MAX(Response)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FOR Qns_ID IN (ICAREPCI, ICAREGHI, ICAREPARTTIME, X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20)&#xA;&#x9;&#x9;&#x9;&#x9;) icarepiv) icareprevyr -- ICARE_Survey_Response_Previous_Year_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = icareprevyr.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Acad_Year - 1 = icareprevyr.Acad_Year&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Applicant_ID, Total_Mth_Family_Household_Income AS GHI, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CAST(Total_Mth_Family_Household_Income/REPLACE(Household_Size,'.','') AS decimal(8,2)) AS PCI&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_APPLICANT_HOUSEHOLD_DETAILS&#xA;&#x9;&#x9;&#x9;&#x9;WHERE REPLACE(Household_Size,'.','') &gt; 0) incomeapplcn -- Income Data_Applicant_Household_Details_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = incomeapplcn.Applicant_ID&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Student_ID, Total&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_CUSTOMER_ACCOUNT_BALANCE&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Business_Unit = 'RPPET') cab -- Customer_Account_Balance_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = cab.Student_ID&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Year, Semester, Qual_Type, Prog, Reqmt_Term, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CAST(MAX(Module_Absence_Rate) AS decimal(6,2)) AS Worst_Module_Absence_Rate, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CAST(MAX(Module_Absence_without_LOA_Rate) AS decimal(6,2)) AS Worst_Module_Absence_without_LOA_Rate,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;COUNT(DISTINCT Module_Code) AS Number_Of_Modules_Taken_with_Attendance,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(Absence_Count) AS Total_Absence_Count,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(Absence_With_LOA_Count) AS Total_Absence_with_LOA_Count&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Year, Semester, Qual_Type, Prog, Reqmt_Term, Module_Code,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(Absence)*100.00 /COUNT(1) AS Module_Absence_Rate, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(Absence_Without_LOA)*100.00/COUNT(1) AS Module_Absence_Without_LOA_Rate,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(Absence) AS Absence_Count,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(Absence_With_LOA) AS Absence_With_LOA_Count&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT attd.Student_ID, attd.[Academic Year] AS Acad_Year, attd.Semester, cs.Qual_Type, cs.Prog, cs.Reqmt_Term, attd.Module_Code, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN attd.[Attendance Status Desc] IN ('Absent','Late and Partial','Partial') THEN 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END AS Absence,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN attd.[Attendance Status Desc] IN ('Absent','Late and Partial','Partial') AND attd.LOA_Status = 0 THEN 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END AS Absence_Without_LOA,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN attd.[Attendance Status Desc] IN ('Absent','Late and Partial','Partial') AND attd.LOA_Status &gt; 0 THEN 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END AS Absence_With_LOA&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Prog, Reqmt_Term, Qual_Type, Module_Code&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_COURSE_STRUCTURE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) cs&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN V_DW_STUDENT_ATTENDANCE attd&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ON cs.Prog = attd.[Programme Code]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND cs.Reqmt_Term = attd.[Requirement Term]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND cs.Qual_Type = attd.Qualification_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND cs.Module_Code = attd.Module_Code&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE ISNULL(attd.[Attendance Status Desc],'Not Recorded') &lt;&gt; 'Not Recorded') attd&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY Student_ID, Acad_Year, Semester, Qual_Type, Prog, Reqmt_Term, Module_Code) attd&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY Student_ID, Acad_Year, Semester, Qual_Type, Prog, Reqmt_Term) attd -- Module_Attendance_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = attd.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Acad_Year = attd.Acad_Year&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Semester = attd.Semester&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Qual_Type = attd.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Prog = attd.Prog&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Reqmt_Term = attd.Reqmt_Term&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Student_ID, YEAR(Offence_Date) AS Acad_Year, 'Y' AS Disciplinary_Indicator&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_DISCIPLINARY_ACTION sda&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN DW_OFFENCE_CODE_SETUP ocs&#xA;&#x9;&#x9;&#x9;&#x9;ON sda.Offence_Code = ocs.Offence_Code&#xA;&#x9;&#x9;&#x9;&#x9;WHERE ocs.Offence_Lvl IN ('2','3')) dispa -- Disciplinary_Action_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = dispa.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Acad_Year = dispa.Acad_Year&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Student_ID, Qual_Type, Prog, 'Y' AS Has_GIRO_Account&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_GIRO_FUND_STATUS&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Acct_Status = 'Approved'&#xA;&#x9;&#x9;&#x9;&#x9;AND Business_Unit = 'RPPET'&#xA;&#x9;&#x9;&#x9;&#x9;AND Qual_Type IN ('DPFT','PFP')) giro -- Giro_Account_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = giro.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Qual_Type = giro.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Prog = giro.Prog&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT RIGHT(Acad_Yr, 4) AS Acad_Year, Student_ID, STRING_AGG(Care_Category,'|') AS Care_Category, STRING_AGG(Care_Main_Type,'|') AS Care_Main_Type, STRING_AGG(Care_Sub_Type,'|') AS Care_Sub_Type, STRING_AGG(Care_Admin_Remarks,'|') AS Care_Admin_Remarks,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MAX(Care_Date_Updated) AS Care_Date_Updated, STRING_AGG(Care_Indicator,'') AS Care_Indicator&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_CARE&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY RIGHT(Acad_Yr, 4), Student_ID) scare -- Student_Care_Base&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = scare.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Acad_Year = scare.Acad_Year&#xA;&#x9;&#x9;&#x9;--LEFT JOIN (&#xA;&#x9;&#x9;&#x9;--&#x9;SELECT DISTINCT Student_ID, Acad_Yr&#xA;&#x9;&#x9;&#x9;--&#x9;FROM DW_SCHOLARSHIP_BURSARY_STATUS&#xA;&#x9;&#x9;&#x9;--&#x9;WHERE App_Type = 'SCH'&#xA;&#x9;&#x9;&#x9;--&#x9;AND App_Status IN ('DIS','AWD','APR')) schship -- Scholarship_List_Base&#xA;&#x9;&#x9;&#x9;--ON sat.Student_ID = schship.Student_ID&#xA;&#x9;&#x9;&#x9;--&#x9;AND sat.Acad_Year = schship.Acad_Yr&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Student_ID, RIGHT(Acad_Yr, 4) AS Acad_Year, Eligibility_Govt_Bursary&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_FINANCIAL_AID_OUTCOME_CONSOLIDATED) faocbyay&#x9;&#xA;&#x9;&#x9;&#x9;ON sat.Student_ID = faocbyay.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND sat.Acad_Year = faocbyay.Acad_Year) sat -- Student_By_Term_With_Full_Details_Base&#xA;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT Fin_Aid_Category&#xA;&#x9;&#x9;&#x9;FROM DW_FINANCIAL_SCHEME_ID&#xA;&#x9;&#x9;&#x9;UNION&#xA;&#x9;&#x9;&#x9;SELECT 'Others' AS Fin_Aid_Category) dfac -- Distinct_Fin_Aid_Category_Base &#xA;&#x9;&#x9;ON 1 = 1&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT RIGHT(Acad_Yr,4) AS Acad_Year, Fin_Aid_Category, Fin_Aid_Category_Remarks&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Acad_Yr, Fin_Aid_Category, Fin_Aid_Category_Remarks,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Acad_Yr, Fin_Aid_Category&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY PCI_Max ASC) AS rownum&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_FINANCIAL_SCHEME_ELIGIBILITY) catrem&#xA;&#x9;&#x9;&#x9;WHERE rownum = 1) catrem -- Financial_Aid_Category_Remarks_Base&#xA;&#x9;&#x9;ON sat.Acad_Year = catrem.Acad_Year&#xA;&#x9;&#x9;&#x9;AND dfac.Fin_Aid_Category = catrem.Fin_Aid_Category&#xA;&#x9;&#x9;LEFT JOIN (&#x9;&#xA;&#x9;&#x9;&#x9;SELECT RIGHT(Acad_Yr,4) AS Acad_Year, Fin_Aid_Category, 'Y' AS Eligibility_Check_Required&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Acad_Yr, Fin_Aid_Category&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_FINANCIAL_SCHEME_ELIGIBILITY&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Eligibility_Check_Required = 'Y'&#xA;&#x9;&#x9;&#x9;&#x9;EXCEPT&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Acad_Yr, Fin_Aid_Category&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_FINANCIAL_SCHEME_ELIGIBILITY&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Eligibility_Check_Required = 'N')elig ) eligchkreq -- Eligibility_Check_Required_Base&#xA;&#x9;&#x9;ON sat.Acad_Year = eligchkreq.Acad_Year&#xA;&#x9;&#x9;&#x9;AND dfac.Fin_Aid_Category = eligchkreq.Fin_Aid_Category&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT ocl.Student_ID, RIGHT(ocl.Acad_Yr,4) AS Acad_Year, RIGHT(ocl.Acad_Term,1) AS Semester, ocl.Fin_Aid_Category, ocl.Fin_Aid_Type, ocl.Fin_Aid_Desc, ocl.Fin_Aid_Status_Desc, ocl.App_ID,&#xA;&#x9;&#x9;&#x9;&#x9;ocl.App_Type, ocl.App_Status, ocl.App_Status_Desc, ocl.Award_ID, ocl.Award_Description,&#xA;&#x9;&#x9;&#x9;&#x9;ai.Item_Type, its.[Desc] AS Item_Descr,&#xA;&#x9;&#x9;&#x9;&#x9;ocg.Total_Award_Amt, ocl.Date_Updated, ocl.Disbursement_Date, awdcatmc.Long_Name AS Award_Remarks,&#xA;&#x9;&#x9;&#x9;&#x9;--ocl.Eligibility_Govt_Bursary, &#xA;&#x9;&#x9;&#x9;&#x9;ocl.Verified_GHI_Award, ocl.Verified_PCI_Award, ocl.Num_Household_Members, ocl.Property_Type, ocl.Tenancy_Type, ocl.Special_Circumstances, ocl.Remarks_Staff_Verifier&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;App_Type, App_Status, App_Status_Desc, Award_ID, Award_Description, Date_Updated, Disbursement_Date, Eligibility_Govt_Bursary,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Verified_GHI_Award, Verified_PCI_Award, Num_Household_Members, Property_Type, Tenancy_Type, Special_Circumstances, Remarks_Staff_Verifier&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;App_Type, App_Status, App_Status_Desc, Award_ID, Award_Description, Date_Updated, Disbursement_Date, Eligibility_Govt_Bursary,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Verified_GHI_Award, Verified_PCI_Award, Num_Household_Members, Property_Type, Tenancy_Type, Special_Circumstances, Remarks_Staff_Verifier,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY Date_Updated DESC) AS rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_FINANCIAL_AID_OUTCOME_CONSOLIDATED) oc&#xA;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) ocl&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID, SUM(Award_Amt) AS Total_Award_Amt&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_FINANCIAL_AID_OUTCOME_CONSOLIDATED&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Award_Amt IS NOT NULL&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID) ocg&#xA;&#x9;&#x9;&#x9;ON ocl.Student_ID = ocg.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND ocl.Acad_Yr = ocg.Acad_Yr&#xA;&#x9;&#x9;&#x9;&#x9;AND ISNULL(ocl.Acad_Term,'') = ISNULL(ocg.Acad_Term,'')&#xA;&#x9;&#x9;&#x9;&#x9;AND ocl.Fin_Aid_Category = ocg.Fin_Aid_Category&#xA;&#x9;&#x9;&#x9;&#x9;AND ocl.Fin_Aid_Type = ocg.Fin_Aid_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND ocl.Fin_Aid_Desc = ocg.Fin_Aid_Desc&#xA;&#x9;&#x9;&#x9;&#x9;AND ocl.Fin_Aid_Status_Desc = ocg.Fin_Aid_Status_Desc&#xA;&#x9;&#x9;&#x9;&#x9;AND ocl.App_ID = ocg.App_ID&#xA;&#x9;&#x9;&#x9;LEFT JOIN DW_AWARD_INFO ai&#xA;&#x9;&#x9;&#x9;ON ocl.Award_ID = ai.Award_ID&#xA;&#x9;&#x9;&#x9;LEFT JOIN DW_ITEM_TYPE_SETUP its&#xA;&#x9;&#x9;&#x9;ON ai.Item_Type = its.Item_Type&#xA;&#x9;&#x9;&#x9;LEFT JOIN &quot;+ @[$Project::Staging_Initial_Catalog] +&quot;..STG_OASIS_MASTER_CODE awdcatmc&#xA;&#x9;&#x9;&#x9;ON awdcatmc.Field_Name = 'A_AWD_CATG'&#xA;&#x9;&#x9;&#x9;&#x9;AND awdcatmc.Effective_Status = 'A'&#xA;&#x9;&#x9;&#x9;&#x9;AND ai.Award_Category = awdcatmc.Field_Value) faoc -- Financial_Aid_Outcome_Consolidated_Base &#xA;&#x9;&#x9;ON sat.Student_ID = faoc.Student_ID&#xA;&#x9;&#x9;&#x9;AND sat.Acad_Year = faoc.Acad_Year&#xA;&#x9;&#x9;&#x9;AND (sat.Semester = faoc.Semester OR faoc.Semester IS NULL)&#xA;&#x9;&#x9;&#x9;AND dfac.Fin_Aid_Category = faoc.Fin_Aid_Category&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT RIGHT(Acad_Yr,4) AS Acad_Year, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Type_Remarks, Fin_Aid_Type_Purpose, Fin_Aid_Type_App_Mth&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Acad_Yr, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Type_Remarks, Fin_Aid_Type_Purpose, Fin_Aid_Type_App_Mth,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Acad_Yr, Fin_Aid_Category, Fin_Aid_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY PCI_Max ASC) AS rownum&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_FINANCIAL_SCHEME_ELIGIBILITY) typerem&#xA;&#x9;&#x9;&#x9;WHERE rownum = 1) typerem -- Financial_Aid_Type_Remarks_Base&#xA;&#x9;&#x9;ON sat.Acad_Year = typerem.Acad_Year&#xA;&#x9;&#x9;&#x9;AND dfac.Fin_Aid_Category = typerem.Fin_Aid_Category&#xA;&#x9;&#x9;&#x9;AND faoc.Fin_Aid_Type = typerem.Fin_Aid_Type) sfabt -- Student_Financial_Aid_By_Term_Base&#xA;&#x9;LEFT JOIN DW_FINANCIAL_SCHEME_ELIGIBILITY fselig -- Financial_Scheme_Eligibility_Base&#xA;&#x9;ON (sfabt.Eligibility_Check_Required = 'Y' OR sfabt.Fin_Aid_Type IS NOT NULL)&#xA;&#x9;&#x9;AND sfabt.Acad_Year = RIGHT(fselig.Acad_Yr,4)&#xA;&#x9;&#x9;AND sfabt.Fin_Aid_Category = fselig.Fin_Aid_Category&#xA;&#x9;&#x9;AND (sfabt.Fin_Aid_Type IS NULL OR sfabt.Fin_Aid_Type = fselig.Fin_Aid_Type)&#xA;&#x9;&#x9;AND (sfabt.Fin_Aid_Desc IS NULL OR sfabt.Fin_Aid_Desc = fselig.Fin_Aid_Desc)&#xA;&#x9;&#x9;AND (fselig.Eligibility_Check_Required = 'N'&#xA;&#x9;&#x9;OR (fselig.Eligibility_Check_Required = 'Y'&#xA;&#x9;&#x9;AND (fselig.Eligible_Check_Govt_Bursary = 'N' OR sfabt.Eligible_for_Govt_Bursary = 'Y')&#xA;&#x9;&#x9;AND (ISNULL(fselig.Residency_Reqmt,'') = '' OR CHARINDEX(sfabt.Residency_Type,fselig.Residency_Reqmt) &gt; 0)&#xA;&#x9;&#x9;AND (ISNULL(fselig.Race_Reqmt,'') = '' OR CHARINDEX(sfabt.Race,fselig.Race_Reqmt) &gt; 0)&#xA;&#x9;&#x9;AND ((fselig.PCI_Max IS NULL OR CAST(sfabt.PCI_Available AS int) &lt;= fselig.PCI_Max)&#xA;&#x9;&#x9;OR (fselig.GHI_Max IS NULL OR CAST(sfabt.GHI_Available AS int) &lt;= fselig.GHI_Max))))) ossfa -- OSS_Financial_Aid_Base&#xA;WHERE rownum = 1;&#xA;&#xA;&#xA;------- Pending: &#xA;------- 1. Resolve Warning: Null value is eliminated by an aggregate or other SET operation.&#xA;------- 2. Effective Date for Programme Status &#xA;&#xA;&#xA;UPDATE ossfa&#xA;SET ossfa.Receiving_Status_for_Financial_Aid_Category = fac.Receiving_Status_for_Financial_Aid_Category&#xA;FROM DM_OSS_FINANCIAL_AID ossfa&#xA;INNER JOIN (&#xA;&#x9;SELECT Academic_Year, Student_ID, Financial_Aid_Category,&#xA;&#x9;&#x9;CASE Best_Receiving_Status&#xA;&#x9;&#x9;&#x9;WHEN 2 THEN 'Non-Recipient'&#xA;&#x9;&#x9;&#x9;WHEN 1 THEN 'Recipient'&#xA;&#x9;&#x9;&#x9;ELSE 'Not Eligible'&#xA;&#x9;&#x9;END AS Receiving_Status_for_Financial_Aid_Category&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT Academic_Year, Student_ID, Financial_Aid_Category, MIN(Receiving_Status) AS Best_Receiving_Status&#xA;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;SELECT Academic_Year, Student_ID, Financial_Aid_Category,&#xA;&#x9;&#x9;&#x9;&#x9;CASE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN Financial_Aid_Status_Descr NOT IN ('Non-Recipient','Not Applicable','Rejected','Not Applied','Pending') THEN 1 -- Recipient&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN Eligible_for_Financial_Aid_Category IN ('NA','Y') THEN 2 -- Non-Recipient&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 3 -- Not Eligible&#xA;&#x9;&#x9;&#x9;&#x9;END AS Receiving_Status&#xA;&#x9;&#x9;&#x9;FROM DM_OSS_FINANCIAL_AID) fac&#xA;&#x9;&#x9;GROUP BY Academic_Year, Student_ID, Financial_Aid_Category) fac) fac&#xA;ON ossfa.Academic_Year = fac.Academic_Year&#xA;&#x9;AND ossfa.Student_ID = fac.Student_ID&#xA;&#x9;AND ossfa.Financial_Aid_Category = fac.Financial_Aid_Category;&#xA;&#xA;&#xA;&#xA;&#x9;COMMIT TRANSACTION&#xA;END TRY&#xA;&#xA;BEGIN CATCH&#xA;ROLLBACK TRANSACTION&#xA;&#xA;  INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)&#xA;  SELECT   &#xA;         CAST(@jobstatusid as int) as JOB_STATUS_ID&#xA;        ,ERROR_MESSAGE() AS ErrorMessage&#xA;&#x9;&#x9;,getdate()  as created_on&#xA;END CATCH  &#xA;GO&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SQL_DM_Load">
      <DTS:VariableValue
        DTS:DataType="8">BEGIN TRANSACTION
BEGIN TRY
--------------------------------------
DECLARE @jobstatusid varchar(10)
select @jobstatusid=0


DELETE FROM [dbo].[DM_OSS_FINANCIAL_AID]
INSERT INTO [dbo].[DM_OSS_FINANCIAL_AID]
           ([Academic_Year]
           ,[Semester]
           ,[Academic_Term]
           ,[Student_ID]
           ,[Student_Name]
		   ,[AY_Student_ID]
           ,[Qualification_Type]
           ,[Department]
           ,[Department_Descr]
           ,[Programme_Code]
           ,[Programme]
           ,[Program_Chair_Name]
           ,[Mentor_Name]
           ,[Mentor_Notes_Count]
           ,[Mentor_Notes_Date_of_Meeting]
           ,[Counselling_Notes_Count]
           ,[Counselling_Notes_Date_of_Meeting]
           ,[Specialisation]
           ,[Frozen_Enrolment_Term]
           ,[Admit_Term]
           ,[Admit_Year]
           ,[Requirement_Term]
           ,[Programme_Status]
           ,[Program_Status_Descr]
           ,[Effective_Date_for_Programme_Status]
           ,[Action_Reason]
           ,[Action_Reason_Descr]
           ,[No_of_Semesters_Completed]
           ,[Graduation_Term]
           ,[Year_of_Study]
           ,[Residency_Type]
           ,[Citizenship]
           ,[Citizenship_Descr]
           ,[Gender]
           ,[Race]
           ,[Race_Mapping_CMIO]
           ,[Entry_Qualification]
           ,[Religion]
           ,[Postal_Code]
           ,[Term_cGPA]
           ,[Financial_Aid_Category]
           ,[Financial_Aid_Category_Remarks]
           ,[Financial_Aid_Type]
           ,[Financial_Aid_Type_Remarks]
           ,[Financial_Aid_Descr]
           ,[Financial_Aid_Status_Descr]
           ,[Application_ID]
           ,[Application_Type]
           ,[Application_Status]
           ,[Application_Status_Descr]
           ,[Award_ID]
           ,[Award_Descr]
           ,[Item_Type]
           ,[Item_Descr]
           ,[Award_Amount]
           ,[Application_Date]
           ,[Disbursement_Date]
           ,[Award_Remarks]
           ,[Eligible_for_Govt_Bursary]
           ,[Eligibility_Check_Required]
           ,[Eligible_for_Financial_Aid_Category]
           ,[Receiving_Status_for_Financial_Aid_Category]
           ,[Residency_Requirement]
           ,[Race_Requirement]
           ,[PCI_Max]
           ,[GHI_Max]
           ,[Quantum_Amount]
           ,[Scheme_Remarks]
           ,[Financial_Aid_Type_Purpose]
           ,[Financial_Aid_Type_Application_Month]
           ,[Verified_PCI_for_Award]
           ,[Verified_GHI_for_Award]
           ,[Number_of_Household_Members]
           ,[Property_Type]
           ,[Tenancy_Type]
           ,[Special_Circumstances]
           ,[Remarks_by_Staff_Verifier]
           ,[PCI_Bursary]
           ,[GHI_Bursary]
           ,[PCI_iCARE]
           ,[GHI_iCARE]
           ,[PCI_Enrolment]
           ,[GHI_Enrolment]
           ,[PCI_Available]
           ,[GHI_Available]
           ,[Total_Outstanding_Amount]
           ,[Worst_Module_Absence_Rate]
           ,[Worst_Module_Absence_without_LOA_Rate]
           ,[Number_of_Modules_Taken_with_Attendance]
           ,[Total_Absence_Count]
           ,[Total_Absence_with_LOA_Count]
           ,[Disciplinary_Indicator]
           ,[Has_GIRO_Account]
           ,[iCARE_PartTime]
           ,[iCARE_Data_X1]
           ,[iCARE_Data_X2]
           ,[iCARE_Data_X3]
           ,[iCARE_Data_X4]
           ,[iCARE_Data_X5]
           ,[iCARE_Data_X6]
           ,[iCARE_Data_X7]
           ,[iCARE_Data_X8]
           ,[iCARE_Data_X9]
           ,[iCARE_Data_X10]
           ,[iCARE_Data_X11]
           ,[iCARE_Data_X12]
           ,[iCARE_Data_X13]
           ,[iCARE_Data_X14]
           ,[iCARE_Data_X15]
           ,[iCARE_Data_X16]
           ,[iCARE_Data_X17]
           ,[iCARE_Data_X18]
           ,[iCARE_Data_X19]
           ,[iCARE_Data_X20]
           ,[Care_Category]
           ,[Student_Care_Main_Type]
           ,[Student_Care_Sub_Type]
           ,[Student_Care_Admin_Remarks]
           ,[Student_Care_Date_Updated]
           ,[Care_Indicator]
		   ,[CREATED_ON]
		   ,[MODIFIED_ON])
SELECT 'AY' + ossfa.Acad_Year AS Academic_Year, 'S' + ossfa.Semester AS Semester, 'AY' + RIGHT(ossfa.Acad_Year,2) + 'S' + Semester AS  Academic_Term,
	ossfa.Student_ID, ossfa.Student_Name, 
	RIGHT(ossfa.Acad_Year,2) + '_' + ossfa.Student_ID AS AY_Student_ID,
	ossfa.Qual_Type AS Qualification_Type, ossfa.Dept AS Department, ossfa.Department_Descr,
	ossfa.Prog AS Programme_Code, ossfa.Prog + ' - ' + ossfa.Prog_Descr AS Programme, ossfa.Program_Chair_Name,
	ossfa.Mentor_Name, ossfa.Mentor_Notes_Count, ossfa.Mentor_Notes_Date_of_Meeting, ossfa.Counselling_Notes_Count, ossfa.Counselling_Notes_Date_of_Meeting,
    ossfa.Specialisatn AS Specialisation, ossfa.Enrolment_Term AS Frozen_Enrolment_Term, ossfa.Admit_Term, '20' + LEFT(ossfa.Admit_Term,2) AS Admit_Year,
    ossfa.Reqmt_Term AS Requirement_Term, 
	ossfa.Student_Status AS Programme_Status, ossfa.Student_Status_Descr AS Program_Status_Descr, ossfa.Student_Status_Effective_Date AS Effective_Date_for_Programme_Status,
    ossfa.Action_Reason, ossfa.Action_Reason_Descr, ossfa.No_of_Semesters_Completed_EX AS No_of_Semesters_Completed, 
	ossfa.Graduation_Term, ossfa.Year_of_Study,
	ossfa.Residency_Type, ossfa.Citizenship, ossfa.Citizenship_Descr, ossfa.Gender, ossfa.Race, ossfa.Race_Mapping_CMIO,
    ossfa.Entry_Qualification, ossfa.Religion, ossfa.Postal_Code, ossfa.Term_cGPA,
	ossfa.Fin_Aid_Category AS Financial_Aid_Category, ossfa.Fin_Aid_Category_Remarks AS Financial_Aid_Category_Remarks,
    ISNULL(ossfa.Fin_Aid_Type,'Non-Recipient') AS Financial_Aid_Type, ossfa.Fin_Aid_Type_Remarks Financial_Aid_Type_Remarks,
    ISNULL(ossfa.Fin_Aid_Desc,'Non-Recipient') AS Financial_Aid_Descr, ISNULL(ossfa.Fin_Aid_Status_Desc,'Non-Recipient') AS Financial_Aid_Status_Descr,
    ISNULL(ossfa.App_ID,'NA') AS Application_ID, ossfa.App_Type AS Application_Type, 
	ISNULL(ossfa.App_Status,'NA') AS Application_Status, ISNULL(ossfa.App_Status_Desc,'Not Applied') AS Application_Status_Descr,
    ossfa.Award_ID, ossfa.Award_Description AS Award_Descr, ossfa.Item_Type, ossfa.Item_Descr, ossfa.Total_Award_Amt AS Award_Amount,
    ossfa.Application_Date, ossfa.Disbursement_Date, ossfa.Award_Remarks, ossfa.Eligible_for_Govt_Bursary,
	ossfa.Eligibility_Check_Required,
	CASE 
		WHEN ossfa.Eligibility_Check_Required = 'N' THEN 'NA'
		WHEN ossfa.Fin_Aid_Category_Eligibility_Matched IS NOT NULL THEN 'Y'
		ELSE 'N'
	END AS Eligible_for_Financial_Aid_Category,
    NULL AS Receiving_Status_for_Financial_Aid_Category, -- KIV
    ossfa.Residency_Requirement,
    ossfa.Race_Requirement,
    ossfa.PCI_Max, 
    ossfa.GHI_Max, 
    ossfa.Quantum_Amount, 
    ossfa.Scheme_Remarks, 
	ossfa.Financial_Aid_Type_Purpose, 
    ossfa.Financial_Aid_Type_Application_Month, 
    ossfa.Verified_PCI_Award AS Verified_PCI_for_Award, ossfa.Verified_GHI_Award AS Verified_GHI_for_Award, ossfa.Num_Household_Members AS Number_of_Household_Members,
    ossfa.Property_Type, ossfa.Tenancy_Type, ossfa.Special_Circumstances, ossfa.Remarks_Staff_Verifier AS Remarks_by_Staff_Verifier,
    ossfa.PCI_Bursary, ossfa.GHI_Bursary, 
	ossfa.PCI_iCARE, ossfa.GHI_iCARE, 
	ossfa.PCI_Enrolment, ossfa.GHI_Enrolment,
	ossfa.PCI_Available, 
	ossfa.GHI_Available,
    ossfa.Total_Outstanding_Amount, 
	ossfa.Worst_Module_Absence_Rate, 
	ossfa.Worst_Module_Absence_without_LOA_Rate, 
	ossfa.Number_of_Modules_Taken_with_Attendance, ossfa.Total_Absence_Count, ossfa.Total_Absence_with_LOA_Count,
    ossfa.Disciplinary_Indicator, ossfa.Has_GIRO_Account,
	ossfa.iCARE_PartTime,
    ossfa.iCARE_Data_X1, ossfa.iCARE_Data_X2, ossfa.iCARE_Data_X3, ossfa.iCARE_Data_X4, ossfa.iCARE_Data_X5,
    ossfa.iCARE_Data_X6, ossfa.iCARE_Data_X7, ossfa.iCARE_Data_X8, ossfa.iCARE_Data_X9, ossfa.iCARE_Data_X10,
    ossfa.iCARE_Data_X11, ossfa.iCARE_Data_X12, ossfa.iCARE_Data_X13, ossfa.iCARE_Data_X14, ossfa.iCARE_Data_X15,
    ossfa.iCARE_Data_X16, ossfa.iCARE_Data_X17, ossfa.iCARE_Data_X18, ossfa.iCARE_Data_X19, ossfa.iCARE_Data_X20,
    ossfa.Care_Category, ossfa.Care_Main_Type AS Student_Care_Main_Type, ossfa.Care_Sub_Type AS Student_Care_Sub_Type,
    ossfa.Care_Admin_Remarks AS Student_Care_Admin_Remarks, ossfa.Care_Date_Updated AS Student_Care_Date_Updated,
    ossfa.Care_Indicator,
	SYSDATETIME() AS CREATED_ON,
	SYSDATETIME() AS MODIFIED_ON
FROM (
	SELECT sfabt.*, 
		fselig.Residency_Reqmt AS Residency_Requirement, 
		fselig.Race_Reqmt AS Race_Requirement,
		fselig.PCI_Max,
		fselig.GHI_Max,
		fselig.Quantum_Amt AS Quantum_Amount, 
		fselig.Scheme_Remarks,
		fselig.Fin_Aid_Category AS Fin_Aid_Category_Eligibility_Matched,
		ROW_NUMBER() OVER ( 
		PARTITION BY sfabt.Acad_Year, sfabt.Semester, sfabt.Student_ID, sfabt.Fin_Aid_Category, sfabt.Fin_Aid_Type, 
			sfabt.Fin_Aid_Desc, sfabt.Fin_Aid_Status_Desc, sfabt.App_ID
		ORDER BY fselig.PCI_Max ASC, fselig.GHI_Max ASC) AS rownum
	FROM (
		SELECT sat.Student_ID, sat.Student_Name, sat.Acad_Year, sat.Semester, sat.Qual_Type, sat.Dept, sat.Department_Descr, sat.Prog, sat.Prog_Descr,
			sat.Program_Chair_Name, sat.Mentor_Name, sat.Mentor_Notes_Count, sat.Mentor_Notes_Date_of_Meeting,
			sat.Counselling_Notes_Count, sat.Counselling_Notes_Date_of_Meeting, sat.Specialisatn, 
			sat.Enrolment_Term, sat.Admit_Term, sat.Reqmt_Term, sat.Student_Status, sat.Student_Status_Descr, sat.Student_Status_Effective_Date,
			sat.Action_Reason, sat.Action_Reason_Descr, sat.No_of_Semesters_Completed_EX, sat.Graduation_Term,
			sat.Year_of_Study, sat.Residency_Type, sat.Citizenship, sat.Citizenship_Descr, sat.Gender,
			sat.Race, sat.Race_Mapping_CMIO, sat.Entry_Qualification, NULL AS Religion, sat.Postal_Code,
			sat.Term_cGPA,
			dfac.Fin_Aid_Category, catrem.Fin_Aid_Category_Remarks, faoc.Fin_Aid_Type, typerem.Fin_Aid_Type_Remarks,
			faoc.Fin_Aid_Desc, faoc.Fin_Aid_Status_Desc, faoc.App_ID, faoc.App_Type, faoc.App_Status, faoc.App_Status_Desc,
			faoc.Award_ID, faoc.Award_Description, faoc.Item_Type, faoc.Item_Descr, faoc.Total_Award_Amt, faoc.Date_Updated AS Application_Date,
			faoc.Disbursement_Date, faoc.Award_Remarks, 
			sat.Computed_Eligible_for_Govt_Bursary AS Eligible_for_Govt_Bursary,
			ISNULL(eligchkreq.Eligibility_Check_Required,'N') AS Eligibility_Check_Required,
			typerem.Fin_Aid_Type_Purpose AS Financial_Aid_Type_Purpose, 
			typerem.Fin_Aid_Type_App_Mth AS Financial_Aid_Type_Application_Month,
			faoc.Verified_GHI_Award, faoc.Verified_PCI_Award, 
			faoc.Num_Household_Members, faoc.Property_Type, faoc.Tenancy_Type, faoc.Special_Circumstances, faoc.Remarks_Staff_Verifier,
			sat.PCI_Bursary, sat.GHI_Bursary, 
			sat.PCI_iCARE, sat.GHI_iCARE,
			sat.PCI_Enrolment, sat.GHI_Enrolment, 
			sat.PCI_Available, sat.GHI_Available,
			sat.Total_Outstanding_Amount,
			sat.Worst_Module_Absence_Rate, sat.Worst_Module_Absence_without_LOA_Rate, sat.Number_Of_Modules_Taken_with_Attendance, sat.Total_Absence_Count, sat.Total_Absence_with_LOA_Count,
			sat.Disciplinary_Indicator, sat.Has_GIRO_Account,
			sat.iCARE_PartTime,  
			sat.iCARE_Data_X1,
			sat.iCARE_Data_X2,
			sat.iCARE_Data_X3,
			sat.iCARE_Data_X4,
			sat.iCARE_Data_X5,
			sat.iCARE_Data_X6,
			sat.iCARE_Data_X7,
			sat.iCARE_Data_X8,
			sat.iCARE_Data_X9,
			sat.iCARE_Data_X10,
			sat.iCARE_Data_X11,
			sat.iCARE_Data_X12,
			sat.iCARE_Data_X13,
			sat.iCARE_Data_X14,
			sat.iCARE_Data_X15,
			sat.iCARE_Data_X16,
			sat.iCARE_Data_X17,
			sat.iCARE_Data_X18,
			sat.iCARE_Data_X19,
			sat.iCARE_Data_X20,
			sat.Care_Category, sat.Care_Main_Type, sat.Care_Sub_Type, sat.Care_Admin_Remarks, sat.Care_Date_Updated,
			sat.Care_Indicator
		FROM (
			SELECT sat.Student_ID, sd.Student_Name, sat.Acad_Year, sat.Semester, sat.Qual_Type, sat.Dept, dep.Descr AS Department_Descr, sat.Prog, sat.Prog_Descr,
				pc.Staff_Name AS Program_Chair_Name, mt.Advisor_Name AS Mentor_Name, mtn.Mentor_Notes_Count, mtn.Mentor_Notes_Date_of_Meeting,
				csn.Counselling_Notes_Count, csn.Counselling_Notes_Date_of_Meeting, sd.Specialisatn, 
				sat.Enrolment_Term, sat.Admit_Term, sat.Reqmt_Term, sat.Student_Status, sat.Student_Status_Descr, sat.Student_Status_Effective_Date,
				sat.Action_Reason, armc.Long_Name AS Action_Reason_Descr, sat.No_of_Semesters_Completed_EX, grad.Graduation_Term,
				sat.Year_of_Study, sat.Residency_Type, sd.Citizenship, citizenmc.Long_Name AS Citizenship_Descr, sd.Gender,
				ethnicmc.Long_Name AS Race, sat.Race_Mapping_CMIO, sat.Entry_Qualification, NULL AS Religion, sda.Postal_Code,
				sat.Term_cGPA,
				CASE 
					WHEN faocbyay.Eligibility_Govt_Bursary IS NOT NULL THEN faocbyay.Eligibility_Govt_Bursary
					WHEN sat.Residency_Type IN ('PR','OTH') THEN 'N'
					ELSE 'Y'
				END AS Computed_Eligible_for_Govt_Bursary,
				incomebur.PCI AS PCI_Bursary, incomebur.GHI AS GHI_Bursary, 
				ISNULL(icare.ICAREPCI,icareprevyr.ICAREPCI) AS PCI_iCARE, ISNULL(icare.ICAREGHI,icareprevyr.ICAREGHI) AS GHI_iCARE,
				incomeapplcn.PCI AS PCI_Enrolment, incomeapplcn.GHI AS GHI_Enrolment, 
				ISNULL(ISNULL(incomebur.PCI,ISNULL(icare.ICAREPCI,icareprevyr.ICAREPCI)),incomeapplcn.PCI) AS PCI_Available, 
				ISNULL(ISNULL(incomebur.GHI,ISNULL(icare.ICAREGHI,icareprevyr.ICAREGHI)),incomeapplcn.GHI) AS GHI_Available,
				cab.Total AS Total_Outstanding_Amount,
				attd.Worst_Module_Absence_Rate, attd.Worst_Module_Absence_without_LOA_Rate, attd.Number_Of_Modules_Taken_with_Attendance, attd.Total_Absence_Count, attd.Total_Absence_with_LOA_Count,
				ISNULL(dispa.Disciplinary_Indicator,'N') AS Disciplinary_Indicator, ISNULL(giro.Has_GIRO_Account,'N') AS Has_GIRO_Account,
				ISNULL(icare.ICAREPARTTIME,icareprevyr.ICAREPARTTIME) AS iCARE_PartTime,  
				ISNULL(icare.X1,icareprevyr.X1) AS iCARE_Data_X1,
				ISNULL(icare.X2,icareprevyr.X2) AS iCARE_Data_X2,
				ISNULL(icare.X3,icareprevyr.X3) AS iCARE_Data_X3,
				ISNULL(icare.X4,icareprevyr.X4) AS iCARE_Data_X4,
				ISNULL(icare.X5,icareprevyr.X5) AS iCARE_Data_X5,
				ISNULL(icare.X6,icareprevyr.X6) AS iCARE_Data_X6,
				ISNULL(icare.X7,icareprevyr.X7) AS iCARE_Data_X7,
				ISNULL(icare.X8,icareprevyr.X8) AS iCARE_Data_X8,
				ISNULL(icare.X9,icareprevyr.X9) AS iCARE_Data_X9,
				ISNULL(icare.X10,icareprevyr.X10) AS iCARE_Data_X10,
				ISNULL(icare.X11,icareprevyr.X11) AS iCARE_Data_X11,
				ISNULL(icare.X12,icareprevyr.X12) AS iCARE_Data_X12,
				ISNULL(icare.X13,icareprevyr.X13) AS iCARE_Data_X13,
				ISNULL(icare.X14,icareprevyr.X14) AS iCARE_Data_X14,
				ISNULL(icare.X15,icareprevyr.X15) AS iCARE_Data_X15,
				ISNULL(icare.X16,icareprevyr.X16) AS iCARE_Data_X16,
				ISNULL(icare.X17,icareprevyr.X17) AS iCARE_Data_X17,
				ISNULL(icare.X18,icareprevyr.X18) AS iCARE_Data_X18,
				ISNULL(icare.X19,icareprevyr.X19) AS iCARE_Data_X19,
				ISNULL(icare.X20,icareprevyr.X20) AS iCARE_Data_X20,
				scare.Care_Category, scare.Care_Main_Type, scare.Care_Sub_Type, Scare.Care_Admin_Remarks, scare.Care_Date_Updated,
				scare.Care_Indicator
			FROM (
				SELECT Student_ID, Acad_Year, Semester, Qual_Type, Dept, Prog, Prog_Descr,
					Enrolment_Term, Admit_Term, Reqmt_Term, Student_Status, Student_Status_Descr, Student_Status_Effective_Date,
					Action_Reason, No_of_Semesters_Completed_EX, 
					Year_of_Study, Residency_Type, 
					Race_Mapping_CMIO, Entry_Qualification, 
					Term_cGPA
				FROM (
					SELECT sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester, sdbat.Qual_Type, sdbat.Dept, sdbat.Prog, sdbat.Prog_Descr,
						sdbat.Enrolment_Term, sdbat.Admit_Term, sdbat.Reqmt_Term, sdbat.Student_Status, sdbat.Student_Status_Descr, sdbat.Student_Status_Effective_Date,
						sdbat.Action_Reason, sdbat.No_of_Semesters_Completed_EX, 
						sdbat.Year_of_Study, sdbat.Residency_Type, 
						sdbat.Race_Mapping_CMIO, sdbat.Entry_Qualification, 
						sdbat.Term_cGPA,
						ROW_NUMBER() OVER (
						PARTITION BY sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester
						ORDER BY ts.Term_End_Date DESC, sdbat.Admit_Term DESC, sdbat.Student_Status_Effective_Date ASC, sdbat.Prog ASC, sdbat.Qual_Type DESC) rownum
					FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
					INNER JOIN (
						SELECT DISTINCT Student_ID, Admit_Term, Prog, Acad_Year, Semester
						FROM DW_STUDENT_DETAILS_BY_ACAD_TERM
						WHERE Vacation_Term = 'No') nonvac
					ON sdbat.Student_ID = nonvac.Student_ID
						AND sdbat.Admit_Term = nonvac.Admit_Term
						AND sdbat.Prog = nonvac.Prog
						AND sdbat.Acad_Year = nonvac.Acad_Year
						AND sdbat.Semester = nonvac.Semester
					INNER JOIN DW_TERM_SETUP ts
					ON sdbat.Qual_Type = ts.Qual_Type
						AND sdbat.Term = ts.Term 
					WHERE sdbat.Qual_Type IN ('DPFT','PFP')
					AND ts.Qual_Type IN ('DPFT','PFP')) sat
				WHERE rownum = 1) sat -- Students with Acad Terms
			LEFT JOIN DW_EXT_DEPARTMENT dep
			ON sat.Dept = dep.Department
			LEFT JOIN (
				SELECT Field_Value, Long_Name
				FROM RPDW_PRD_STG..STG_OASIS_MASTER_CODE
				WHERE Field_Name = 'PROG_REASON') armc -- Action_Reason_Master_Code
			ON sat.Action_Reason = armc.Field_Value
			LEFT JOIN (
				SELECT DISTINCT Student_Id, Qual_Type, Programme_Code, Graduation_Term
				FROM DW_GRADUATION
				WHERE Qual_Type IN ('DPFT','PFP')) grad -- Graduation_Base
			ON sat.Student_ID = grad.Student_Id
				AND sat.Qual_Type = grad.Qual_Type
				AND sat.Prog = grad.Programme_Code
			LEFT JOIN (
				SELECT pc.Prog_Code, pc.Staff_Name
				FROM (
					SELECT p.Prog_Code, s.Staff_Name,
						ROW_NUMBER() OVER ( 
						PARTITION BY p.Prog_Code
						ORDER BY p.Effective_Date DESC) AS rownum
					FROM DW_PET_PROGRAMME p
					INNER JOIN (
						SELECT DISTINCT Staff_ID, Staff_Name
						FROM DW_STAFF_DETAILS) s
					ON p.Prog_Chair_ID = s.Staff_ID
					WHERE Qual_Type IN ('DPFT','PFP')) pc
				WHERE pc.rownum = 1) pc -- Program_Chair_Base
			ON sat.Prog = pc.Prog_Code
			LEFT JOIN (
				SELECT Student_ID, Qual_Type, Advisor_Name
					FROM (
					SELECT Student_ID, Qual_Type, Advisor_Name,
						ROW_NUMBER() OVER (
						PARTITION BY Student_ID, Qual_Type
						ORDER BY Advisor_Num ASC) AS rownnum
					FROM DW_STUDENT_MENTOR) mt
				WHERE mt.rownnum = 1) mt -- Mentor_Base
			ON sat.Student_ID = mt.Student_ID 
				AND sat.Qual_Type = mt.Qual_Type
			LEFT JOIN (
				SELECT mtn.Student_ID, mtn.Qual_Type, ts.Acad_Year, ts.Semester, COUNT(1) AS Mentor_Notes_Count, MAX(Meeting_Date) AS Mentor_Notes_Date_of_Meeting
				FROM DW_STUDENT_MENTOR_NOTES mtn
				INNER JOIN DW_TERM_SETUP ts
				ON mtn.Term = ts.Term
				GROUP BY mtn.Student_ID, mtn.Qual_Type, ts.Acad_Year, ts.Semester) mtn -- Mentor_Notes_Base
			ON sat.Student_ID = mtn.Student_ID
				AND sat.Qual_Type = mtn.Qual_Type
				AND sat.Acad_Year = mtn.Acad_Year
				AND sat.Semester = mtn.Semester
			LEFT JOIN (
				SELECT csn.Student_ID, csn.Qual_Type, ts.Acad_Year, ts.Semester, COUNT(1) AS Counselling_Notes_Count, MAX(Meeting_Date) AS Counselling_Notes_Date_of_Meeting
				FROM DW_STUDENT_COUNSELLING_NOTES csn
				INNER JOIN DW_TERM_SETUP ts
				ON csn.Term = ts.Term
				WHERE csn.Counsellor_Status = 'Submitted'
				GROUP BY csn.Student_ID, csn.Qual_Type, ts.Acad_Year, ts.Semester) csn -- Counselling_Notes_Base
			ON sat.Student_ID = csn.Student_ID
				AND sat.Qual_Type = csn.Qual_Type
				AND sat.Acad_Year = csn.Acad_Year
				AND sat.Semester = csn.Semester
			LEFT JOIN (
				SELECT DISTINCT Student_ID, Student_Name, Admit_Term, Specialisatn, Citizenship, Gender, Ethnic_Group
				FROM DW_STUDENT_DETAILS) sd -- Student_Details_Base
			ON sat.Student_ID = sd.Student_ID
				AND sat.Admit_Term = sd.Admit_Term
			LEFT JOIN (
				SELECT Field_Value, Long_Name
				FROM RPDW_PRD_STG..STG_OASIS_MASTER_CODE
				WHERE Field_Name = 'CITIZENSHIP') citizenmc
			ON sd.Citizenship = citizenmc.Field_Value
			LEFT JOIN (
				SELECT Field_Value, Long_Name
				FROM RPDW_PRD_STG..STG_OASIS_MASTER_CODE
				WHERE Field_Name = 'ETHNIC_GROUP')  ethnicmc
			ON sd.Ethnic_Group = ethnicmc.Field_Value
			LEFT JOIN (
				SELECT Student_ID, Admit_Term, Postal_Code
				FROM (
				SELECT Student_ID, Admit_Term, Postal_Code,
					ROW_NUMBER() OVER ( 
					PARTITION BY Student_ID, Admit_Term
					ORDER BY Addrs_Effective_Date DESC) AS rownum
				FROM DW_STUDENT_DETAILS) sd
				WHERE rownum = 1) sda -- Student_Details_Address_Base
			ON sat.Student_ID = sda.Student_ID
			AND sat.Admit_Term = sda.Admit_Term
			LEFT JOIN (
				SELECT Student_ID, Acad_Yr, PCI, PCI * Family_Members AS GHI
				FROM (
				SELECT Student_ID, Acad_Yr, PCI, Family_Members,
					ROW_NUMBER() OVER ( 
					PARTITION BY Student_ID, Acad_Yr
					ORDER BY App_Date DESC) AS rownum
				FROM DW_SCHOLARSHIP_BURSARY_STATUS
				WHERE App_Type = 'CDC'
				AND Family_Members &gt; 0
				AND App_Status NOT IN ('REJ','RRP','AUS','WTD','WTH','WHD','WDN')) incomebur
				WHERE rownum = 1) incomebur -- Income_Data_Bursary_Base
			ON sat.Student_ID = incomebur.Student_ID
				AND sat.Acad_Year = incomebur.Acad_Yr
			LEFT JOIN (
				SELECT Student_ID, Acad_Year, CAST(ICAREPCI AS decimal(8,2)) AS ICAREPCI, ICAREGHI, ICAREPARTTIME, 
					X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20
				FROM (
					SELECT Student_ID, RIGHT(Survey_ID,4) AS Acad_Year, Qns_ID, Response
					FROM DW_ICARE_SURVEY_RESPONSE
					WHERE Survey_ID LIKE 'ICARE%') icare -- ICARE_Survey_Response_Base
				PIVOT
				(
					MAX(Response)
					FOR Qns_ID IN (ICAREPCI, ICAREGHI, ICAREPARTTIME, X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20)
				) icarepiv) icare
			ON sat.Student_ID = icare.Student_ID
				AND sat.Acad_Year = icare.Acad_Year
			LEFT JOIN (
				SELECT Student_ID, Acad_Year, CAST(ICAREPCI AS decimal(8,2)) AS ICAREPCI, ICAREGHI, ICAREPARTTIME, 
					X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20
				FROM (
					SELECT Student_ID, RIGHT(Survey_ID,4) AS Acad_Year, Qns_ID, Response
					FROM DW_ICARE_SURVEY_RESPONSE
					WHERE Survey_ID LIKE 'ICARE%') icare -- ICARE_Survey_Response_Base
				PIVOT
				(
					MAX(Response)
					FOR Qns_ID IN (ICAREPCI, ICAREGHI, ICAREPARTTIME, X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20)
				) icarepiv) icareprevyr -- ICARE_Survey_Response_Previous_Year_Base
			ON sat.Student_ID = icareprevyr.Student_ID
				AND sat.Acad_Year - 1 = icareprevyr.Acad_Year
			LEFT JOIN (
				SELECT Applicant_ID, Total_Mth_Family_Household_Income AS GHI, 
					CAST(Total_Mth_Family_Household_Income/REPLACE(Household_Size,'.','') AS decimal(8,2)) AS PCI
				FROM DW_APPLICANT_HOUSEHOLD_DETAILS
				WHERE REPLACE(Household_Size,'.','') &gt; 0) incomeapplcn -- Income Data_Applicant_Household_Details_Base
			ON sat.Student_ID = incomeapplcn.Applicant_ID
			LEFT JOIN (
				SELECT DISTINCT Student_ID, Total
				FROM DW_CUSTOMER_ACCOUNT_BALANCE
				WHERE Business_Unit = 'RPPET') cab -- Customer_Account_Balance_Base
			ON sat.Student_ID = cab.Student_ID
			LEFT JOIN (
				SELECT Student_ID, Acad_Year, Semester, Qual_Type, Prog, Reqmt_Term, 
					CAST(MAX(Module_Absence_Rate) AS decimal(6,2)) AS Worst_Module_Absence_Rate, 
					CAST(MAX(Module_Absence_without_LOA_Rate) AS decimal(6,2)) AS Worst_Module_Absence_without_LOA_Rate,
					COUNT(DISTINCT Module_Code) AS Number_Of_Modules_Taken_with_Attendance,
					SUM(Absence_Count) AS Total_Absence_Count,
					SUM(Absence_With_LOA_Count) AS Total_Absence_with_LOA_Count
				FROM (
					SELECT Student_ID, Acad_Year, Semester, Qual_Type, Prog, Reqmt_Term, Module_Code,
						SUM(Absence)*100.00 /COUNT(1) AS Module_Absence_Rate, 
						SUM(Absence_Without_LOA)*100.00/COUNT(1) AS Module_Absence_Without_LOA_Rate,
						SUM(Absence) AS Absence_Count,
						SUM(Absence_With_LOA) AS Absence_With_LOA_Count
					FROM (
						SELECT attd.Student_ID, attd.[Academic Year] AS Acad_Year, attd.Semester, cs.Qual_Type, cs.Prog, cs.Reqmt_Term, attd.Module_Code, 
							CASE 
								WHEN attd.[Attendance Status Desc] IN ('Absent','Late and Partial','Partial') THEN 1
								ELSE 0
							END AS Absence,
							CASE 
								WHEN attd.[Attendance Status Desc] IN ('Absent','Late and Partial','Partial') AND attd.LOA_Status = 0 THEN 1
								ELSE 0
							END AS Absence_Without_LOA,
							CASE 
								WHEN attd.[Attendance Status Desc] IN ('Absent','Late and Partial','Partial') AND attd.LOA_Status &gt; 0 THEN 1
								ELSE 0
							END AS Absence_With_LOA
						FROM (
							SELECT DISTINCT Prog, Reqmt_Term, Qual_Type, Module_Code
							FROM DW_COURSE_STRUCTURE 
							WHERE Qual_Type IN ('DPFT','PFP')) cs
						INNER JOIN V_DW_STUDENT_ATTENDANCE attd
						ON cs.Prog = attd.[Programme Code]
							AND cs.Reqmt_Term = attd.[Requirement Term]
							AND cs.Qual_Type = attd.Qualification_Type
							AND cs.Module_Code = attd.Module_Code
						WHERE ISNULL(attd.[Attendance Status Desc],'Not Recorded') &lt;&gt; 'Not Recorded') attd
					GROUP BY Student_ID, Acad_Year, Semester, Qual_Type, Prog, Reqmt_Term, Module_Code) attd
				GROUP BY Student_ID, Acad_Year, Semester, Qual_Type, Prog, Reqmt_Term) attd -- Module_Attendance_Base
			ON sat.Student_ID = attd.Student_ID
				AND sat.Acad_Year = attd.Acad_Year
				AND sat.Semester = attd.Semester
				AND sat.Qual_Type = attd.Qual_Type
				AND sat.Prog = attd.Prog
				AND sat.Reqmt_Term = attd.Reqmt_Term
			LEFT JOIN (
				SELECT DISTINCT Student_ID, YEAR(Offence_Date) AS Acad_Year, 'Y' AS Disciplinary_Indicator
				FROM DW_STUDENT_DISCIPLINARY_ACTION sda
				INNER JOIN DW_OFFENCE_CODE_SETUP ocs
				ON sda.Offence_Code = ocs.Offence_Code
				WHERE ocs.Offence_Lvl IN ('2','3')) dispa -- Disciplinary_Action_Base
			ON sat.Student_ID = dispa.Student_ID
				AND sat.Acad_Year = dispa.Acad_Year
			LEFT JOIN (
				SELECT DISTINCT Student_ID, Qual_Type, Prog, 'Y' AS Has_GIRO_Account
				FROM DW_STUDENT_GIRO_FUND_STATUS
				WHERE Acct_Status = 'Approved'
				AND Business_Unit = 'RPPET'
				AND Qual_Type IN ('DPFT','PFP')) giro -- Giro_Account_Base
			ON sat.Student_ID = giro.Student_ID
				AND sat.Qual_Type = giro.Qual_Type
				AND sat.Prog = giro.Prog
			LEFT JOIN (
				SELECT RIGHT(Acad_Yr, 4) AS Acad_Year, Student_ID, STRING_AGG(Care_Category,'|') AS Care_Category, STRING_AGG(Care_Main_Type,'|') AS Care_Main_Type, STRING_AGG(Care_Sub_Type,'|') AS Care_Sub_Type, STRING_AGG(Care_Admin_Remarks,'|') AS Care_Admin_Remarks,
					MAX(Care_Date_Updated) AS Care_Date_Updated, STRING_AGG(Care_Indicator,'') AS Care_Indicator
				FROM DW_STUDENT_CARE
				GROUP BY RIGHT(Acad_Yr, 4), Student_ID) scare -- Student_Care_Base
			ON sat.Student_ID = scare.Student_ID
				AND sat.Acad_Year = scare.Acad_Year
			--LEFT JOIN (
			--	SELECT DISTINCT Student_ID, Acad_Yr
			--	FROM DW_SCHOLARSHIP_BURSARY_STATUS
			--	WHERE App_Type = 'SCH'
			--	AND App_Status IN ('DIS','AWD','APR')) schship -- Scholarship_List_Base
			--ON sat.Student_ID = schship.Student_ID
			--	AND sat.Acad_Year = schship.Acad_Yr
			LEFT JOIN (
				SELECT DISTINCT Student_ID, RIGHT(Acad_Yr, 4) AS Acad_Year, Eligibility_Govt_Bursary
				FROM DW_FINANCIAL_AID_OUTCOME_CONSOLIDATED) faocbyay	
			ON sat.Student_ID = faocbyay.Student_ID
				AND sat.Acad_Year = faocbyay.Acad_Year) sat -- Student_By_Term_With_Full_Details_Base
		INNER JOIN (
			SELECT DISTINCT Fin_Aid_Category
			FROM DW_FINANCIAL_SCHEME_ID
			UNION
			SELECT 'Others' AS Fin_Aid_Category) dfac -- Distinct_Fin_Aid_Category_Base 
		ON 1 = 1
		LEFT JOIN (
			SELECT RIGHT(Acad_Yr,4) AS Acad_Year, Fin_Aid_Category, Fin_Aid_Category_Remarks
			FROM (
				SELECT Acad_Yr, Fin_Aid_Category, Fin_Aid_Category_Remarks,
					ROW_NUMBER() OVER (
					PARTITION BY Acad_Yr, Fin_Aid_Category
					ORDER BY PCI_Max ASC) AS rownum
				FROM DW_FINANCIAL_SCHEME_ELIGIBILITY) catrem
			WHERE rownum = 1) catrem -- Financial_Aid_Category_Remarks_Base
		ON sat.Acad_Year = catrem.Acad_Year
			AND dfac.Fin_Aid_Category = catrem.Fin_Aid_Category
		LEFT JOIN (	
			SELECT RIGHT(Acad_Yr,4) AS Acad_Year, Fin_Aid_Category, 'Y' AS Eligibility_Check_Required
			FROM (
				SELECT DISTINCT Acad_Yr, Fin_Aid_Category
				FROM DW_FINANCIAL_SCHEME_ELIGIBILITY
				WHERE Eligibility_Check_Required = 'Y'
				EXCEPT
				SELECT DISTINCT Acad_Yr, Fin_Aid_Category
				FROM DW_FINANCIAL_SCHEME_ELIGIBILITY
				WHERE Eligibility_Check_Required = 'N')elig ) eligchkreq -- Eligibility_Check_Required_Base
		ON sat.Acad_Year = eligchkreq.Acad_Year
			AND dfac.Fin_Aid_Category = eligchkreq.Fin_Aid_Category
		LEFT JOIN (
			SELECT ocl.Student_ID, RIGHT(ocl.Acad_Yr,4) AS Acad_Year, RIGHT(ocl.Acad_Term,1) AS Semester, ocl.Fin_Aid_Category, ocl.Fin_Aid_Type, ocl.Fin_Aid_Desc, ocl.Fin_Aid_Status_Desc, ocl.App_ID,
				ocl.App_Type, ocl.App_Status, ocl.App_Status_Desc, ocl.Award_ID, ocl.Award_Description,
				ai.Item_Type, its.[Desc] AS Item_Descr,
				ocg.Total_Award_Amt, ocl.Date_Updated, ocl.Disbursement_Date, awdcatmc.Long_Name AS Award_Remarks,
				--ocl.Eligibility_Govt_Bursary, 
				ocl.Verified_GHI_Award, ocl.Verified_PCI_Award, ocl.Num_Household_Members, ocl.Property_Type, ocl.Tenancy_Type, ocl.Special_Circumstances, ocl.Remarks_Staff_Verifier
			FROM (
				SELECT Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID,
					App_Type, App_Status, App_Status_Desc, Award_ID, Award_Description, Date_Updated, Disbursement_Date, Eligibility_Govt_Bursary,
					Verified_GHI_Award, Verified_PCI_Award, Num_Household_Members, Property_Type, Tenancy_Type, Special_Circumstances, Remarks_Staff_Verifier
				FROM (
					SELECT Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID,
						App_Type, App_Status, App_Status_Desc, Award_ID, Award_Description, Date_Updated, Disbursement_Date, Eligibility_Govt_Bursary,
						Verified_GHI_Award, Verified_PCI_Award, Num_Household_Members, Property_Type, Tenancy_Type, Special_Circumstances, Remarks_Staff_Verifier,
						ROW_NUMBER() OVER (
						PARTITION BY Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID
						ORDER BY Date_Updated DESC) AS rownum
					FROM DW_FINANCIAL_AID_OUTCOME_CONSOLIDATED) oc
				WHERE rownum = 1) ocl
			LEFT JOIN (
				SELECT Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID, SUM(Award_Amt) AS Total_Award_Amt
				FROM DW_FINANCIAL_AID_OUTCOME_CONSOLIDATED
				WHERE Award_Amt IS NOT NULL
				GROUP BY Student_ID, Acad_Yr, Acad_Term, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Desc, Fin_Aid_Status_Desc, App_ID) ocg
			ON ocl.Student_ID = ocg.Student_ID
				AND ocl.Acad_Yr = ocg.Acad_Yr
				AND ISNULL(ocl.Acad_Term,'') = ISNULL(ocg.Acad_Term,'')
				AND ocl.Fin_Aid_Category = ocg.Fin_Aid_Category
				AND ocl.Fin_Aid_Type = ocg.Fin_Aid_Type
				AND ocl.Fin_Aid_Desc = ocg.Fin_Aid_Desc
				AND ocl.Fin_Aid_Status_Desc = ocg.Fin_Aid_Status_Desc
				AND ocl.App_ID = ocg.App_ID
			LEFT JOIN DW_AWARD_INFO ai
			ON ocl.Award_ID = ai.Award_ID
			LEFT JOIN DW_ITEM_TYPE_SETUP its
			ON ai.Item_Type = its.Item_Type
			LEFT JOIN RPDW_PRD_STG..STG_OASIS_MASTER_CODE awdcatmc
			ON awdcatmc.Field_Name = 'A_AWD_CATG'
				AND awdcatmc.Effective_Status = 'A'
				AND ai.Award_Category = awdcatmc.Field_Value) faoc -- Financial_Aid_Outcome_Consolidated_Base 
		ON sat.Student_ID = faoc.Student_ID
			AND sat.Acad_Year = faoc.Acad_Year
			AND (sat.Semester = faoc.Semester OR faoc.Semester IS NULL)
			AND dfac.Fin_Aid_Category = faoc.Fin_Aid_Category
		LEFT JOIN (
			SELECT RIGHT(Acad_Yr,4) AS Acad_Year, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Type_Remarks, Fin_Aid_Type_Purpose, Fin_Aid_Type_App_Mth
			FROM (
				SELECT Acad_Yr, Fin_Aid_Category, Fin_Aid_Type, Fin_Aid_Type_Remarks, Fin_Aid_Type_Purpose, Fin_Aid_Type_App_Mth,
					ROW_NUMBER() OVER (
					PARTITION BY Acad_Yr, Fin_Aid_Category, Fin_Aid_Type
					ORDER BY PCI_Max ASC) AS rownum
				FROM DW_FINANCIAL_SCHEME_ELIGIBILITY) typerem
			WHERE rownum = 1) typerem -- Financial_Aid_Type_Remarks_Base
		ON sat.Acad_Year = typerem.Acad_Year
			AND dfac.Fin_Aid_Category = typerem.Fin_Aid_Category
			AND faoc.Fin_Aid_Type = typerem.Fin_Aid_Type) sfabt -- Student_Financial_Aid_By_Term_Base
	LEFT JOIN DW_FINANCIAL_SCHEME_ELIGIBILITY fselig -- Financial_Scheme_Eligibility_Base
	ON (sfabt.Eligibility_Check_Required = 'Y' OR sfabt.Fin_Aid_Type IS NOT NULL)
		AND sfabt.Acad_Year = RIGHT(fselig.Acad_Yr,4)
		AND sfabt.Fin_Aid_Category = fselig.Fin_Aid_Category
		AND (sfabt.Fin_Aid_Type IS NULL OR sfabt.Fin_Aid_Type = fselig.Fin_Aid_Type)
		AND (sfabt.Fin_Aid_Desc IS NULL OR sfabt.Fin_Aid_Desc = fselig.Fin_Aid_Desc)
		AND (fselig.Eligibility_Check_Required = 'N'
		OR (fselig.Eligibility_Check_Required = 'Y'
		AND (fselig.Eligible_Check_Govt_Bursary = 'N' OR sfabt.Eligible_for_Govt_Bursary = 'Y')
		AND (ISNULL(fselig.Residency_Reqmt,'') = '' OR CHARINDEX(sfabt.Residency_Type,fselig.Residency_Reqmt) &gt; 0)
		AND (ISNULL(fselig.Race_Reqmt,'') = '' OR CHARINDEX(sfabt.Race,fselig.Race_Reqmt) &gt; 0)
		AND ((fselig.PCI_Max IS NULL OR CAST(sfabt.PCI_Available AS int) &lt;= fselig.PCI_Max)
		OR (fselig.GHI_Max IS NULL OR CAST(sfabt.GHI_Available AS int) &lt;= fselig.GHI_Max))))) ossfa -- OSS_Financial_Aid_Base
WHERE rownum = 1;


------- Pending: 
------- 1. Resolve Warning: Null value is eliminated by an aggregate or other SET operation.
------- 2. Effective Date for Programme Status 


UPDATE ossfa
SET ossfa.Receiving_Status_for_Financial_Aid_Category = fac.Receiving_Status_for_Financial_Aid_Category
FROM DM_OSS_FINANCIAL_AID ossfa
INNER JOIN (
	SELECT Academic_Year, Student_ID, Financial_Aid_Category,
		CASE Best_Receiving_Status
			WHEN 2 THEN 'Non-Recipient'
			WHEN 1 THEN 'Recipient'
			ELSE 'Not Eligible'
		END AS Receiving_Status_for_Financial_Aid_Category
	FROM (
		SELECT Academic_Year, Student_ID, Financial_Aid_Category, MIN(Receiving_Status) AS Best_Receiving_Status
		FROM (
			SELECT Academic_Year, Student_ID, Financial_Aid_Category,
				CASE
					WHEN Financial_Aid_Status_Descr NOT IN ('Non-Recipient','Not Applicable','Rejected','Not Applied','Pending') THEN 1 -- Recipient
					WHEN Eligible_for_Financial_Aid_Category IN ('NA','Y') THEN 2 -- Non-Recipient
					ELSE 3 -- Not Eligible
				END AS Receiving_Status
			FROM DM_OSS_FINANCIAL_AID) fac
		GROUP BY Academic_Year, Student_ID, Financial_Aid_Category) fac) fac
ON ossfa.Academic_Year = fac.Academic_Year
	AND ossfa.Student_ID = fac.Student_ID
	AND ossfa.Financial_Aid_Category = fac.Financial_Aid_Category;



	COMMIT TRANSACTION
END TRY

BEGIN CATCH
ROLLBACK TRANSACTION

  INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)
  SELECT   
         CAST(@jobstatusid as int) as JOB_STATUS_ID
        ,ERROR_MESSAGE() AS ErrorMessage
		,getdate()  as created_on
END CATCH  
GO</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BC3926DC-401E-4C72-BB69-7E9E3B07CF75}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="STAGE">
      <DTS:VariableValue
        DTS:DataType="8">DM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7576AD3A-834C-407E-B245-8B0F80C58B05}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TgtTableName">
      <DTS:VariableValue
        DTS:DataType="8">DM_OSS_FINANCIAL_AID</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create ETL Job Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{E15E0175-7843-4CDD-84CA-1351D782EF4C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create ETL Job Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0649B45E-653A-42BF-B163-ACE0A66FB3BD}"
          SQLTask:SqlStatementSource="Exec [dbo].[usp_InsertETLJobLog] ?, ?, ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Job_name"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="1"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="2"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="3"
            SQLTask:DtsVariableName="User::TgtTableName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Error Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{95946E95-E831-47A6-A9EA-0DB5276775BB}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Error Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0649B45E-653A-42BF-B163-ACE0A66FB3BD}"
          SQLTask:SqlStatementSource="UPDATE [dbo].[ETL_JOB_STATUS]&#xA;SET&#xA;ERROR_MSG = 'STG table is not completed',&#xA;JOB_STATUS ='Fail'&#xA;--PROCESSED_ON =getdate()&#xA;WHERE JOB_STATUS_ID=?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\JOB_STATUS_ID"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{F1E8D747-0949-46BE-AF1F-E8D3D6B5FE1C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="JOB_STATUS_ID"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0649B45E-653A-42BF-B163-ACE0A66FB3BD}"
          SQLTask:SqlStatementSource="SELECT max([JOB_STATUS_ID])&#xA;      &#xA;  FROM [dbo].[ETL_JOB_STATUS] where [SOURCE_FILENAME]=? &#xA;---and convert(varchar(8),CREATED_ON,112)=convert--(varchar(8) ,getdate(),112)"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Into DM"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{7056186B-E901-4E41-8953-EFBA7648B30C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Into DM"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E120A360-F458-43D5-8AD9-42F4CF132D17}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::SQL_DM_Load" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Process_Date"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{3F2938E4-39D1-45E9-A405-88F0D3487C06}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Process_Date"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E120A360-F458-43D5-8AD9-42F4CF132D17}"
          SQLTask:SqlStatementSource="Select getdate()"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Process_date" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Process_date"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="135"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update Job Status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{DB660B5E-AFE7-44A4-ACB6-C2E828C06D9E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update Job Status"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0649B45E-653A-42BF-B163-ACE0A66FB3BD}"
          SQLTask:SqlStatementSource="DECLARE &#xA;@jobstatusid INT &#xA;select @jobstatusid=?&#xA;IF exists(select * from dbo.ETL_ERROR_LOG where [JOB_STATUS_ID]=@jobstatusid)&#xA; BEGIN&#xA; Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Fail'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;  END&#xA;ELSE&#xA;BEGIN&#xA;Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Success'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;END" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Validate job status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{F4367B3E-762B-41A8-AF50-87E8BAD179F1}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Validate job status"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0649B45E-653A-42BF-B163-ACE0A66FB3BD}"
          SQLTask:SqlStatementSource="select CASE WHEN JOB_STATUS='Success' then 0 ELSE 1 END AS  JOB_STATUS&#xA;&#xA;from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT' and &#xA;  JOB_STATUS_ID in (Select max(JOB_STATUS_ID) from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT')"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Job_Status" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{1308F471-B16F-4F41-A48D-62FE2FB6008D}"
      DTS:From="Package\Process_Date"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Load Into DM" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{99CAE098-FF32-48EC-88C4-38B8AAACF05D}"
      DTS:From="Package\Create ETL Job Log"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\JOB_STATUS_ID" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{38FB4FD1-49EC-4DA7-9FF2-88E7FADE3BF2}"
      DTS:From="Package\JOB_STATUS_ID"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Validate job status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{4C5D9AB3-83BD-4D10-B945-56F957887536}"
      DTS:From="Package\Load Into DM"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Update Job Status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[False]"
      DTS:CreationName=""
      DTS:DTSID="{9E605996-FD3A-49E6-8E5E-480640B65872}"
      DTS:Expression="@[User::Job_Status]==1"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="False"
      DTS:To="Package\Error Log" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[True]"
      DTS:CreationName=""
      DTS:DTSID="{00C7C33B-62B6-49D5-8671-DB01981519F1}"
      DTS:Expression="@[User::Job_Status]==0"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="True"
      DTS:To="Package\Process_Date" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{ECCF9E53-290B-45AE-82CE-57682EC0B446}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{A8DC559D-2389-4117-8F59-457CB1DFB5B1}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{A33147AC-1F72-4C32-AF28-6E06C6323927}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="ETL_ERROR_LOG">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{0649B45E-653A-42BF-B163-ACE0A66FB3BD}"
              SQLTask:SqlStatementSource="[dbo].[usp_InsertETLErrorLog] ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::JOB_STATUS_ID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="131"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::ErrorDescription"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="157,42"
          Id="Package\Create ETL Job Log"
          TopLeft="17,13" />
        <NodeLayout
          Size="123,42"
          Id="Package\Error Log"
          TopLeft="699,21" />
        <NodeLayout
          Size="142,42"
          Id="Package\JOB_STATUS_ID"
          TopLeft="230,18" />
        <NodeLayout
          Size="143,42"
          Id="Package\Load Into DM"
          TopLeft="486,219" />
        <NodeLayout
          Size="142,42"
          Id="Package\Process_Date"
          TopLeft="487,131" />
        <NodeLayout
          Size="165,42"
          Id="Package\Update Job Status"
          TopLeft="526,322" />
        <NodeLayout
          Size="166,42"
          Id="Package\Validate job status"
          TopLeft="446,22" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="557.75,173">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46"
              Start="0,0"
              End="0,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="174,36.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="56,0"
              Start="0,0"
              End="48.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="48.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="372,41">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="74,0"
              Start="0,0"
              End="66.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="66.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="557.5,261">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="51,61"
              Start="0,0"
              End="51,53.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.5"
                    Point2="0,30.5"
                    Point3="4,30.5" />
                  <mssgle:LineSegment
                    End="47,30.5" />
                  <mssgle:CubicBezierSegment
                    Point1="47,30.5"
                    Point2="51,30.5"
                    Point3="51,34.5" />
                  <mssgle:LineSegment
                    End="51,53.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[False]"
          TopLeft="612,42.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="87,0"
              Start="0,0"
              End="79.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="79.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="28.01365234375,5,23.4726953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[True]"
          TopLeft="529,64">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="29,67"
              Start="0,0"
              End="29,59.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.5"
                    Point2="0,33.5"
                    Point3="4,33.5" />
                  <mssgle:LineSegment
                    End="25,33.5" />
                  <mssgle:CubicBezierSegment
                    Point1="25,33.5"
                    Point2="29,33.5"
                    Point3="29,37.5" />
                  <mssgle:LineSegment
                    End="29,59.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="3.48755859375,38.5,22.0248828125,9.421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="162,42"
          Id="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          TopLeft="370,98" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[False]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[True]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>