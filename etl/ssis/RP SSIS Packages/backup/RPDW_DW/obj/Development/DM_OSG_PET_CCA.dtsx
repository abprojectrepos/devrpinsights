<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/30/2019 1:46:31 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NCS-110119GM22"
  DTS:CreatorName="NCS\P0500388"
  DTS:DelayValidation="True"
  DTS:DTSID="{C45D42C1-4202-41E6-A6FD-E23DD97C9AE8}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.0900.40"
  DTS:LocaleID="18441"
  DTS:ObjectName="DM_OSG_PET_CCA"
  DTS:PackageType="5"
  DTS:VersionBuild="142"
  DTS:VersionGUID="{8E83EEB1-8465-4BF2-9752-F3EDDE9DA481}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DW]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{5033F2DA-7057-4ADB-826B-F5D08A4F6FF2}"
      DTS:ObjectName="DW">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Password">@[$Project::Password]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=172.22.2.38;User ID=svc-dw-prod-etl;Initial Catalog=RPDW_PRD;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAiTCZiygZU0CFUIPafxRImQAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAAD3EK4fzIUhUYqXngscqRifAAAAAASAAACgAAAAEAAAAHzDgqgd5xKadBcN/fslJa4YAAAARSOpWOaFxofBtI41gkp5ESQ9BYUlNvzIFAAAAKM4aPqGzjEuRcOdw9JD2qYnGZJI</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ErrorLog]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{C56FD071-0AED-4BEE-9C52-E8F59E009013}"
      DTS:ObjectName="ErrorLog">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Password">@[$Project::Password]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=172.22.2.38;User ID=svc-dw-prod-etl;Initial Catalog=RPDW_PRD;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAiTCZiygZU0CFUIPafxRImQAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAAAWN1bQln1VQZ7u7bN3CpqIAAAAAASAAACgAAAAEAAAAE/dCQBvm7oJAP3T7BTBFs0YAAAAwH+O81i2Xjue/rjNJUdSH76YEQPE4wYYFAAAAC1N+ETgBtaHF+hF5jSHCy/Rr+1z</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DE6A58A4-1BD5-4D99-A286-D9C3CC7FF529}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Duplicate_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B4D23FAD-3A9F-4FB0-9134-261A6EB5D9A6}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Job_name">
      <DTS:VariableValue
        DTS:DataType="8">DM_OSG_PET_CCA</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{62A2A909-9DD7-4D24-A02E-3D96BD64FB97}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Job_Status">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4F91D1FA-032E-465A-8CBF-D6C742B92E70}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="JOB_STATUS_ID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BF99326B-E900-4D4E-BC9A-39EFFCCA55CB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Mandatory_constraint_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{85342739-31AB-48C5-8176-EEF212E704A0}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Process_date">
      <DTS:VariableValue
        DTS:DataType="7">2/1/2019 2:58:47 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BCF96B25-E751-458D-BB9E-4F2F905B93A0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceTable">
      <DTS:VariableValue
        DTS:DataType="8">DW_STUDENT_CCA_CLUB_MEMBERSHIP</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F503EDA4-580A-47BD-93DF-8E18DDF0402B}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;--select Student_ID,Semester,CCA_Code,Acad_Year from (&#xA;&#xA;BEGIN TRANSACTION&#xA;BEGIN TRY&#xA;--------------------------------------&#xA;DECLARE @jobstatusid varchar(10)&#xA;select @jobstatusid=&quot;+ (DT_STR, 5,1252) @[User::JOB_STATUS_ID] +&quot;&#xA;&#xA;Truncate table dbo.TMP_DM_OSG_PET_CCA&#xA;INSERT INTO dbo.TMP_DM_OSG_PET_CCA&#xA;&#xA;Select &#xA;Distinct &#xA;Main.Student_ID&#xA;,Main.Race_Mapping_CMIO&#xA;,Main.Gender&#xA;,ISNULL(PT.School_Centre,'NA') AS Department&#xA;,d.Descr as Department_Descr&#xA;,Main.Prog&#xA;,Main.Prog +' - '+ pt.Prog_Descr as Programme&#xA;,EQT.Entry_Qual_Type as Entry_Qualification&#xA;,'AY'+Main.Acad_Year as Acad_Year&#xA;,'S'+Main.Semester as Semester&#xA;,Main.Student_Status&#xA;,Main.Student_Status_Descr&#xA;,Main.Year_of_Study&#xA;,Main.Residency_Type&#xA;,Main.CCA_Code&#xA;,ISNULL(MAin.CCA,'NA') as CCA&#xA;,Main.CCA_Membership_Status&#xA;,Main.CCA_Membership_Status_Cumulative&#xA;,CASE WHEN Main.CCA_Membership_Status='Not Member' THEN 'Not Member'ELSE Main.Appointment_Desc END as CCA_Appointment --need to write update script&#xA;, CASE WHEN Main.CCA_Membership_Status='Not Member'THEN 'Not Member'&#xA;WHEN AR.Appointment_Grp IS NULL and Main.CCA_Membership_Status='Member' THEN 'Member'&#xA;ELSE  AR.Appointment_Grp END  as  CCA_Appointment_Group&#xA;,NULL as CCA_Appointment_Cumulative  ---need to write update script&#xA;,NULL CCA_Appointment_Group_Cumulative -----need to write update script&#xA;,Main.Parent_Club_Code&#xA;,sdat.Term_cGPA&#xA;,CASE&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=0    AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;0.5    THEN '0 to &lt; 0.5'&#xA;&#x9;&#x9;&#x9;WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=0.5  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt; 1.0 AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '0.5 to &lt; 1'&#xA;&#x9;&#x9;&#x9;WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=1.0  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;1.5   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '1 to &lt; 1.5'&#xA;&#x9;&#x9;&#x9;WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=1.5  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;2.0   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '1.5 to &lt; 2'&#xA;&#x9;&#x9;&#x9;WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=2.0  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;2.5   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '2 to &lt; 2.5'&#xA;&#x9;&#x9;&#x9;WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=2.5  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;3.0   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '2.5 to &lt; 3'&#xA;&#x9;&#x9;&#x9;&#x9;WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=3.0  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;3.5   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '3 to &lt; 3.5'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=3.5  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;3.8   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '3.5 &lt; 3.8'&#xA;&#x9;&#x9;&#x9;WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=3.8  AND LEN(sdat.Term_cGPA)&gt;0 AND sdat.Term_cGPA IS NOT NULL AND cast(sdat.Term_cGPA as varchar)&lt;&gt; ''  THEN '3.8 to &lt;= 4'&#xA;&#x9;&#x9;&#x9;--ELSE '0'&#xA;&#x9;&#x9;&#x9;ELSE 'N.A.'&#xA;&#x9;&#x9;&#x9;END AS   Term_cGPA_Group --need write case statement&#xA;&#xA;,NULL as Internship_Status&#xA;,NULL as Employment_Status--To be confirmed later&#xA;,Main.Marital_Status&#xA;,NULL as Financial_Assistance_Status ----To be confirmed later&#xA;&#xA;,NULL as IPPT_Grade&#xA;,CASE WHEN IIPT1.Student_ID IS NULL THEN 'Not Attempted' ELSE 'Attempted' END as IPPT_Attempt_Status&#xA;,GETDATE()&#xA;,GETDATE()&#xA;,Main.Semester_Begin_Date&#xA;,Main.Semester_End_Date&#xA;From (&#xA;&#xA;SELECT&#xA;lsd.Student_ID, lsd.Qual_Type, lsd.Admit_Term, lsd.Prog, lsd.Reqmt_Term, lsd.Acad_Year, lsd.Semester, lsd.Year_of_Study, &#xA; lsd.Student_Status, lsd.Semester_Begin_Date, lsd.Semester_End_Date,lsd.CCA_Code,lsd.CCA_Membership_Status,lsd.CCA_Membership_Status_Cumulative&#xA; ,lsd.Parent_Club_Code, lsd.Student_Status_Descr,lsd.Gender,lsd.Marital_Status,lsd.Race_Mapping_CMIO,lsd.Residency_Type,lsd.Term_cGPA,lsd.Applicatn_Number&#xA; ,CCA_App.Appointment,CCA_App.Appointment_Desc,lsd.CCA&#xA;&#xA; from(&#xA;&#xA;SELECT  lsd.Student_ID, lsd.Qual_Type, lsd.Admit_Term, lsd.Prog, lsd.Reqmt_Term, lsd.Acad_Year, lsd.Semester, lsd.Year_of_Study, &#xA;  lsd.Semester_Begin_Date, lsd.Semester_End_Date, -- need to include all columns from Latest_Student_Details&#xA; ISNULL(cca.CCA_Code,'NA') AS CCA_Code,&#xA; CASE &#xA;  WHEN cca.CCA_Code IS NULL THEN 'Not Member'&#xA;  WHEN &#xA;   lsd.Semester_Begin_Date BETWEEN cca.Effective_Begin_Date AND cca.Effective_End_Date&#xA;   OR lsd.Semester_End_Date BETWEEN cca.Effective_Begin_Date AND cca.Effective_End_Date&#xA;   OR (cca.Effective_Begin_Date BETWEEN lsd.Semester_Begin_Date AND lsd.Semester_End_Date&#xA;   AND cca.Effective_End_Date BETWEEN lsd.Semester_Begin_Date AND lsd.Semester_End_Date) THEN 'Member' &#xA;  ELSE 'Not Member'&#xA; END AS CCA_Membership_Status,&#xA; CASE &#xA;  WHEN cca.CCA_Code IS NULL THEN 'Not Member'&#xA;  ELSE 'Member'&#xA; END AS CCA_Membership_Status_Cumulative,&#xA; cca. Parent_Club_Code,&#xA; lsd.Student_Status_Descr,lsd.Gender,lsd.Marital_Status,lsd.Race_Mapping_CMIO,lsd.Residency_Type,lsd.Term_cGPA&#xA; ,lsd.Student_Status,lsd.Applicatn_Number&#xA; ,cca.CCA&#xA; &#xA;FROM (&#xA;&#xA;&#xA;SELECT b.Student_ID, b.Qual_Type, b.Admit_Term, b.Reqmt_Term, b.Acad_Year, b.Semester, b.Year_of_Study,&#xA;   b.Semester_Begin_Date, b.Semester_End_Date ,b.Prog--,b.Prog_Action&#xA;  ,b.Student_Status,b.Student_Status_Descr,a.Applicatn_Number,a.Ethnic_Group,a.Gender&#xA;  ,a.Marital_Status,b.Race_Mapping_CMIO,b.Residency_Type,b.Term_cGPA&#xA;&#xA;  from (&#xA;&#xA;&#xA;SELECT a.Student_ID, a.Qual_Type, a.Admit_Term,  a.Reqmt_Term, a.Acad_Year, a.Semester, a.Year_of_Study,&#xA;  a.Semester_Begin_Date, a.Semester_End_Date ,a.Prog--,a.Prog_Action&#xA;  ,a.Student_Status,a.Student_Status_Descr,a.Race_Mapping_CMIO,a.Term_cGPA,a.Residency_Type --,a.Prog&#xA;&#xA;  from (&#xA;&#xA;SELECT Student_ID, Qual_Type, Admit_Term, Prog, Reqmt_Term, Acad_Year, Semester, Year_of_Study, &#xA;&#x9;Student_Status, Student_Status_Descr, Semester_Begin_Date, Semester_End_Date,Race_Mapping_CMIO,Term_cGPA,d.Residency_Type&#xA;&#x9;&#xA;FROM (&#xA;&#x9;SELECT d.Student_ID, d.Qual_Type, d.Admit_Term, d.Prog, d.Reqmt_Term, d.Acad_Year, d.Semester, d.Year_of_Study,&#xA;&#x9;&#x9;d.Student_Status, d.Student_Status_Descr, t.Semester_Begin_Date, t.Semester_End_Date, &#xA;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;PARTITION BY d.Student_ID, d.Qual_Type, d.Acad_Year, d.Semester&#xA;&#x9;&#x9;ORDER BY t.Term_End_Date DESC, d.Admit_Term DESC, d.Prog DESC) rownum,d.Race_Mapping_CMIO,d.Term_cGPA,d.Residency_Type&#xA;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM d&#xA;&#x9;INNER JOIN DW_TERM_SETUP t&#xA;&#x9;ON d.Qual_Type = t.Qual_Type&#xA;&#x9;&#x9;AND d.Term = t.Term &#xA;&#x9;WHERE d.Qual_Type = 'DPFT') d&#xA;WHERE d.rownum = 1&#xA;&#xA;)a---Student_With_All_Semesters --324482&#xA;&#xA;--LEFT JOIN &#xA;--(SELECT  Student_Id, Admit_Term, Prog as Latest_Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status as Latest_Student_Status,&#xA;-- Student_Status_Descr as Latest_Student_Status_Descr, Prog_Action as Latest_Prog_Action&#xA;--  FROM (&#xA;--   SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Student_Status_Descr, Prog_Action,&#xA;--   ROW_NUMBER() OVER (&#xA;--    PARTITION BY Student_Id&#xA;--    ORDER BY Effective_Date DESC, Effective_Seq DESC) rownum&#xA;--   FROM DW_STUDENT_MOVEMENT&#xA;--   WHERE Qual_Type = 'DPFT') sm&#xA;-- WHERE sm.rownum = 1 &#xA;-- )b --Student_Movement_Latest_Prog_Status&#xA;-- ON a.Student_ID=b.Student_Id --and a.Admit_Term=b.Admit_Term --and a.Prog=b.Latest_Prog&#xA; &#xA;  )b --Student_With_All_Acad_Term_and_Latest_Prog_Status&#xA;&#xA;LEFT JOIN (Select Distinct Student_ID, Admit_Term, Applicatn_Number, Gender, Ethnic_Group, Marital_Status--,Residency_Type &#xA;,ROW_NUMBER() over (partition by Student_ID, Admit_Term, Applicatn_Number, Gender, Ethnic_Group order by Effective_Date desc) as RN&#xA;from DW_STUDENT_DETAILS )a&#xA;ON a.Student_ID=b.Student_ID and a.Admit_Term=b.Admit_Term and RN=1) lsd ---Join with DW_STUDENT_DETAILS to get Gender, Ethnic_Group, Marital_Status&#xA;&#xA;LEFT JOIN ( SELECT Qual_Type, Parent_Club_Code, Interest_Grp AS CCA_Code, Student_ID, Effective_Begin_Date, ISNULL(Effective_End_Date,CAST('9999-12-31' AS DATE)) AS Effective_End_Date &#xA;,Interest_Grp_Desc as CCA&#xA; FROM (&#xA;  SELECT a.Qual_Type, a.Parent_Club_Code, a.Interest_Grp, a.Student_ID, a.Effective_Date AS Effective_Begin_Date,&#xA;   DATEADD(day,-1,i.Effective_Date) AS Effective_End_Date,&#xA;   ROW_NUMBER() OVER (&#xA;   PARTITION BY a.Student_ID, a.Qual_Type, a.Interest_Grp&#xA;   ORDER BY i.Effective_Date ASC, i.Effective_Seq ASC) rownum,a.Interest_Grp_Desc&#xA;  FROM (&#xA;   SELECT Qual_Type, Parent_Club_Code, Interest_Grp, Student_ID, Effective_Date, Effective_Seq,Interest_Grp_Desc&#xA;   FROM DW_IG_MEMBERSHIP &#xA;   WHERE Qual_Type = 'DPFT'&#xA;   AND Member_Status = 'A') a&#xA;  LEFT JOIN (&#xA;   SELECT Qual_Type, Parent_Club_Code, Interest_Grp, Student_ID, Effective_Date, Effective_Seq,Interest_Grp_Desc&#xA;   FROM DW_IG_MEMBERSHIP &#xA;   WHERE Qual_Type = 'DPFT'&#xA;   AND Member_Status &lt;&gt; 'A') i&#xA;  ON a.Student_ID = i.Student_ID&#xA;   AND a.Qual_Type = i.Qual_Type&#xA;   AND a.Interest_Grp = i.Interest_Grp&#xA;   AND (a.Effective_Date &lt; i.Effective_Date&#xA;   OR (a.Effective_Date = i.Effective_Date AND a.Effective_Seq &lt; i.Effective_Seq))) c&#xA; WHERE rownum = 1&#xA; UNION ALL&#xA; SELECT Qual_Type, Club_Code AS Parent_Club_Code, Club_Code AS CCA_Code, Student_ID, Effective_Begin_Date, ISNULL(Effective_End_Date,CAST('9999-12-31' AS DATE)) AS Effective_End_Date&#xA; ,Club_Code_Desc as CCA&#xA; FROM (&#xA;  SELECT a.Qual_Type, a.Club_Code, a.Student_ID, a.Effective_Date AS Effective_Begin_Date,&#xA;   DATEADD(day,-1,i.Effective_Date) AS Effective_End_Date,&#xA;   ROW_NUMBER() OVER (&#xA;   PARTITION BY a.Student_ID, a.Qual_Type, a.Club_Code&#xA;   ORDER BY i.Effective_Date ASC, i.Effective_Seq ASC) rownum,a.Club_Code_Desc&#xA;  FROM (&#xA;   SELECT Qual_Type, Club_Code, Student_ID, Effective_Date, Effective_Seq,Club_Code_Desc&#xA;   FROM DW_STUDENT_CCA_CLUB_MEMBERSHIP &#xA;   WHERE Qual_Type = 'DPFT'&#xA;   AND Status = 'A') a&#xA;  LEFT JOIN (&#xA;   SELECT Qual_Type, Club_Code, Student_ID, Effective_Date, Effective_Seq,Club_Code_Desc&#xA;   FROM DW_STUDENT_CCA_CLUB_MEMBERSHIP &#xA;   WHERE Qual_Type = 'DPFT'&#xA;   AND Status &lt;&gt; 'A') i&#xA;  ON a.Student_ID = i.Student_ID&#xA;   AND a.Qual_Type = i.Qual_Type&#xA;   AND a.Club_Code = i.Club_Code&#xA;   AND (a.Effective_Date &lt; i.Effective_Date&#xA;   OR (a.Effective_Date = i.Effective_Date AND a.Effective_Seq &lt; i.Effective_Seq))) c&#xA; WHERE rownum = 1&#xA; ) cca&#xA;ON lsd.Student_ID = cca.Student_ID&#xA; AND lsd.Qual_Type = cca.Qual_Type&#xA; &#xA; AND cca.Effective_Begin_Date &lt;= lsd.Semester_End_Date&#xA;&#xA; )lsd  --Latest_Student_Details_w_CCA_History&#xA; &#xA; LEFT JOIN &#xA;&#xA; (&#xA; select Student_ID, Acad_Yr, Club_Code, Appointment, Appointment_Desc &#xA; from DW_STUDENT_CCA_CLUB_APPOINTMENT &#xA; where Qual_Type='DPFT'&#xA;UNION ALL&#xA;select Student_ID, Acad_Yr, Interest_Grp as CCA_Code, Appointment,&#xA; Appointment_Desc &#xA;from DW_IG_APPOINTMENT where Qual_Type='DPFT'&#xA;)CCA_App on lsd.Student_ID=CCA_App.Student_ID and lsd.Acad_Year=CCA_App.Acad_Yr&#xA;and lsd.CCA_Code=CCA_App.Club_Code&#xA;&#xA; )Main --completion Base&#xA;&#xA; ---Join with DW_PET_PROGRAMME&#xA;&#xA;LEFT JOIN (select  Prog_Code,Prog_Descr,School_Centre from dbo.DW_PET_PROGRAMME a1&#xA;where a1.Effective_Date in (select max(b1.Effective_Date) from dbo.DW_PET_PROGRAMME b1 where b1.Prog_Code=a1.PROG_CODE)) PT &#xA;ON MAIN.Prog=PT.Prog_Code &#xA;&#xA;---Join with DW_EXT_DEPARTMENT&#xA;LEFT JOIN DW_EXT_DEPARTMENT d on pt.School_Centre=d.Department&#xA;&#xA;---Join with DW_APPLICANT_DETAILS and DW_EXT_ENTRY_QUAL_TYPE&#xA;LEFT JOIN (SELECT DISTINCT App_Number,Entry_Qual  FROM DW_APPLICANT_DETAILS  WHERE Qual_Type='DPFT' ) AD ON Main.Applicatn_Number=AD.App_Number &#xA;LEFT JOIN DW_EXT_ENTRY_QUAL_TYPE EQT ON EQT.Entry_Qual=AD.Entry_Qual&#xA;&#xA;---Join with DW_EXT_IPPT_RESULTS&#xA; LEFT JOIN DW_EXT_IPPT_RESULTS IIPT1 ON IIPT1.Student_ID=Main.Student_ID &#xA;&#xA; ---Join with DW_APPOINTMENT_RANKING&#xA;LEFT JOIN (select Appointment_Grp,CCA_Appointment,ROW_NUMBER() over (partition by CCA_Appointment&#xA;order by Appointment_Ranking) as ROW_NUM ,Appointment_Ranking&#xA;from DW_APPOINTMENT_RANKING) AR on Main.Appointment_Desc=AR.CCA_Appointment and AR.ROW_NUM=1&#xA;LEFT JOIN DW_STUDENT_DETAILS_BY_ACAD_TERM sdat on Main.Acad_Year=sdat.Acad_Year and Main.Semester=sdat.Semester&#xA;and Main.Student_ID = sdat.Student_ID and Main.Prog=sdat.Prog&#xA;&#xA;&#xA;update a&#xA;SET a.CCA_Appointment='Member'&#xA;from dbo.TMP_DM_OSG_PET_CCA a&#xA;where a.CCA_Membership_Status='Member' and CCA_Appointment IS NULL --and CCA_Appointment IS NULL&#xA;&#xA;&#xA;update a&#xA;SET a.CCA_Appointment_cumulative='Not Member'&#xA;,a.CCA_Appointment_Group_cumulative='Not Member'&#xA;from dbo.TMP_DM_OSG_PET_CCA a&#xA;where a.CCA_Membership_Status_cumulative='Not Member'&#xA;&#xA;&#xA;&#xA;&#xA;UPDATE a&#xA;SET a.CCA_Appointment_cumulative=b.CCA_Appointment&#xA;,a.CCA_Appointment_Group_cumulative=b.CCA_Appointment_Group&#xA;FROM  TMP_DM_OSG_PET_CCA a&#xA;&#xA;LEFT JOIN(&#xA;&#xA;Select MAin.CCA_Appointment,MAIN.CCA_Appointment_Group,MAIN.Academic_Year,main.Semester,MAIN.CCA,MAIN.Student_ID from &#xA;(&#xA;Select distinct a.student_ID,Semester,a.CCA,Academic_Year,a.Semester_Begin_Date,b.CCA_Appointment,b.CCA_Appointment_Group,ar.CCA_Appointment as AR_CCA,ar.Appointment_Grp,&#xA;ar.Appointment_Ranking,ROW_NUMBER() over( Partition BY a.student_ID,Semester,a.CCA,Academic_Year order by  ar.Appointment_Ranking) ROW_NUM&#xA; from TMP_DM_OSG_PET_CCA a&#xA; INNER JOIN &#xA; (Select Student_id,Semester_Begin_Date,CCA_Appointment,CCA_Appointment_Group,CCA&#xA; from TMP_DM_OSG_PET_CCA) b ON a.Student_ID=b.Student_ID and a.Semester_Begin_Date&gt;=b.Semester_Begin_Date and a.CCA=b.CCA&#xA;-- and   b.CCA_Appointment&lt;&gt;'Not Member' and b.CCA_Appointment_Group&lt;&gt;'Not Member'&#xA;LEFT JOIN DW_APPOINTMENT_RANKING AR on AR.CCA_Appointment=b.CCA_Appointment&#xA;)MAIN&#xA;&#xA; where ROW_NUM=1 )b on a.Student_ID=b.Student_ID and a.CCA=b.CCA and a.Semester=b.Semester and a.Academic_Year=b.Academic_Year&#xA;  where a.CCA_Membership_Status_cumulative&lt;&gt;'Not Member' &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;-----------------------------&#xA;&#xA;&#xA;------------------------------------------------------&#xA;----------------------------------IPPT_Award------------------&#xA;--GOLD &gt; SILVER &gt; PASS &gt; FAIL &gt; DQ &gt; DNF&#xA;create table #IPPT_Award&#xA;(&#xA;IPPT_result varchar(20),&#xA;Ranking INT&#xA;&#xA;)&#xA;INSERT INTO #IPPT_Award&#xA;&#xA;SELECT 'GOLD',1&#xA;union&#xA;SELECT 'SILVER',2&#xA;union&#xA;SELECT 'PASS',3&#xA;union&#xA;SELECT 'FAIL',4&#xA;union&#xA;SELECT 'DQ',5&#xA;union&#xA;SELECT 'DNF',6&#xA;&#xA;Update a&#xA;SET a.IPPT_Grade=b.IPPT_Award&#xA;from dbo.TMP_DM_OSG_PET_CCA a&#xA;LEFT JOIN(&#xA;Select ISNULL(IPPT_Award,'NA')AS IPPT_Award ,Year_Of_Study,Student_ID from(&#xA;select IPPT_Award,Ranking,Year_Of_Study,Student_ID ,ROW_NUMBER() over (partition by Year_Of_Study,Student_ID&#xA;order by Ranking)row_num&#xA;from  DW_EXT_IPPT_RESULTS a&#xA;LEFT JOIN (&#xA;select IPPT_result,Ranking from #IPPT_Award)b on a.IPPT_Award=b.IPPT_result collate SQL_Latin1_General_CP1_CI_AS&#xA;--where  Student_ID='18019845'&#xA;)a&#xA;where a.row_num=1 and Year_Of_Study=1&#xA;)b ON a.Student_ID=b.Student_ID and a.Year_Of_Study=b.Year_Of_Study&#xA;where a.Year_of_Study=1&#xA;&#xA;--------------------------IPPT_Award_For_Year_Of_Study(=3)-----------&#xA;&#xA;Update a&#xA;SET a.IPPT_Grade=b.Grade&#xA;from dbo.TMP_DM_OSG_PET_CCA a&#xA;LEFT JOIN(&#xA;Select ISNULL(Grade,'NA') as Grade,Year_Of_Study,Student_ID from(&#xA;&#xA;select Grade,Ranking,Year_Of_Study,Student_ID ,ROW_NUMBER() over (partition by Year_Of_Study,Student_ID&#xA;order by Ranking)row_num&#xA;from  DW_EXT_IPPT_RESULTS a&#xA;LEFT JOIN (&#xA;select IPPT_result,Ranking from #IPPT_Award)b on a.IPPT_Award=b.IPPT_result collate SQL_Latin1_General_CP1_CI_AS&#xA;--where  Student_ID='18019845'&#xA;)a&#xA;where a.row_num=1 and Year_Of_Study=3&#xA;)b ON a.Student_ID=b.Student_ID and a.Year_Of_Study=b.Year_Of_Study&#xA;where a.Year_of_Study=3&#xA;&#xA;drop table #IPPT_Award&#xA;&#xA;update TMP_DM_OSG_PET_CCA&#xA;set IPPT_Grade='NA'&#xA;where IPPT_Grade IS NULL&#xA;&#xA;&#xA;&#xA;-------------------Update_Internship_Status---------------&#xA;UPDATE a&#xA;SET a.Internship_Status='Local &amp; Overseas'&#xA;from TMP_DM_OSG_PET_CCA a&#xA;INNER JOIN (&#xA;Select Acad_Yr,Student_ID from (&#xA;select  distinct Acad_Yr,Student_ID,[Type] from DW_EXT_SOT&#xA;where --Student_ID='102176' and &#xA;[Type] in ('OIIP','IIP')&#xA;&#xA;)a&#xA;group by Acad_Yr,Student_ID&#xA;having count(1)&gt;1&#xA;)b on a.Student_ID=b.Student_ID and RIGHT(a.Academic_Year,4)=b.Acad_Yr&#xA;&#xA;UPDATE a&#xA;SET a.Internship_Status=b.Internship_Status&#xA;from TMP_DM_OSG_PET_CCA a&#xA;LEFT JOIN (&#xA;&#xA;select  CASE WHEN [Type] in ('IIP') THEN 'Local'&#xA; WHEN [Type] in ('OIIP') THEN 'Overseas' ELSE 'NA' END  AS  Internship_Status ,Student_ID,Acad_Yr  &#xA;from DW_EXT_SOT&#xA;where  &#xA;[Type] in ('IIP','OIIP')) b on a.Student_ID=b.Student_ID and RIGHT(a.Academic_Year,4)=b.Acad_Yr&#xA;WHERE a.Internship_Status IS NULL&#xA;&#xA;&#xA;Update a&#xA;SET a.Internship_Status='NA'&#xA;from TMP_DM_OSG_PET_CCA a&#xA;where (Internship_Status IS NULL OR Internship_Status not in ('Overseas','Local &amp; Overseas','Local'))&#xA;&#xA;------------------------------------------&#xA;UPDATE a&#xA;SET a.IPPT_Attempt_Status= b.IPPT_Attempt_Status&#xA;from  TMP_DM_OSG_PET_CCA a&#xA;LEFT JOIN &#xA;(Select b.IPPT_Attempt_Status,b.Student_ID,b.Academic_Year,b.CCA,b.Semester&#xA;from (&#xA;select &#xA;CASE &#xA;WHEN a.Year_of_Study=2 THEN 'NA'&#xA;WHEN b.Student_ID IS NOT NULL  then 'Attempted'&#xA; ELSE 'Not Attempted' End AS IPPT_Attempt_Status,&#xA;a.Student_ID,a.Academic_Year,a.CCA,a.Semester&#xA;from TMP_DM_OSG_PET_CCA a&#xA;LEFT JOIN  DW_EXT_IPPT_RESULTS b on a.Student_ID=b.Student_ID --and a.Year_of_Study=b.Year_Of_Study&#xA;)b)b on a.Student_ID=b.Student_ID and a.Academic_Year=b.Academic_Year and a.CCA=b.CCA&#xA;and a.Semester=b.Semester&#xA;&#xA;&#xA;-------------------------------Financial_Assistance_Status---------------&#xA;&#xA;Update a&#xA;SET a.Financial_Assistance_Status=b.Financial_Assistance_Status&#xA;from TMP_DM_OSG_PET_CCA a&#xA;&#xA;LEFT JOIN (&#xA;select CASE WHEN b.Student_ID IS NULL THEN 'Non-FAS' ELSE 'FAS' END as  Financial_Assistance_Status,&#xA;a.Academic_Year,a.CCA,a.Semester,a.Student_ID&#xA; from TMP_DM_OSG_PET_CCA a&#xA;LEFT JOIN (Select * from DW_SCHOLARSHIP_BURSARY_STATUS where Qual_Type='DPFT' and App_Status='DIS')b&#xA;on a.Student_ID=b.Student_ID and a.Programme_Code=b.Prog and b.Awarded_Date between a.Semester_Begin_Date and a.Semester_End_Date&#xA;&#xA;)b on a.Student_ID=b.Student_ID and a.Academic_Year=b.Academic_Year and a.CCA=b.CCA&#xA;and a.Semester=b.Semester&#xA;&#xA;&#xA;&#xA;DELETE FROM dbo.DM_OSG_PET_CCA&#xA;INSERT INTO dbo.DM_OSG_PET_CCA&#xA;&#xA;SELECT  [Student_ID]&#xA;      ,[Race_Mapping_CMIO]&#xA;      ,[Gender]&#xA;      ,[Department]&#xA;      ,[Department_Descr]&#xA;      ,[Programme_Code]&#xA;      ,[Programme]&#xA;      ,[Entry_Qualification]&#xA;      ,[Academic_Year]&#xA;      ,[Semester]&#xA;      ,[Program_Status]&#xA;      ,[Program_Status_Descr]&#xA;      ,[Year_of_Study]&#xA;      ,[Residency_Type]&#xA;      ,[CCA_Code]&#xA;      ,[CCA]&#xA;      ,[CCA_Membership_Status]&#xA;      ,[CCA_Membership_Status_cumulative]&#xA;      ,[CCA_Appointment]&#xA;      ,[CCA_Appointment_Group]&#xA;      ,[CCA_Appointment_Cumulative]&#xA;      ,[CCA_Appointment_Group_Cumulative]&#xA;      ,[Parent_Club]&#xA;      ,[Term_cGPA]&#xA;      ,[Term_cGPA_Group]&#xA;      ,[Internship_Status]&#xA;      ,[Employment_Status]&#xA;      ,[Latest_Marital_Status]&#xA;      ,[Financial_Assistance_Status]&#xA;      ,[IPPT_Grade]&#xA;      ,[IPPT_Attempt_Status]&#xA;      ,[CREATED_ON]&#xA;      ,[MODIFIED_ON]&#xA;      &#xA;  FROM [dbo].[TMP_DM_OSG_PET_CCA]&#xA;&#xA;&#xA;&#xA;  COMMIT TRANSACTION&#xA;END TRY&#xA;&#xA;BEGIN CATCH&#xA;ROLLBACK TRANSACTION&#xA;&#xA;  INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)&#xA;  SELECT   &#xA;         CAST(@jobstatusid as int) as JOB_STATUS_ID&#xA;        ,ERROR_MESSAGE() AS ErrorMessage&#xA;&#x9;&#x9;,getdate()  as created_on&#xA;END CATCH  &#xA;GO&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SQL_DM_Load">
      <DTS:VariableValue
        DTS:DataType="8">--select Student_ID,Semester,CCA_Code,Acad_Year from (

BEGIN TRANSACTION
BEGIN TRY
--------------------------------------
DECLARE @jobstatusid varchar(10)
select @jobstatusid=0

Truncate table dbo.TMP_DM_OSG_PET_CCA
INSERT INTO dbo.TMP_DM_OSG_PET_CCA

Select 
Distinct 
Main.Student_ID
,Main.Race_Mapping_CMIO
,Main.Gender
,ISNULL(PT.School_Centre,'NA') AS Department
,d.Descr as Department_Descr
,Main.Prog
,Main.Prog +' - '+ pt.Prog_Descr as Programme
,EQT.Entry_Qual_Type as Entry_Qualification
,'AY'+Main.Acad_Year as Acad_Year
,'S'+Main.Semester as Semester
,Main.Student_Status
,Main.Student_Status_Descr
,Main.Year_of_Study
,Main.Residency_Type
,Main.CCA_Code
,ISNULL(MAin.CCA,'NA') as CCA
,Main.CCA_Membership_Status
,Main.CCA_Membership_Status_Cumulative
,CASE WHEN Main.CCA_Membership_Status='Not Member' THEN 'Not Member'ELSE Main.Appointment_Desc END as CCA_Appointment --need to write update script
, CASE WHEN Main.CCA_Membership_Status='Not Member'THEN 'Not Member'
WHEN AR.Appointment_Grp IS NULL and Main.CCA_Membership_Status='Member' THEN 'Member'
ELSE  AR.Appointment_Grp END  as  CCA_Appointment_Group
,NULL as CCA_Appointment_Cumulative  ---need to write update script
,NULL CCA_Appointment_Group_Cumulative -----need to write update script
,Main.Parent_Club_Code
,sdat.Term_cGPA
,CASE			
			WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=0    AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;0.5    THEN '0 to &lt; 0.5'
			WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=0.5  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt; 1.0 AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '0.5 to &lt; 1'
			WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=1.0  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;1.5   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '1 to &lt; 1.5'
			WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=1.5  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;2.0   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '1.5 to &lt; 2'
			WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=2.0  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;2.5   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '2 to &lt; 2.5'
			WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=2.5  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;3.0   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '2.5 to &lt; 3'
				WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=3.0  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;3.5   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '3 to &lt; 3.5'
					WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=3.5  AND CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &lt;3.8   AND sdat.Term_cGPA IS NOT NULL AND LEN(sdat.Term_cGPA)&gt;0 AND cast(sdat.Term_cGPA as varchar)&lt;&gt; '' THEN '3.5 &lt; 3.8'
			WHEN CONVERT (NUMERIC(10,4),sdat.Term_cGPA) &gt;=3.8  AND LEN(sdat.Term_cGPA)&gt;0 AND sdat.Term_cGPA IS NOT NULL AND cast(sdat.Term_cGPA as varchar)&lt;&gt; ''  THEN '3.8 to &lt;= 4'
			--ELSE '0'
			ELSE 'N.A.'
			END AS   Term_cGPA_Group --need write case statement

,NULL as Internship_Status
,NULL as Employment_Status--To be confirmed later
,Main.Marital_Status
,NULL as Financial_Assistance_Status ----To be confirmed later

,NULL as IPPT_Grade
,CASE WHEN IIPT1.Student_ID IS NULL THEN 'Not Attempted' ELSE 'Attempted' END as IPPT_Attempt_Status
,GETDATE()
,GETDATE()
,Main.Semester_Begin_Date
,Main.Semester_End_Date
From (

SELECT
lsd.Student_ID, lsd.Qual_Type, lsd.Admit_Term, lsd.Prog, lsd.Reqmt_Term, lsd.Acad_Year, lsd.Semester, lsd.Year_of_Study, 
 lsd.Student_Status, lsd.Semester_Begin_Date, lsd.Semester_End_Date,lsd.CCA_Code,lsd.CCA_Membership_Status,lsd.CCA_Membership_Status_Cumulative
 ,lsd.Parent_Club_Code, lsd.Student_Status_Descr,lsd.Gender,lsd.Marital_Status,lsd.Race_Mapping_CMIO,lsd.Residency_Type,lsd.Term_cGPA,lsd.Applicatn_Number
 ,CCA_App.Appointment,CCA_App.Appointment_Desc,lsd.CCA

 from(

SELECT  lsd.Student_ID, lsd.Qual_Type, lsd.Admit_Term, lsd.Prog, lsd.Reqmt_Term, lsd.Acad_Year, lsd.Semester, lsd.Year_of_Study, 
  lsd.Semester_Begin_Date, lsd.Semester_End_Date, -- need to include all columns from Latest_Student_Details
 ISNULL(cca.CCA_Code,'NA') AS CCA_Code,
 CASE 
  WHEN cca.CCA_Code IS NULL THEN 'Not Member'
  WHEN 
   lsd.Semester_Begin_Date BETWEEN cca.Effective_Begin_Date AND cca.Effective_End_Date
   OR lsd.Semester_End_Date BETWEEN cca.Effective_Begin_Date AND cca.Effective_End_Date
   OR (cca.Effective_Begin_Date BETWEEN lsd.Semester_Begin_Date AND lsd.Semester_End_Date
   AND cca.Effective_End_Date BETWEEN lsd.Semester_Begin_Date AND lsd.Semester_End_Date) THEN 'Member' 
  ELSE 'Not Member'
 END AS CCA_Membership_Status,
 CASE 
  WHEN cca.CCA_Code IS NULL THEN 'Not Member'
  ELSE 'Member'
 END AS CCA_Membership_Status_Cumulative,
 cca. Parent_Club_Code,
 lsd.Student_Status_Descr,lsd.Gender,lsd.Marital_Status,lsd.Race_Mapping_CMIO,lsd.Residency_Type,lsd.Term_cGPA
 ,lsd.Student_Status,lsd.Applicatn_Number
 ,cca.CCA
 
FROM (


SELECT b.Student_ID, b.Qual_Type, b.Admit_Term, b.Reqmt_Term, b.Acad_Year, b.Semester, b.Year_of_Study,
   b.Semester_Begin_Date, b.Semester_End_Date ,b.Prog--,b.Prog_Action
  ,b.Student_Status,b.Student_Status_Descr,a.Applicatn_Number,a.Ethnic_Group,a.Gender
  ,a.Marital_Status,b.Race_Mapping_CMIO,b.Residency_Type,b.Term_cGPA

  from (


SELECT a.Student_ID, a.Qual_Type, a.Admit_Term,  a.Reqmt_Term, a.Acad_Year, a.Semester, a.Year_of_Study,
  a.Semester_Begin_Date, a.Semester_End_Date ,a.Prog--,a.Prog_Action
  ,a.Student_Status,a.Student_Status_Descr,a.Race_Mapping_CMIO,a.Term_cGPA,a.Residency_Type --,a.Prog

  from (

SELECT Student_ID, Qual_Type, Admit_Term, Prog, Reqmt_Term, Acad_Year, Semester, Year_of_Study, 
	Student_Status, Student_Status_Descr, Semester_Begin_Date, Semester_End_Date,Race_Mapping_CMIO,Term_cGPA,d.Residency_Type
	
FROM (
	SELECT d.Student_ID, d.Qual_Type, d.Admit_Term, d.Prog, d.Reqmt_Term, d.Acad_Year, d.Semester, d.Year_of_Study,
		d.Student_Status, d.Student_Status_Descr, t.Semester_Begin_Date, t.Semester_End_Date, 
		ROW_NUMBER() OVER (
		PARTITION BY d.Student_ID, d.Qual_Type, d.Acad_Year, d.Semester
		ORDER BY t.Term_End_Date DESC, d.Admit_Term DESC, d.Prog DESC) rownum,d.Race_Mapping_CMIO,d.Term_cGPA,d.Residency_Type
	FROM DW_STUDENT_DETAILS_BY_ACAD_TERM d
	INNER JOIN DW_TERM_SETUP t
	ON d.Qual_Type = t.Qual_Type
		AND d.Term = t.Term 
	WHERE d.Qual_Type = 'DPFT') d
WHERE d.rownum = 1

)a---Student_With_All_Semesters --324482

--LEFT JOIN 
--(SELECT  Student_Id, Admit_Term, Prog as Latest_Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status as Latest_Student_Status,
-- Student_Status_Descr as Latest_Student_Status_Descr, Prog_Action as Latest_Prog_Action
--  FROM (
--   SELECT Student_Id, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Student_Status, Student_Status_Descr, Prog_Action,
--   ROW_NUMBER() OVER (
--    PARTITION BY Student_Id
--    ORDER BY Effective_Date DESC, Effective_Seq DESC) rownum
--   FROM DW_STUDENT_MOVEMENT
--   WHERE Qual_Type = 'DPFT') sm
-- WHERE sm.rownum = 1 
-- )b --Student_Movement_Latest_Prog_Status
-- ON a.Student_ID=b.Student_Id --and a.Admit_Term=b.Admit_Term --and a.Prog=b.Latest_Prog
 
  )b --Student_With_All_Acad_Term_and_Latest_Prog_Status

LEFT JOIN (Select Distinct Student_ID, Admit_Term, Applicatn_Number, Gender, Ethnic_Group, Marital_Status--,Residency_Type 
,ROW_NUMBER() over (partition by Student_ID, Admit_Term, Applicatn_Number, Gender, Ethnic_Group order by Effective_Date desc) as RN
from DW_STUDENT_DETAILS )a
ON a.Student_ID=b.Student_ID and a.Admit_Term=b.Admit_Term and RN=1) lsd ---Join with DW_STUDENT_DETAILS to get Gender, Ethnic_Group, Marital_Status

LEFT JOIN ( SELECT Qual_Type, Parent_Club_Code, Interest_Grp AS CCA_Code, Student_ID, Effective_Begin_Date, ISNULL(Effective_End_Date,CAST('9999-12-31' AS DATE)) AS Effective_End_Date 
,Interest_Grp_Desc as CCA
 FROM (
  SELECT a.Qual_Type, a.Parent_Club_Code, a.Interest_Grp, a.Student_ID, a.Effective_Date AS Effective_Begin_Date,
   DATEADD(day,-1,i.Effective_Date) AS Effective_End_Date,
   ROW_NUMBER() OVER (
   PARTITION BY a.Student_ID, a.Qual_Type, a.Interest_Grp
   ORDER BY i.Effective_Date ASC, i.Effective_Seq ASC) rownum,a.Interest_Grp_Desc
  FROM (
   SELECT Qual_Type, Parent_Club_Code, Interest_Grp, Student_ID, Effective_Date, Effective_Seq,Interest_Grp_Desc
   FROM DW_IG_MEMBERSHIP 
   WHERE Qual_Type = 'DPFT'
   AND Member_Status = 'A') a
  LEFT JOIN (
   SELECT Qual_Type, Parent_Club_Code, Interest_Grp, Student_ID, Effective_Date, Effective_Seq,Interest_Grp_Desc
   FROM DW_IG_MEMBERSHIP 
   WHERE Qual_Type = 'DPFT'
   AND Member_Status &lt;&gt; 'A') i
  ON a.Student_ID = i.Student_ID
   AND a.Qual_Type = i.Qual_Type
   AND a.Interest_Grp = i.Interest_Grp
   AND (a.Effective_Date &lt; i.Effective_Date
   OR (a.Effective_Date = i.Effective_Date AND a.Effective_Seq &lt; i.Effective_Seq))) c
 WHERE rownum = 1
 UNION ALL
 SELECT Qual_Type, Club_Code AS Parent_Club_Code, Club_Code AS CCA_Code, Student_ID, Effective_Begin_Date, ISNULL(Effective_End_Date,CAST('9999-12-31' AS DATE)) AS Effective_End_Date
 ,Club_Code_Desc as CCA
 FROM (
  SELECT a.Qual_Type, a.Club_Code, a.Student_ID, a.Effective_Date AS Effective_Begin_Date,
   DATEADD(day,-1,i.Effective_Date) AS Effective_End_Date,
   ROW_NUMBER() OVER (
   PARTITION BY a.Student_ID, a.Qual_Type, a.Club_Code
   ORDER BY i.Effective_Date ASC, i.Effective_Seq ASC) rownum,a.Club_Code_Desc
  FROM (
   SELECT Qual_Type, Club_Code, Student_ID, Effective_Date, Effective_Seq,Club_Code_Desc
   FROM DW_STUDENT_CCA_CLUB_MEMBERSHIP 
   WHERE Qual_Type = 'DPFT'
   AND Status = 'A') a
  LEFT JOIN (
   SELECT Qual_Type, Club_Code, Student_ID, Effective_Date, Effective_Seq,Club_Code_Desc
   FROM DW_STUDENT_CCA_CLUB_MEMBERSHIP 
   WHERE Qual_Type = 'DPFT'
   AND Status &lt;&gt; 'A') i
  ON a.Student_ID = i.Student_ID
   AND a.Qual_Type = i.Qual_Type
   AND a.Club_Code = i.Club_Code
   AND (a.Effective_Date &lt; i.Effective_Date
   OR (a.Effective_Date = i.Effective_Date AND a.Effective_Seq &lt; i.Effective_Seq))) c
 WHERE rownum = 1
 ) cca
ON lsd.Student_ID = cca.Student_ID
 AND lsd.Qual_Type = cca.Qual_Type
 
 AND cca.Effective_Begin_Date &lt;= lsd.Semester_End_Date

 )lsd  --Latest_Student_Details_w_CCA_History
 
 LEFT JOIN 

 (
 select Student_ID, Acad_Yr, Club_Code, Appointment, Appointment_Desc 
 from DW_STUDENT_CCA_CLUB_APPOINTMENT 
 where Qual_Type='DPFT'
UNION ALL
select Student_ID, Acad_Yr, Interest_Grp as CCA_Code, Appointment,
 Appointment_Desc 
from DW_IG_APPOINTMENT where Qual_Type='DPFT'
)CCA_App on lsd.Student_ID=CCA_App.Student_ID and lsd.Acad_Year=CCA_App.Acad_Yr
and lsd.CCA_Code=CCA_App.Club_Code

 )Main --completion Base

 ---Join with DW_PET_PROGRAMME

LEFT JOIN (select  Prog_Code,Prog_Descr,School_Centre from dbo.DW_PET_PROGRAMME a1
where a1.Effective_Date in (select max(b1.Effective_Date) from dbo.DW_PET_PROGRAMME b1 where b1.Prog_Code=a1.PROG_CODE)) PT 
ON MAIN.Prog=PT.Prog_Code 

---Join with DW_EXT_DEPARTMENT
LEFT JOIN DW_EXT_DEPARTMENT d on pt.School_Centre=d.Department

---Join with DW_APPLICANT_DETAILS and DW_EXT_ENTRY_QUAL_TYPE
LEFT JOIN (SELECT DISTINCT App_Number,Entry_Qual  FROM DW_APPLICANT_DETAILS  WHERE Qual_Type='DPFT' ) AD ON Main.Applicatn_Number=AD.App_Number 
LEFT JOIN DW_EXT_ENTRY_QUAL_TYPE EQT ON EQT.Entry_Qual=AD.Entry_Qual

---Join with DW_EXT_IPPT_RESULTS
 LEFT JOIN DW_EXT_IPPT_RESULTS IIPT1 ON IIPT1.Student_ID=Main.Student_ID 

 ---Join with DW_APPOINTMENT_RANKING
LEFT JOIN (select Appointment_Grp,CCA_Appointment,ROW_NUMBER() over (partition by CCA_Appointment
order by Appointment_Ranking) as ROW_NUM ,Appointment_Ranking
from DW_APPOINTMENT_RANKING) AR on Main.Appointment_Desc=AR.CCA_Appointment and AR.ROW_NUM=1
LEFT JOIN DW_STUDENT_DETAILS_BY_ACAD_TERM sdat on Main.Acad_Year=sdat.Acad_Year and Main.Semester=sdat.Semester
and Main.Student_ID = sdat.Student_ID and Main.Prog=sdat.Prog


update a
SET a.CCA_Appointment='Member'
from dbo.TMP_DM_OSG_PET_CCA a
where a.CCA_Membership_Status='Member' and CCA_Appointment IS NULL --and CCA_Appointment IS NULL


update a
SET a.CCA_Appointment_cumulative='Not Member'
,a.CCA_Appointment_Group_cumulative='Not Member'
from dbo.TMP_DM_OSG_PET_CCA a
where a.CCA_Membership_Status_cumulative='Not Member'




UPDATE a
SET a.CCA_Appointment_cumulative=b.CCA_Appointment
,a.CCA_Appointment_Group_cumulative=b.CCA_Appointment_Group
FROM  TMP_DM_OSG_PET_CCA a

LEFT JOIN(

Select MAin.CCA_Appointment,MAIN.CCA_Appointment_Group,MAIN.Academic_Year,main.Semester,MAIN.CCA,MAIN.Student_ID from 
(
Select distinct a.student_ID,Semester,a.CCA,Academic_Year,a.Semester_Begin_Date,b.CCA_Appointment,b.CCA_Appointment_Group,ar.CCA_Appointment as AR_CCA,ar.Appointment_Grp,
ar.Appointment_Ranking,ROW_NUMBER() over( Partition BY a.student_ID,Semester,a.CCA,Academic_Year order by  ar.Appointment_Ranking) ROW_NUM
 from TMP_DM_OSG_PET_CCA a
 INNER JOIN 
 (Select Student_id,Semester_Begin_Date,CCA_Appointment,CCA_Appointment_Group,CCA
 from TMP_DM_OSG_PET_CCA) b ON a.Student_ID=b.Student_ID and a.Semester_Begin_Date&gt;=b.Semester_Begin_Date and a.CCA=b.CCA
-- and   b.CCA_Appointment&lt;&gt;'Not Member' and b.CCA_Appointment_Group&lt;&gt;'Not Member'
LEFT JOIN DW_APPOINTMENT_RANKING AR on AR.CCA_Appointment=b.CCA_Appointment
)MAIN

 where ROW_NUM=1 )b on a.Student_ID=b.Student_ID and a.CCA=b.CCA and a.Semester=b.Semester and a.Academic_Year=b.Academic_Year
  where a.CCA_Membership_Status_cumulative&lt;&gt;'Not Member' 






-----------------------------


------------------------------------------------------
----------------------------------IPPT_Award------------------
--GOLD &gt; SILVER &gt; PASS &gt; FAIL &gt; DQ &gt; DNF
create table #IPPT_Award
(
IPPT_result varchar(20),
Ranking INT

)
INSERT INTO #IPPT_Award

SELECT 'GOLD',1
union
SELECT 'SILVER',2
union
SELECT 'PASS',3
union
SELECT 'FAIL',4
union
SELECT 'DQ',5
union
SELECT 'DNF',6

Update a
SET a.IPPT_Grade=b.IPPT_Award
from dbo.TMP_DM_OSG_PET_CCA a
LEFT JOIN(
Select ISNULL(IPPT_Award,'NA')AS IPPT_Award ,Year_Of_Study,Student_ID from(
select IPPT_Award,Ranking,Year_Of_Study,Student_ID ,ROW_NUMBER() over (partition by Year_Of_Study,Student_ID
order by Ranking)row_num
from  DW_EXT_IPPT_RESULTS a
LEFT JOIN (
select IPPT_result,Ranking from #IPPT_Award)b on a.IPPT_Award=b.IPPT_result collate SQL_Latin1_General_CP1_CI_AS
--where  Student_ID='18019845'
)a
where a.row_num=1 and Year_Of_Study=1
)b ON a.Student_ID=b.Student_ID and a.Year_Of_Study=b.Year_Of_Study
where a.Year_of_Study=1

--------------------------IPPT_Award_For_Year_Of_Study(=3)-----------

Update a
SET a.IPPT_Grade=b.Grade
from dbo.TMP_DM_OSG_PET_CCA a
LEFT JOIN(
Select ISNULL(Grade,'NA') as Grade,Year_Of_Study,Student_ID from(

select Grade,Ranking,Year_Of_Study,Student_ID ,ROW_NUMBER() over (partition by Year_Of_Study,Student_ID
order by Ranking)row_num
from  DW_EXT_IPPT_RESULTS a
LEFT JOIN (
select IPPT_result,Ranking from #IPPT_Award)b on a.IPPT_Award=b.IPPT_result collate SQL_Latin1_General_CP1_CI_AS
--where  Student_ID='18019845'
)a
where a.row_num=1 and Year_Of_Study=3
)b ON a.Student_ID=b.Student_ID and a.Year_Of_Study=b.Year_Of_Study
where a.Year_of_Study=3

drop table #IPPT_Award

update TMP_DM_OSG_PET_CCA
set IPPT_Grade='NA'
where IPPT_Grade IS NULL



-------------------Update_Internship_Status---------------
UPDATE a
SET a.Internship_Status='Local &amp; Overseas'
from TMP_DM_OSG_PET_CCA a
INNER JOIN (
Select Acad_Yr,Student_ID from (
select  distinct Acad_Yr,Student_ID,[Type] from DW_EXT_SOT
where --Student_ID='102176' and 
[Type] in ('OIIP','IIP')

)a
group by Acad_Yr,Student_ID
having count(1)&gt;1
)b on a.Student_ID=b.Student_ID and RIGHT(a.Academic_Year,4)=b.Acad_Yr

UPDATE a
SET a.Internship_Status=b.Internship_Status
from TMP_DM_OSG_PET_CCA a
LEFT JOIN (

select  CASE WHEN [Type] in ('IIP') THEN 'Local'
 WHEN [Type] in ('OIIP') THEN 'Overseas' ELSE 'NA' END  AS  Internship_Status ,Student_ID,Acad_Yr  
from DW_EXT_SOT
where  
[Type] in ('IIP','OIIP')) b on a.Student_ID=b.Student_ID and RIGHT(a.Academic_Year,4)=b.Acad_Yr
WHERE a.Internship_Status IS NULL


Update a
SET a.Internship_Status='NA'
from TMP_DM_OSG_PET_CCA a
where (Internship_Status IS NULL OR Internship_Status not in ('Overseas','Local &amp; Overseas','Local'))

------------------------------------------
UPDATE a
SET a.IPPT_Attempt_Status= b.IPPT_Attempt_Status
from  TMP_DM_OSG_PET_CCA a
LEFT JOIN 
(Select b.IPPT_Attempt_Status,b.Student_ID,b.Academic_Year,b.CCA,b.Semester
from (
select 
CASE 
WHEN a.Year_of_Study=2 THEN 'NA'
WHEN b.Student_ID IS NOT NULL  then 'Attempted'
 ELSE 'Not Attempted' End AS IPPT_Attempt_Status,
a.Student_ID,a.Academic_Year,a.CCA,a.Semester
from TMP_DM_OSG_PET_CCA a
LEFT JOIN  DW_EXT_IPPT_RESULTS b on a.Student_ID=b.Student_ID --and a.Year_of_Study=b.Year_Of_Study
)b)b on a.Student_ID=b.Student_ID and a.Academic_Year=b.Academic_Year and a.CCA=b.CCA
and a.Semester=b.Semester


-------------------------------Financial_Assistance_Status---------------

Update a
SET a.Financial_Assistance_Status=b.Financial_Assistance_Status
from TMP_DM_OSG_PET_CCA a

LEFT JOIN (
select CASE WHEN b.Student_ID IS NULL THEN 'Non-FAS' ELSE 'FAS' END as  Financial_Assistance_Status,
a.Academic_Year,a.CCA,a.Semester,a.Student_ID
 from TMP_DM_OSG_PET_CCA a
LEFT JOIN (Select * from DW_SCHOLARSHIP_BURSARY_STATUS where Qual_Type='DPFT' and App_Status='DIS')b
on a.Student_ID=b.Student_ID and a.Programme_Code=b.Prog and b.Awarded_Date between a.Semester_Begin_Date and a.Semester_End_Date

)b on a.Student_ID=b.Student_ID and a.Academic_Year=b.Academic_Year and a.CCA=b.CCA
and a.Semester=b.Semester



DELETE FROM dbo.DM_OSG_PET_CCA
INSERT INTO dbo.DM_OSG_PET_CCA

SELECT  [Student_ID]
      ,[Race_Mapping_CMIO]
      ,[Gender]
      ,[Department]
      ,[Department_Descr]
      ,[Programme_Code]
      ,[Programme]
      ,[Entry_Qualification]
      ,[Academic_Year]
      ,[Semester]
      ,[Program_Status]
      ,[Program_Status_Descr]
      ,[Year_of_Study]
      ,[Residency_Type]
      ,[CCA_Code]
      ,[CCA]
      ,[CCA_Membership_Status]
      ,[CCA_Membership_Status_cumulative]
      ,[CCA_Appointment]
      ,[CCA_Appointment_Group]
      ,[CCA_Appointment_Cumulative]
      ,[CCA_Appointment_Group_Cumulative]
      ,[Parent_Club]
      ,[Term_cGPA]
      ,[Term_cGPA_Group]
      ,[Internship_Status]
      ,[Employment_Status]
      ,[Latest_Marital_Status]
      ,[Financial_Assistance_Status]
      ,[IPPT_Grade]
      ,[IPPT_Attempt_Status]
      ,[CREATED_ON]
      ,[MODIFIED_ON]
      
  FROM [dbo].[TMP_DM_OSG_PET_CCA]



  COMMIT TRANSACTION
END TRY

BEGIN CATCH
ROLLBACK TRANSACTION

  INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)
  SELECT   
         CAST(@jobstatusid as int) as JOB_STATUS_ID
        ,ERROR_MESSAGE() AS ErrorMessage
		,getdate()  as created_on
END CATCH  
GO</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{17EA6E99-7139-49B4-B61A-3B70DD47B42C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="STAGE">
      <DTS:VariableValue
        DTS:DataType="8">DM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E07838CA-AAFC-4144-8BDB-C6ABD0C3E93D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TgtTableName">
      <DTS:VariableValue
        DTS:DataType="8">DM_OSG_PET_CCA</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create ETL Job Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{22EC5584-4A31-4CEE-84A1-DDE44E18E45F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create ETL Job Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{C56FD071-0AED-4BEE-9C52-E8F59E009013}"
          SQLTask:SqlStatementSource="Exec [dbo].[usp_InsertETLJobLog] ?, ?, ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Job_name"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="1"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="2"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="3"
            SQLTask:DtsVariableName="User::TgtTableName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Error Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{AD2CC751-798F-4B8F-AF9B-EBB592BF4AA9}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Error Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{C56FD071-0AED-4BEE-9C52-E8F59E009013}"
          SQLTask:SqlStatementSource="UPDATE [dbo].[ETL_JOB_STATUS]&#xA;SET&#xA;ERROR_MSG = 'STG table is not completed',&#xA;JOB_STATUS ='Fail'&#xA;--PROCESSED_ON =getdate()&#xA;WHERE JOB_STATUS_ID=?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\JOB_STATUS_ID"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{EEB1D6A4-8F4D-4BD1-A562-E7823CB696FF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="JOB_STATUS_ID"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{C56FD071-0AED-4BEE-9C52-E8F59E009013}"
          SQLTask:SqlStatementSource="SELECT max([JOB_STATUS_ID])&#xA;      &#xA;  FROM [dbo].[ETL_JOB_STATUS] where [SOURCE_FILENAME]=? &#xA;---and convert(varchar(8),CREATED_ON,112)=convert--(varchar(8) ,getdate(),112)"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Into DM"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{34D5E570-729F-45C2-9BC4-5CF49D130A77}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Into DM"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{5033F2DA-7057-4ADB-826B-F5D08A4F6FF2}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::SQL_DM_Load" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Process_Date"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{7391A03B-81EF-4524-B0A3-A3FDCD9E0F7F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Process_Date"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{5033F2DA-7057-4ADB-826B-F5D08A4F6FF2}"
          SQLTask:SqlStatementSource="Select getdate()"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Process_date" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Process_date"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="135"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update Appointment and Appointment Group and Cummulative"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{DC4107DF-223E-4D0C-BC3F-4B2342E02E0E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update Appointment and Appointment Group and Cummulative"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{5033F2DA-7057-4ADB-826B-F5D08A4F6FF2}"
          SQLTask:SqlStatementSource="&#xA;-- Create NA-CCA for abnormal cases of CCA particpated outside student's RP terms&#xA;INSERT INTO [dbo].[DM_OSG_PET_CCA]&#xA;           ([Student_ID]&#xA;           ,[Race_Mapping_CMIO]&#xA;           ,[Gender]&#xA;           ,[Department]&#xA;           ,[Department_Descr]&#xA;           ,[Programme_Code]&#xA;           ,[Programme]&#xA;           ,[Entry_Qualification]&#xA;           ,[Academic_Year]&#xA;           ,[Semester]&#xA;           ,[Program_Status]&#xA;           ,[Program_Status_Descr]&#xA;           ,[Year_of_Study]&#xA;           ,[Residency_Type]&#xA;           ,[CCA_Code]&#xA;           ,[CCA]&#xA;           ,[CCA_Membership_Status]&#xA;           ,[CCA_Membership_Status_Cumulative]&#xA;           ,[CCA_Appointment]&#xA;           ,[CCA_Appointment_Group]&#xA;           ,[CCA_Appointment_Cumulative]&#xA;           ,[CCA_Appointment_Group_Cumulative]&#xA;           ,[Parent_Club]&#xA;           ,[Term_cGPA]&#xA;           ,[Term_cGPA_Group]&#xA;           ,[Internship_Status]&#xA;           ,[Employment_Status]&#xA;           ,[Latest_Marital_Status]&#xA;           ,[Financial_Assistance_Status]&#xA;           ,[IPPT_Grade]&#xA;           ,[IPPT_Attempt_Status]&#xA;           ,[CREATED_ON]&#xA;           ,[MODIFIED_ON])&#xA;SELECT DISTINCT&#xA;           osg.[Student_ID]&#xA;           ,[Race_Mapping_CMIO]&#xA;           ,[Gender]&#xA;           ,[Department]&#xA;           ,[Department_Descr]&#xA;           ,[Programme_Code]&#xA;           ,[Programme]&#xA;           ,[Entry_Qualification]&#xA;           ,[Academic_Year]&#xA;           ,[Semester]&#xA;           ,[Program_Status]&#xA;           ,[Program_Status_Descr]&#xA;           ,[Year_of_Study]&#xA;           ,[Residency_Type]&#xA;           ,'NA' AS [CCA_Code]&#xA;           ,'NA' AS [CCA]&#xA;           ,[CCA_Membership_Status]&#xA;           ,'Not Member' AS [CCA_Membership_Status_Cumulative]&#xA;           ,[CCA_Appointment]&#xA;           ,[CCA_Appointment_Group]&#xA;           ,[CCA_Appointment_Cumulative]&#xA;           ,[CCA_Appointment_Group_Cumulative]&#xA;           ,[Parent_Club]&#xA;           ,[Term_cGPA]&#xA;           ,[Term_cGPA_Group]&#xA;           ,[Internship_Status]&#xA;           ,[Employment_Status]&#xA;           ,[Latest_Marital_Status]&#xA;           ,[Financial_Assistance_Status]&#xA;           ,[IPPT_Grade]&#xA;           ,[IPPT_Attempt_Status]&#xA;           ,[CREATED_ON]&#xA;           ,[MODIFIED_ON]&#xA;FROM DM_OSG_PET_CCA osg&#xA;INNER JOIN (&#xA;&#x9;SELECT DISTINCT Student_ID, CCA_Code&#xA;&#x9;FROM DM_OSG_PET_CCA&#xA;&#x9;WHERE CCA_Code &lt;&gt; 'NA'&#xA;&#x9;EXCEPT&#xA;&#x9;SELECT DISTINCT Student_ID, CCA_Code&#xA;&#x9;FROM DM_OSG_PET_CCA&#xA;&#x9;WHERE CCA_Code &lt;&gt; 'NA'&#xA;&#x9;AND CCA_Membership_Status = 'Member') NoMember&#xA;ON osg.Student_ID = NoMember.Student_ID&#xA;&#x9;AND osg.CCA_Code = NoMember.CCA_Code;&#xA;&#xA;-- Remove nonNA-CCA for abnormal cases of CCA particpated outside student's RP terms&#xA;DELETE osg&#xA;FROM DM_OSG_PET_CCA osg&#xA;INNER JOIN (&#xA;&#x9;SELECT DISTINCT Student_ID, CCA_Code&#xA;&#x9;FROM DM_OSG_PET_CCA&#xA;&#x9;WHERE CCA_Code &lt;&gt; 'NA'&#xA;&#x9;EXCEPT&#xA;&#x9;SELECT DISTINCT Student_ID, CCA_Code&#xA;&#x9;FROM DM_OSG_PET_CCA&#xA;&#x9;WHERE CCA_Code &lt;&gt; 'NA'&#xA;&#x9;AND CCA_Membership_Status = 'Member') NoMember&#xA;ON osg.Student_ID = NoMember.Student_ID&#xA;&#x9;AND osg.CCA_Code = NoMember.CCA_Code;&#xA;&#xA;-- Update Appointment and Appointment Group&#xA;UPDATE osg&#xA;SET osg.CCA_Appointment = &#xA;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;WHEN osg.CCA_Membership_Status = 'Not Member' THEN 'Not Member'&#xA;&#x9;&#x9;&#x9;ELSE ISNULL(appt.Appointment_Desc,'Member')&#xA;&#x9;&#x9;END,&#xA;&#x9;osg.CCA_Appointment_Group =&#xA;&#x9;&#x9;CASE&#xA;&#x9;&#x9;&#x9;WHEN osg.CCA_Membership_Status = 'Not Member' THEN 'Not Member'&#xA;&#x9;&#x9;&#x9;ELSE ISNULL(apptrank.Appointment_Grp,'Member')&#xA;&#x9;&#x9;END&#xA;FROM DM_OSG_PET_CCA osg&#xA;LEFT JOIN (&#xA;&#x9;SELECT Student_ID, 'AY' + Acad_Yr AS Academic_Year, Club_Code AS CCA_Code, Appointment_Desc&#xA;&#x9;FROM DW_STUDENT_CCA_CLUB_APPOINTMENT&#xA;&#x9;WHERE Qual_Type = 'DPFT'&#xA;&#x9;UNION &#xA;&#x9;SELECT Student_ID, 'AY' + Acad_Yr AS Academic_Year, Interest_Grp AS CCA_Code, Appointment_Desc&#xA;&#x9;FROM DW_IG_APPOINTMENT&#xA;&#x9;WHERE Qual_Type = 'DPFT') appt&#xA;ON osg.CCA_Code &lt;&gt; 'NA' AND osg.CCA_Membership_Status = 'Member'&#xA;&#x9;AND osg.Student_ID = appt.Student_ID&#xA;&#x9;AND osg.Academic_Year = appt.Academic_Year&#xA;&#x9;AND osg.CCA_Code = appt.CCA_Code&#xA;LEFT JOIN DW_APPOINTMENT_RANKING apptrank&#xA;ON osg.CCA_Code &lt;&gt; 'NA' AND osg.CCA_Membership_Status = 'Member'&#xA;&#x9;AND appt.Appointment_Desc = apptrank.CCA_Appointment;&#xA;&#xA;-- Update Appointment Cumulative and Appointment Group Cumulative&#xA;UPDATE osg&#xA;SET osg.CCA_Appointment_Cumulative = &#xA;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;WHEN osg.CCA_Code = 'NA' THEN 'Not Member'&#xA;&#x9;&#x9;&#x9;ELSE osgappt.CCA_Appointment_Cumulative&#xA;&#x9;&#x9;END,&#xA;&#x9;osg.CCA_Appointment_Group_Cumulative = &#xA;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;WHEN osg.CCA_Code = 'NA' THEN 'Not Member'&#xA;&#x9;&#x9;&#x9;ELSE osgappt.CCA_Appointment_Group_Cumulative&#xA;&#x9;&#x9;END&#xA;FROM DM_OSG_PET_CCA osg&#xA;LEFT JOIN (&#xA;&#x9;SELECT Student_ID, Academic_Year, Semester, CCA_Code, CCA_Appointment AS CCA_Appointment_Cumulative, CCA_Appointment_Group AS CCA_Appointment_Group_Cumulative&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT osg.Student_ID, osg.Academic_Year, osg.Semester, osg.CCA_Code, osgappt.CCA_Appointment, osgappt.CCA_Appointment_Group,&#xA;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;PARTITION BY osg.Student_ID, osg.Academic_Year, osg.Semester, osg.CCA_Code&#xA;&#x9;&#x9;&#x9;ORDER BY ISNULL(osgappt.Appointment_Ranking,999) ASC, osgappt.Semester_Begin_Date DESC) AS rownum&#xA;&#x9;&#x9;FROM DM_OSG_PET_CCA osg&#xA;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT 'AY' + Acad_Year AS Academic_Year, 'S' + Semester AS Semester, Semester_Begin_Date, Semester_End_Date&#xA;&#x9;&#x9;&#x9;FROM DW_TERM_SETUP&#xA;&#x9;&#x9;&#x9;WHERE Qual_Type = 'DPFT') ts&#xA;&#x9;&#x9;ON osg.Academic_Year = ts.Academic_Year&#xA;&#x9;&#x9;&#x9;AND osg.Semester = ts.Semester&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT osg.Student_ID, osg.Academic_Year, osg.Semester, osg.CCA_Code, &#xA;&#x9;&#x9;&#x9;&#x9;osg.CCA_Appointment, osg.CCA_Appointment_Group, &#xA;&#x9;&#x9;&#x9;&#x9;CASE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN osg.CCA_Membership_Status = 'Not Member' THEN 999&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE ISNULL(apptrank.Appointment_Ranking,99) &#xA;&#x9;&#x9;&#x9;&#x9;END AS Appointment_Ranking,&#xA;&#x9;&#x9;&#x9;&#x9;ts.Semester_Begin_Date, ts.Semester_End_Date&#xA;&#x9;&#x9;&#x9;FROM DM_OSG_PET_CCA osg&#xA;&#x9;&#x9;&#x9;LEFT JOIN DW_APPOINTMENT_RANKING apptrank&#xA;&#x9;&#x9;&#x9;ON osg.CCA_Code &lt;&gt; 'NA' AND osg.CCA_Membership_Status = 'Member'&#xA;&#x9;&#x9;&#x9;&#x9;AND osg.CCA_Appointment = apptrank.CCA_Appointment&#xA;&#x9;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT 'AY' + Acad_Year AS Academic_Year, 'S' + Semester AS Semester, Semester_Begin_Date, Semester_End_Date&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_TERM_SETUP&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type = 'DPFT') ts&#xA;&#x9;&#x9;&#x9;ON osg.Academic_Year = ts.Academic_Year&#xA;&#x9;&#x9;&#x9;&#x9;AND osg.Semester = ts.Semester&#xA;&#x9;&#x9;&#x9;WHERE osg.CCA_Code &lt;&gt; 'NA') osgappt&#xA;&#x9;&#x9;ON osg.Student_ID = osgappt.Student_ID&#xA;&#x9;&#x9;&#x9;AND osg.CCA_Code = osgappt.CCA_Code&#xA;&#x9;&#x9;&#x9;AND osgappt.Semester_Begin_Date &lt;= ts.Semester_End_Date&#xA;&#x9;&#x9;WHERE osg.CCA_Code &lt;&gt; 'NA') osappt&#xA;&#x9;WHERE rownum = 1) osgappt&#xA;ON osg.CCA_Code &lt;&gt; 'NA'&#xA;&#x9;AND osg.Student_ID = osgappt.Student_ID&#xA;&#x9;AND osg.Academic_Year = osgappt.Academic_Year&#xA;&#x9;AND osg.Semester = osgappt.Semester&#xA;&#x9;AND osg.CCA_Code = osgappt.CCA_Code;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update Job Status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{87D30F41-5055-44ED-9BE3-CBF669222BED}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update Job Status"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{C56FD071-0AED-4BEE-9C52-E8F59E009013}"
          SQLTask:SqlStatementSource="DECLARE &#xA;@jobstatusid INT &#xA;select @jobstatusid=?&#xA;IF exists(select * from dbo.ETL_ERROR_LOG where [JOB_STATUS_ID]=@jobstatusid)&#xA; BEGIN&#xA; Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Fail'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;  END&#xA;ELSE&#xA;BEGIN&#xA;Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Success'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;END" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Validate job status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{167535D6-6115-43B2-A664-29C016165B44}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Validate job status"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{C56FD071-0AED-4BEE-9C52-E8F59E009013}"
          SQLTask:SqlStatementSource="select CASE WHEN JOB_STATUS='Success' then 0 ELSE 1 END AS  JOB_STATUS&#xA;&#xA;from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT' and &#xA;  JOB_STATUS_ID in (Select max(JOB_STATUS_ID) from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT')"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Job_Status" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{74C8B468-3E03-464C-8976-8B1EEF233F18}"
      DTS:From="Package\Load Into DM"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Update Appointment and Appointment Group and Cummulative" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{47900960-D0B2-419A-A4EF-447F5832D45F}"
      DTS:From="Package\Process_Date"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Load Into DM" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{3D31FF24-E690-4C31-9CF2-0036D4D31723}"
      DTS:From="Package\Create ETL Job Log"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\JOB_STATUS_ID" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{36D102BE-F237-4BF9-8F92-B425B34A5B68}"
      DTS:From="Package\JOB_STATUS_ID"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Validate job status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{5523783D-389B-4778-BC35-021DC520ECB4}"
      DTS:From="Package\Update Appointment and Appointment Group and Cummulative"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Update Job Status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[False]"
      DTS:CreationName=""
      DTS:DTSID="{335C167F-F0F1-4D85-8D7E-CB010DB0C463}"
      DTS:Expression="@[User::Job_Status]==1"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="False"
      DTS:To="Package\Error Log" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[True]"
      DTS:CreationName=""
      DTS:DTSID="{E8A0C8B0-E87E-4AA8-A092-51FF338222FC}"
      DTS:Expression="@[User::Job_Status]==0"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="True"
      DTS:To="Package\Process_Date" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{E24C230E-0E5D-40BC-BE00-3023A870666D}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{1A67E763-5F44-4FD8-B9AA-DA8FAAA2B23F}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{EE66E68B-50F5-4FFA-BB6F-85533A709CC6}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="ETL_ERROR_LOG">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{C56FD071-0AED-4BEE-9C52-E8F59E009013}"
              SQLTask:SqlStatementSource="[dbo].[usp_InsertETLErrorLog] ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::JOB_STATUS_ID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="131"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::ErrorDescription"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="157,42"
          Id="Package\Create ETL Job Log"
          TopLeft="17,13" />
        <NodeLayout
          Size="123,42"
          Id="Package\Error Log"
          TopLeft="699,21" />
        <NodeLayout
          Size="142,42"
          Id="Package\JOB_STATUS_ID"
          TopLeft="230,18" />
        <NodeLayout
          Size="143,42"
          Id="Package\Load Into DM"
          TopLeft="486,219" />
        <NodeLayout
          Size="142,42"
          Id="Package\Process_Date"
          TopLeft="487,131" />
        <NodeLayout
          Size="387,42"
          Id="Package\Update Appointment and Appointment Group and Cummulative"
          TopLeft="63,276" />
        <NodeLayout
          Size="165,42"
          Id="Package\Update Job Status"
          TopLeft="526,322" />
        <NodeLayout
          Size="166,42"
          Id="Package\Validate job status"
          TopLeft="446,22" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="486,240">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-36,51.3333333333333"
              Start="0,0"
              End="-28.5,51.3333333333333">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-16.8073394495413,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-16.8073394495413,0"
                    Point2="-20.8073394495413,0"
                    Point3="-20.8073394495413,4" />
                  <mssgle:LineSegment
                    End="-20.8073394495413,47.3333333333333" />
                  <mssgle:CubicBezierSegment
                    Point1="-20.8073394495413,47.3333333333333"
                    Point2="-20.8073394495413,51.3333333333333"
                    Point3="-24.8073394495413,51.3333333333333" />
                  <mssgle:LineSegment
                    End="-28.5,51.3333333333333" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="557.75,173">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46"
              Start="0,0"
              End="0,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="174,36.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="56,0"
              Start="0,0"
              End="48.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="48.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="372,41">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="74,0"
              Start="0,0"
              End="66.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="66.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="450,302.666666666667">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="76,40.3333333333333"
              Start="0,0"
              End="68.5,40.3333333333333">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="28.0733944954128,0" />
                  <mssgle:CubicBezierSegment
                    Point1="28.0733944954128,0"
                    Point2="32.0733944954128,0"
                    Point3="32.0733944954128,4" />
                  <mssgle:LineSegment
                    End="32.0733944954128,36.3333333333333" />
                  <mssgle:CubicBezierSegment
                    Point1="32.0733944954128,36.3333333333333"
                    Point2="32.0733944954128,40.3333333333333"
                    Point3="36.0733944954128,40.3333333333333" />
                  <mssgle:LineSegment
                    End="68.5,40.3333333333333" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[False]"
          TopLeft="612,42.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="87,0"
              Start="0,0"
              End="79.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="79.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="28.01365234375,5,23.4726953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[True]"
          TopLeft="529,64">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="29,67"
              Start="0,0"
              End="29,59.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.5"
                    Point2="0,33.5"
                    Point3="4,33.5" />
                  <mssgle:LineSegment
                    End="25,33.5" />
                  <mssgle:CubicBezierSegment
                    Point1="25,33.5"
                    Point2="29,33.5"
                    Point3="29,37.5" />
                  <mssgle:LineSegment
                    End="29,59.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="3.48755859375,38.5,22.0248828125,9.421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="162,42"
          Id="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          TopLeft="370,98" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[False]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[True]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>