<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/30/2019 1:46:31 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NCS-110119GM22"
  DTS:CreatorName="NCS\P0500388"
  DTS:DelayValidation="True"
  DTS:DTSID="{8EF53F89-A8F4-4EE4-8544-552280AE56B5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.170"
  DTS:LocaleID="18441"
  DTS:ObjectName="DM_OFN_STUDENT_FINANCIAL_STATUS"
  DTS:PackageType="5"
  DTS:VersionBuild="143"
  DTS:VersionGUID="{9F148FE5-A474-43D3-88F1-ACF257DB5B1F}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DW]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{532EDEC2-E3D1-46D4-8B9B-F13D59042229}"
      DTS:ObjectName="DW">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=abeamrpdev.7006065fdbb7.database.windows.net;User ID=dbadmin;Initial Catalog=RPDW_UAT;Provider=SQLNCLI11.1;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAiAXqJL5xwkap+hp6D6sPxwAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAAAVmPuJgNjtwhgR6SnwCsVZIIkCHXIKjJ0JL5s5acZhngAAAAAOgAAAAAIAACAAAABGF7DWF/2JOEmr/rNSdtU3FFMRqHSpD+1kDR/l0CN/NjAAAAC4xZRPkr2GGCvqj7+FR7eq3lbmUJCPGC04P2jhmSffGQKCbLTeoIzxqyol0Ad1YfFAAAAA7VgIfCtY3WWr+ThYPQiKJ37eFFasJs+YLQ5sMCgbjQavvOTkuaevLQD51ieaFignwRm4jzjL0Uva/Qctr/7++A</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ErrorLog]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{E2E8C6CF-7F84-4A0E-914F-C7591FC9416D}"
      DTS:ObjectName="ErrorLog">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=abeamrpdev.7006065fdbb7.database.windows.net;User ID=dbadmin;Initial Catalog=RPDW_UAT;Provider=SQLNCLI11.1;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAiAXqJL5xwkap+hp6D6sPxwAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAAAwBul9FbwKrCyVZr9em7j9SI1qbHf/elRHokUIErb4AAAAAAAOgAAAAAIAACAAAACC/7SkVt8BpggXzRZCSJYwwmFrKa+Y56yhUViDez65eTAAAADWyewyokj17hOrqHrzM1MFhNPrN18f6DFyv+BzILGAr6UdPPWG62vrHbd9jfaRRhJAAAAAKlEIRmNSwms3lXCgT37e8RT29gLrPImHuxvD3y2qdwFiy2hped9E8c0S8A8VMGO9CM3rj+LXhZDz3F2GSLHyMQ</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{29BF73C7-757D-4B14-9AFC-FD911E672030}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Duplicate_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4D88C220-5792-4AD9-BD83-659F99B69E40}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Job_name">
      <DTS:VariableValue
        DTS:DataType="8">DM_OFN_STUDENT_FINANCIAL_STATUS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{06D7AF23-0682-4FBE-B0C2-F91A18ADEB15}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Job_Status">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8973E925-99A2-4D27-8D14-FAD30F175F13}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="JOB_STATUS_ID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6CEC93D6-5329-4F0E-9D97-AD0A3FC44CEE}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Mandatory_constraint_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9E34D834-651D-4926-8177-B2DD90E6D536}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Process_date">
      <DTS:VariableValue
        DTS:DataType="7">2/1/2019 2:58:47 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EEDE62F2-C160-426D-BB7F-4E64B277279C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceTable">
      <DTS:VariableValue
        DTS:DataType="8">DW_CUSTOMER_ACCOUNT_BALANCE</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{54DA9F15-3C42-4DE9-A550-3F038B8F6B73}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;&#xA;BEGIN TRANSACTION&#xA;BEGIN TRY&#xA;--------------------------------------&#xA;DECLARE @jobstatusid varchar(10)&#xA;select @jobstatusid=&quot;+ (DT_STR, 5,1252) @[User::JOB_STATUS_ID] +&quot;&#xA;&#xA;Delete from DM_OFN_STUDENT_FINANCIAL_STATUS;&#xA;Insert into DM_OFN_STUDENT_FINANCIAL_STATUS&#xA;SELECT &#xA;MAIN.Student_ID &#xA;,MAIN.Qual_Type&#xA;,MAIN.Admit_Term&#xA;,Main.Enrolment_Term&#xA;,Main.Dept&#xA;,main.Descr as Department_Descr&#xA;,MAin.Prog&#xA;,main.programme as Programme&#xA;,'AY'+ MAin.Acad_Year&#xA;,'S'+main.Semester&#xA;,'AY' + RIGHT(main.Acad_Year,2) + 'S' + main.Semester as Academic_Term&#xA;,Main.Term&#xA;,main.NMC_Cluster&#xA;,main.Program_Status_Start_Academic_Term&#xA;,main.Program_Status_Start_Academic_Term_Descr&#xA;,main.Student_Status_End_Semester&#xA;,main.Student_Status_Descr_End_Semester&#xA;,main.Latest_Student_Status&#xA;,main.Latest_Student_Status_Descr&#xA;,main.Year_of_Study&#xA;,null as Latest_Year_of_Study--need to write update&#xA;,NULL as FAS_Status &#xA;,main.Latest_Applied_Financial_Scheme&#xA;,main.Outstanding_Balance&#xA;,main.Total&#xA;,main.Race_Mapping_CMIO&#xA;,NULL as Gross_Monthly_Household_Income&#xA;,NULL as Latest_Gross_Monthly_Household_Income --need to write update&#xA;,NULL as Num_Household_Members&#xA;,NULL as Latest_Household_Size ----need to write update&#xA;,NULL as PCI&#xA;,NULL as PCI_Group&#xA;,NULL as  PCI_Source&#xA;,null as Latest_PCI&#xA;,null as Latest_PCI_Group&#xA;,null as Latest_PCI_Source&#xA;,main.Grants_Remaining&#xA;,main.Applied_Mendaki&#xA;,null as Latest_Applied_Mendaki&#xA;,main.Applied_CEFES&#xA;,null as Latest_Applied_CPFES &#xA;,main.Applied_PSSO&#xA;,null as Latest_Applied_PSSO&#xA;,main.Applied_TFL&#xA;,null as Latest_Applied_TFL&#xA;,main.Applied_SLA&#xA;,null as Latest_Applied_SLA&#xA;,main.Applied_SLB&#xA;,null as Latest_Applied_SLB&#xA;,null as Latest_Record_Ind&#xA;,null as Latest_Acad_Term_Ind&#xA;,main.Term_GPA&#xA;,main.Term_cGPA&#xA;,null as Latest_cGPA&#xA;,main.Absent_Count&#xA;,main.Lessons_Count&#xA;,null as Absence_Percentage&#xA;,getdate()&#xA;,getdate()&#xA;&#xA;&#xA;&#xA;from (&#xA;&#xA;select distinct base.* &#xA;,CASE WHEN FAS.Student_ID IS NULL THEN 'Non-FAS' ELSE 'FAS' END AS FAS_Status&#xA;,CASE WHEN FS.Student_ID IS NULL THEN 'N' ELSE 'Y' END AS Latest_Applied_Financial_Scheme&#xA;,CAB.Outstanding_Balance&#xA;,CAB_Tot.Total&#xA;,NULL as Gross_Monthly_Household_Income --FAS1.Gross_Monthly_Household_Income&#xA;,NULL as Num_Household_Members--FAS1.Num_Household_Members&#xA;,tgs.Grants_Remaining as Grants_Remaining&#xA;,CASE WHEN MDK.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_Mendaki&#xA;,CASE WHEN CPF.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_CEFES&#xA;,CASE WHEN PSSO.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_PSSO&#xA;,CASE WHEN TFL.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_TFL&#xA;,CASE WHEN SLA.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_SLA&#xA;,CASE WHEN SLB.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_SLB&#xA;--,base.Term_GPA&#xA;--,Base.Term_cGPA&#xA;,abst_cnt.Absent_Count&#xA;,Lessn_cnt.Lessons_Count&#xA;,d.Descr&#xA;,base.Prog+' - '+pt.Prog_Descr as programme&#xA;--,--CASE WHEN PCI_BS.PCI IS NULL THEN PCI_ICare.Response ELSE PCI_BS.PCI END as PCI&#xA;--,--CASE WHEN PCI_BS.PCI IS NULL THEN 'iCARE' ELSE 'Bursary' END as PCI_Source&#xA;from(&#xA;SELECT base.*,nmc.NMC_Cluster,sm.Program_Status_Start_Academic_Term,sm.Program_Status_Start_Academic_Term_Descr&#xA;,ROW_NUMBER() over(partition by base.student_id,base.semester,base.acad_year order by sm.Effective_Date DEsc, sm.Effective_Seq desc&#xA;)row_num&#xA; from (&#xA;select --375700&#xA;a.Student_ID,a.Qual_Type,a.Admit_Term,a.Enrolment_Term,a.Dept,a.Prog,&#xA;a.Acad_Year,a.Semester,a.Term,a.Student_Status,a.Student_Status_Descr,a.Year_of_Study,a.Race_Mapping_CMIO,a.Term_cGPA,a.Term_GPA&#xA; ,a.Student_Status_End_Semester, a.Student_Status_Descr_End_Semester, a.Prog_Action_End_Semester, a.Prog_Action_Descr_End_Semester&#xA; --,a.Latest_Prog&#xA; ,a.Latest_Prog_Action&#xA; ,a.Latest_Student_Status,a.Latest_Student_Status_Descr&#xA; --,a.Term_Begin_Date,a.Term_End_Date&#xA; ,b.Semester_Begin_Date,b.Semester_End_Date&#xA; FROM (&#xA;&#xA;&#xA;SELECT sdbat.Student_ID,sdbat.Qual_Type,sdbat.Admit_Term,sdbat.Enrolment_Term,sdbat.Dept,sdbat.Prog,&#xA;sdbat.Acad_Year,sdbat.Semester,sdbat.Term,sdbat.Student_Status,sdbat.Student_Status_Descr,sdbat.Year_of_Study,sdbat.Race_Mapping_CMIO,sdbat.Term_cGPA,sdbat.Term_GPA, &#xA;&#x9;lt.Student_Status_End_Semester, lt.Student_Status_Descr_End_Semester, lt.Prog_Action_End_Semester, lt.Prog_Action_Descr_End_Semester,&#xA;&#x9;sm.Latest_Student_Status, sm.Latest_Student_Status_Descr, sm.Latest_Prog_Action&#xA;&#x9;--,lt.Term_Begin_Date,lt.Term_End_Date&#xA;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;INNER JOIN (&#xA;&#x9;SELECT Student_ID, Qual_Type, Admit_Term, Prog, Acad_Year, Semester,&#xA;&#x9;&#x9;Student_Status AS Student_Status_End_Semester, Student_Status_Descr AS Student_Status_Descr_End_Semester, &#xA;&#x9;&#x9;Prog_Action AS Prog_Action_End_Semester, Prog_Action_Descr AS Prog_Action_Descr_End_Semester&#xA;&#x9;&#x9;,Term_Begin_Date,Term_End_Date&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT d.Student_ID, d.Qual_Type, d.Admit_Term, d.Prog, d.Acad_Year, d.Semester, &#xA;&#x9;&#x9;&#x9;d.Student_Status, d.Student_Status_Descr, &#xA;&#x9;&#x9;&#x9;Prog_Action, Prog_Action_Descr,&#xA;&#x9;&#x9;&#x9;t.Semester_Begin_Date, t.Semester_End_Date,&#xA;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;PARTITION BY d.Student_ID, d.Qual_Type, d.Acad_Year, d.Semester&#xA;&#x9;&#x9;&#x9;ORDER BY t.Term_End_Date DESC, d.Admit_Term DESC, d.Prog DESC) rownum&#xA;&#x9;&#x9;&#x9;,t.Term_Begin_Date,t.Term_End_Date&#xA;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM d&#xA;&#x9;&#x9;INNER JOIN DW_TERM_SETUP t&#xA;&#x9;&#x9;ON d.Qual_Type = t.Qual_Type&#xA;&#x9;&#x9;&#x9;AND d.Term = t.Term &#xA;&#x9;&#x9;WHERE d.Qual_Type = 'DPFT') d&#xA;&#x9;WHERE d.rownum = 1) lt -- latest Status for each AY and Sem&#xA;ON sdbat.Student_ID = lt.Student_ID&#xA;&#x9;AND sdbat.Qual_Type = lt.Qual_Type&#xA;&#x9;AND sdbat.Admit_Term = lt.Admit_Term&#xA;&#x9;AND sdbat.Prog = lt.Prog&#xA;&#x9;ANd sdbat.Acad_Year = lt.Acad_Year&#xA;&#x9;AND sdbat.Semester = lt.Semester&#xA;INNER JOIN (&#xA;&#x9;SELECT Student_Id, Qual_Type, Student_Status AS Latest_Student_Status, &#xA;&#x9;&#x9;Student_Status_Descr AS Latest_Student_Status_Descr, Prog_Action AS Latest_Prog_Action&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT d.Student_ID, d.Qual_Type, d.Admit_Term, d.Prog, d.Acad_Year, d.Semester, &#xA;&#x9;&#x9;&#x9;d.Student_Status, d.Student_Status_Descr, &#xA;&#x9;&#x9;&#x9;Prog_Action, Prog_Action_Descr,&#xA;&#x9;&#x9;&#x9;t.Semester_Begin_Date, t.Semester_End_Date, &#xA;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;PARTITION BY d.Student_ID, d.Qual_Type&#xA;&#x9;&#x9;&#x9;ORDER BY t.Term_End_Date DESC, d.Admit_Term DESC, d.Prog DESC) rownum&#xA;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM d&#xA;&#x9;&#x9;INNER JOIN DW_TERM_SETUP t&#xA;&#x9;&#x9;ON d.Qual_Type = t.Qual_Type&#xA;&#x9;&#x9;&#x9;AND d.Term = t.Term &#xA;&#x9;&#x9;WHERE d.Qual_Type = 'DPFT') sm&#xA;&#x9;WHERE rownum = 1) sm -- Student_w_latest_status&#xA;ON sdbat.Student_ID = sm.Student_ID&#xA;&#x9;AND sdbat.Qual_Type = sdbat.Qual_Type&#xA;WHERE sdbat.Qual_Type = 'DPFT'&#xA;AND sdbat.Vacation_Term = 'No')a&#xA;&#xA;LEFT JOIN DW_TERM_SETUP b on a.Term=b.Term and a.Qual_Type=b.Qual_Type&#xA;and a.Acad_Year=b.Acad_Year and a.Semester=b.Semester&#xA;&#xA;)Base --Student_Base&#xA;&#xA;LEFT JOIN DW_EXT_NMC nmc ON nmc.RP_Course_Code=Base.Prog and nmc.[Year]=base.Acad_Year&#xA;&#xA;LEFT JOIN (select  Student_Id,Admit_Term,Prog,Qual_Type,Student_Status as Program_Status_Start_Academic_Term&#xA;,Student_Status_Descr  as Program_Status_Start_Academic_Term_Descr,Effective_Date,Effective_Seq from DW_STUDENT_MOVEMENT&#xA;) sm on sm.Student_Id=Base.Student_ID and sm.Prog=Base.Prog&#xA; and sm.Admit_Term=base.Admit_Term and sm.Qual_Type=base.Qual_Type and sm.Effective_Date&lt;=base.Semester_Begin_Date&#xA; &#xA;--)Chk_Dup&#xA;--group by Student_ID,Acad_Year,Semester&#xA;--having count(1)&gt;1&#xA;&#xA;)base--Base completion &#xA;&#xA;--Joining with DW_SCHOLARSHIP_BURSARY_STATUS&#xA;&#xA;LEFT JOIN (Select distinct Student_ID,Awarded_Date,Prog from DW_SCHOLARSHIP_BURSARY_STATUS &#xA;where Qual_Type='DPFT' and App_Status='DIS')FAS on FAS.Student_ID=base.Student_ID&#xA;--and Fas.Prog=base.Prog &#xA;and FAS.Awarded_Date between base.Semester_Begin_Date and base.Semester_End_Date&#xA;&#xA;--Joining with DW_CUSTOMER_ACCT_FINCL_SCHEME&#xA;&#xA;LEFT JOIN (Select distinct Student_ID from DW_CUSTOMER_ACCT_FINCL_SCHEME &#xA;  where Scheme_App in ('MDK','PSSO','TFL','CPF','SLA','SLB') and App_Status='ACTV' and Qual_Type='DPFT'&#xA;  and Subsidy_Percent&gt;0 ) FS on FS.Student_ID=base.Student_ID&#xA;&#xA;--Joining with DW_CUSTOMER_ACCOUNT_BALANCE&#xA;LEFT JOIN (Select Student_ID, Outstanding_Balance, Acct_Term, b.Acad_Year, b.Semester from &#xA;(Select Student_ID, Sum(Bal) as Outstanding_Balance, Acct_Term &#xA;from DW_CUSTOMER_ACCOUNT_BALANCE where Business_Unit='RPPET'&#xA;group  by Student_ID, Acct_Term&#xA;) a&#xA;left join &#xA;DW_TERM_SETUP b&#xA;on a.Acct_Term=b.Term and  b.Descr like'%Sem%')CAB on CAB.Student_ID=base.Student_ID and CAB.Acad_Year=base.Acad_Year and cab.Semester=base.Semester&#xA;&#xA;LEFT JOIN (Select cab_1.Student_ID, cab_1.Total &#xA;&#x9;from (Select Student_ID, Total, ROW_NUMBER() over (partition by Student_ID &#xA;order by Open_Date desc) as rn&#xA;from DW_CUSTOMER_ACCOUNT_BALANCE &#xA;where Business_Unit='RPPET') cab_1 where rn=1)&#xA;CAB_Tot ON CAB_Tot.Student_ID=base.Student_ID&#xA;&#xA;--LEFT JOIN (select student_ID,Gross_Monthly_Household_Income,Num_Household_Members,App_Date&#xA;--,ROW_NUMBER() Over (partition by student_ID order by App_Date desc)Row_Num from DW_FAS_APPLICATION&#xA;--where Gross_Monthly_Household_Income IS NOT NULL and  Gross_Monthly_Household_Income&lt;&gt;0.00)FAS1 &#xA;-- on FAS1.Student_ID=base.Student_ID  and FAS1.App_Date&lt;=base.Semester_End_Date and FAS1.Row_Num=1&#xA;&#xA;--Joining with DW_STUDENT_TUITION_GRANT_STATUS&#xA;&#xA; LEFT JOIN DW_STUDENT_TUITION_GRANT_STATUS tgs on tgs.Student_ID=base.Student_ID and tgs.Qual_Type=base.Qual_Type&#xA; and tgs.Term=base.Term&#xA;&#xA;--Joining with DW_FINANCIAL_SCHEME_APPLICATION&#xA;&#xA;LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION &#xA;where Fin_Scheme_Applied='MDK' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) MDK on MDK.Student_ID=base.Student_ID&#xA;and (MDK.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or MDK.Last_Updated_Date &lt; base.Semester_Begin_Date )&#xA;&#xA;LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION &#xA;where Fin_Scheme_Applied='CPF' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) CPF on CPF.Student_ID=base.Student_ID&#xA;and (CPF.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or CPF.Last_Updated_Date &lt; base.Semester_Begin_Date )&#xA;&#xA;LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION &#xA;where Fin_Scheme_Applied='PSSO' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) PSSO on PSSO.Student_ID=base.Student_ID&#xA;and (PSSO.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or PSSO.Last_Updated_Date &lt; base.Semester_Begin_Date )&#xA;&#xA;LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION &#xA;where Fin_Scheme_Applied='TFL' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) TFL on TFL.Student_ID=base.Student_ID&#xA;and (TFL.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or TFL.Last_Updated_Date &lt; base.Semester_Begin_Date )&#xA;&#xA;LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION &#xA;where Fin_Scheme_Applied='SLA' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) SLA on SLA.Student_ID=base.Student_ID&#xA;and (SLA.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or SLA.Last_Updated_Date &lt; base.Semester_Begin_Date )&#xA;&#xA;LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION &#xA;where Fin_Scheme_Applied='SLB' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) SLB on SLB.Student_ID=base.Student_ID&#xA;and (SLB.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or SLB.Last_Updated_Date &lt; base.Semester_Begin_Date )&#xA;&#xA;&#xA;--Joining with V_DW_STUDENT_ATTENDANCE&#xA;&#xA;LEFT JOIN (select STUDENT_ID, [Academic Year], Semester, TERM, COUNT(STUDENT_ID) as Absent_Count&#xA; from V_DW_STUDENT_ATTENDANCE where [Attendance Status Desc] in ('Absent', 'Late and Partial', 'Partial')&#xA; GROUP BY STUDENT_ID, [Academic Year], Semester, TERM) abst_cnt on abst_cnt.Student_ID=base.Student_ID&#xA; and abst_cnt.[Academic Year]=base.Acad_Year and abst_cnt.Semester=base.Semester&#xA;&#xA; LEFT JOIN (select STUDENT_ID, [Academic Year], Semester, TERM, COUNT(STUDENT_ID) as Lessons_Count&#xA; from V_DW_STUDENT_ATTENDANCE where [Attendance Status Desc] &lt;&gt; 'Not Recorded'&#xA; GROUP BY STUDENT_ID, [Academic Year], Semester, TERM) Lessn_cnt on Lessn_cnt.Student_ID=base.Student_ID&#xA; and Lessn_cnt.Semester=base.Semester and Lessn_cnt.[Academic Year]=base.Acad_Year&#xA;&#xA;--Joining with DW_EXT_DEPARTMENT&#xA;&#xA; LEFT JOIN DW_EXT_DEPARTMENT d on base.Dept=d.Department&#xA;&#xA;--Joining with DW_PET_PROGRAMME&#xA; LEFT JOIN (select  Prog_Code,Prog_Descr,School_Centre from dbo.DW_PET_PROGRAMME a1&#xA;&#x9;&#x9; where a1.Effective_Date in (select max(b1.Effective_Date) from dbo.DW_PET_PROGRAMME b1 where b1.Prog_Code=a1.PROG_CODE)) PT &#xA;ON base.Prog=PT.Prog_Code &#xA;&#xA;where Base.row_num=1 &#xA;&#xA;&#xA;)MAIN&#xA;&#xA;&#xA;&#xA;-------------------------Update_Year OF study--------------&#xA;&#xA;UPDATE a&#xA;SET a.Latest_Year_of_Study= b.Year_of_Study &#xA;from DM_OFN_STUDENT_FINANCIAL_STATUS a&#xA;INNER JOIN &#xA;(SELECT Student_ID,Year_of_Study from(&#xA;(SELECT Student_ID,Year_of_Study,ROW_NUMBER() over(partition by student_id order by Acad_term desc)as ROW_Num&#xA; FROM [dbo].DM_OFN_STUDENT_FINANCIAL_STATUS))b where b.ROW_Num=1)b on a.Student_ID=b.Student_ID &#xA;&#xA; -------------------------Update_Latest_Applied_Mendaki--------------&#xA;&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_Mendaki= b.Latest_Applied_Mendaki&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--INNER JOIN &#xA;--(select 'Y' AS Latest_Applied_Mendaki,Student_ID&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]&#xA;-- where Applied_Mendaki='Y' )b on a.Student_ID=b.Student_ID &#xA;&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_Mendaki= 'N'&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--where a.Latest_Applied_Mendaki IS NULL&#xA;&#xA;update ofn&#xA;Set ofn.Latest_Applied_Mendaki=ISNULL(b.Latest_Applied_Mendaki,'N')&#xA;&#xA; --select ISNULL(b.Latest_Applied_Mendaki,'N') as Latest_Applied_Mendaki&#xA;    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn&#xA;    LEFT JOIN (&#xA;  Select distinct Student_ID,'Y' as Latest_Applied_Mendaki from DW_CUSTOMER_ACCT_FINCL_SCHEME &#xA;  where Scheme_App in ('MDK') and App_Status='ACTV' and Qual_Type='DPFT'&#xA;  and Subsidy_Percent&gt;0)b&#xA;  on ofn.Student_ID=b.Student_ID&#xA;&#xA;&#xA;&#xA; ---------------------------Latest_Applied_CPFES------------&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_CPFES= b.Latest_Applied_CEFES&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--INNER JOIN &#xA;--(select 'Y' AS Latest_Applied_CEFES,Student_ID&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]&#xA;-- where Applied_CEFES='Y' )b on a.Student_ID=b.Student_ID &#xA;&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_CPFES= 'N'&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--where a.Latest_Applied_CPFES IS NULL&#xA;&#xA;&#xA;update ofn&#xA;Set ofn.Latest_Applied_CPFES=ISNULL(b.Latest_Applied_CPFES,'N')&#xA;&#xA;    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn&#xA;    LEFT JOIN (&#xA;  Select distinct Student_ID,'Y' as Latest_Applied_CPFES from DW_CUSTOMER_ACCT_FINCL_SCHEME &#xA;  where Scheme_App in ('CPF') and App_Status='ACTV' and Qual_Type='DPFT'&#xA;  and Subsidy_Percent&gt;0)b&#xA;  on ofn.Student_ID=b.Student_ID&#xA;&#xA;&#xA; ---------------Latest_Applied_PSSO----&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_PSSO= b.Latest_Applied_PSSO&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--INNER JOIN &#xA;--(select 'Y' AS Latest_Applied_PSSO,Student_ID&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]&#xA;-- where Applied_PSSO='Y' )b on a.Student_ID=b.Student_ID &#xA;&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_PSSO= 'N'&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--where a.Latest_Applied_PSSO IS NULL&#xA;&#xA;&#xA;update ofn&#xA;Set ofn.Latest_Applied_PSSO=ISNULL(b.Latest_Applied_PSSO,'N')&#xA;&#xA;    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn&#xA;    LEFT JOIN (&#xA;  Select distinct Student_ID,'Y' as Latest_Applied_PSSO from DW_CUSTOMER_ACCT_FINCL_SCHEME &#xA;  where Scheme_App in ('PSSO') and App_Status='ACTV' and Qual_Type='DPFT'&#xA;  and Subsidy_Percent&gt;0)b&#xA;  on ofn.Student_ID=b.Student_ID&#xA; &#xA; ---------------------------Latest_Applied_TFL-------------&#xA;&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_TFL= b.Latest_Applied_TFL&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--INNER JOIN &#xA;--(select 'Y' AS Latest_Applied_TFL,Student_ID&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]&#xA;-- where Applied_TFL='Y' )b on a.Student_ID=b.Student_ID &#xA;&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_TFL= 'N'&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--where a.Latest_Applied_TFL IS NULL&#xA;&#xA;&#xA;update ofn&#xA;Set ofn.Latest_Applied_TFL=ISNULL(b.Latest_Applied_TFL,'N')&#xA;    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn&#xA;    LEFT JOIN (&#xA;  Select distinct Student_ID,'Y' as Latest_Applied_TFL from DW_CUSTOMER_ACCT_FINCL_SCHEME &#xA;  where Scheme_App in ('TFL') and App_Status='ACTV' and Qual_Type='DPFT'&#xA;  and Subsidy_Percent&gt;0)b&#xA;  on ofn.Student_ID=b.Student_ID&#xA;&#xA;-----------------------------Latest_Applied_SLA&#xA;&#xA;--UPDATE a&#xA;-- SET a.Latest_Applied_SLA= b.Latest_Applied_SLA&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--INNER JOIN &#xA;--(select 'Y' AS Latest_Applied_SLA,Student_ID&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]&#xA;-- where Applied_SLA='Y' )b on a.Student_ID=b.Student_ID &#xA;&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_SLA= 'N'&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--where a.Latest_Applied_SLA IS NULL&#xA;&#xA;&#xA;&#xA;update ofn&#xA;Set ofn.Latest_Applied_SLA=ISNULL(b.Latest_Applied_SLA,'N')&#xA;&#xA;&#xA;    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn&#xA;    LEFT JOIN (&#xA;  Select distinct Student_ID,'Y' as Latest_Applied_SLA from DW_CUSTOMER_ACCT_FINCL_SCHEME &#xA;  where Scheme_App in ('SLA') and App_Status='ACTV' and Qual_Type='DPFT'&#xA;  and Subsidy_Percent&gt;0)b&#xA;  on ofn.Student_ID=b.Student_ID&#xA;&#xA;-------------Latest_Applied_SLB----------&#xA;--UPDATE a&#xA;-- SET a.Latest_Applied_SLB= b.Latest_Applied_SLB&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--INNER JOIN &#xA;--(select 'Y' AS Latest_Applied_SLB,Student_ID&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]&#xA;-- where Applied_SLB='Y' )b on a.Student_ID=b.Student_ID &#xA;&#xA;-- UPDATE a&#xA;-- SET a.Latest_Applied_SLB= 'N'&#xA;-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a&#xA;--where a.Latest_Applied_SLB IS NULL&#xA;&#xA;&#xA;update ofn&#xA;Set ofn.Latest_Applied_SLB=ISNULL(b.Latest_Applied_SLB,'N')&#xA;&#xA;&#xA;    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn&#xA;    LEFT JOIN (&#xA;  Select distinct Student_ID,'Y' as Latest_Applied_SLB from DW_CUSTOMER_ACCT_FINCL_SCHEME &#xA;  where Scheme_App in ('SLB') and App_Status='ACTV' and Qual_Type='DPFT'&#xA;  and Subsidy_Percent&gt;0)b&#xA;  on ofn.Student_ID=b.Student_ID&#xA;&#xA;&#xA;&#xA;&#xA; ------------Absence_Percentage-------------------&#xA; Update a&#xA; SET a.Absence_Percentage=b.Absence_Percentage&#xA; FROM DM_OFN_STUDENT_FINANCIAL_STATUS a&#xA; INNER JOIN(&#xA; Select Absence_Count * 100.00  / Lessons_Count as Absence_Percentage,Academic_Year,Semester,Student_ID&#xA;from DM_OFN_STUDENT_FINANCIAL_STATUS) b on a.Student_ID=b.Student_ID and a.Semester=b.Semester&#xA;and a.Academic_Year=b.Academic_Year&#xA;&#xA;-------------Latest_Record_Ind-------------&#xA;UPDATE a&#xA;SET a.Latest_Record_Ind='Y' &#xA;,a.Latest_Acad_Term_Ind='Y'&#xA;from DM_OFN_STUDENT_FINANCIAL_STATUS a INNER JOIN &#xA;(Select Student_ID,Acad_Term as Latest_Acad_Term,ROW_NUMBER() over(partition by Student_ID &#xA; order by Acad_Term desc)row_num&#xA;from DM_OFN_STUDENT_FINANCIAL_STATUS)b on a.Student_ID=b.Student_ID and a.Acad_Term=b.Latest_Acad_Term&#xA;and b.row_num=1&#xA;&#xA;UPDATE a&#xA;SET a.Latest_Record_Ind='N' &#xA;,a.Latest_Acad_Term_Ind='N'&#xA;from DM_OFN_STUDENT_FINANCIAL_STATUS a&#xA;where a.Latest_Record_Ind IS NULL and a.Latest_Acad_Term_Ind IS NULL&#xA;&#xA;&#xA;&#xA;&#xA;-------------Latest_Term_cGPA/Latest_Acad_Term_Ind----------&#xA;--Update a&#xA;--SET a.Latest_cGPA=b.Term_cGPA&#xA;--from DM_OFN_STUDENT_FINANCIAL_STATUS a&#xA;--INNER JOIN &#xA;--(SELECT Student_ID,Term_cGPA from(&#xA;--(SELECT Student_ID,Term_cGPA,ROW_NUMBER() over(partition by student_id order by Acad_term desc)as ROW_Num&#xA;-- FROM [dbo].DM_OFN_STUDENT_FINANCIAL_STATUS where Term_cGPA IS NOT NULL) )b where b.ROW_Num=1)b &#xA;-- on a.Student_ID=b.Student_ID &#xA;&#xA;UPDATE DM_OFN_STUDENT_FINANCIAL_STATUS&#xA;SET Latest_cGPA = Term_cGPA&#xA;WHERE Latest_Record_Ind = 'Y'&#xA;&#xA;&#xA;UPDATE fas&#xA;SET fas.Latest_cGPA = faslatest.Term_cGPA&#xA;FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas&#xA;INNER JOIN (&#xA;&#x9;SELECT DISTINCT Student_ID, Term_cGPA&#xA;&#x9;FROM DM_OFN_STUDENT_FINANCIAL_STATUS&#xA;&#x9;WHERE Latest_Record_Ind = 'Y') faslatest&#xA;ON fas.Student_ID = faslatest.Student_ID&#xA;&#xA;&#xA;UPDATE fas&#xA;SET fas.Latest_Acad_Term_Ind = ISNULL(fasmax.Latest_Acad_Term_Ind,'N')&#xA;FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas&#xA;LEFT JOIN (&#xA;&#x9;SELECT TOP 1 Academic_Year, Semester, 'Y' AS Latest_Acad_Term_Ind&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT DISTINCT Academic_Year, Semester&#xA;&#x9;&#x9;FROM DM_OFN_STUDENT_FINANCIAL_STATUS) fas&#xA;&#x9;ORDER BY Academic_Year DESC, Semester DESC) fasmax&#xA;ON fas.Academic_Year = fasmax.Academic_Year&#xA;&#x9;AND fas.Semester = fasmax.Semester&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;---- 20200812: Changes in logic for FAS_Status to include BUR and CDC&#xA;UPDATE ofn&#xA;SET ofn.FAS_Status = &#xA;&#x9;CASE &#xA;&#x9;&#x9;WHEN bur.Student_ID IS NOT NULL OR cdc.Student_ID IS NOT NULL THEN 'FAS'&#xA;&#x9;&#x9;ELSE 'Non-FAS'&#xA;&#x9;END&#xA;FROM DM_OFN_STUDENT_FINANCIAL_STATUS ofn&#xA;LEFT JOIN (&#xA;&#x9;SELECT DISTINCT sbs.Student_ID, 'AY' + ts.Acad_Year AS Academic_Year, 'S' + ts.Semester AS Semester&#xA;&#x9;FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs&#xA;&#x9;INNER JOIN (&#xA;&#x9;&#x9;SELECT curr.Acad_Year, curr.Semester, curr.Semester_Begin_Date, curr.Semester_End_Date, &#xA;&#x9;&#x9;&#x9;prev.Semester_Begin_Date AS Prev_Semester_Begin_Date, prev.Semester_End_Date as Prev_Semester_End_Date&#xA;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT Acad_Year, Semester, Semester_Begin_Date, Semester_End_Date, Acad_Year + (Semester - 1) * 0.5 AS AY_Sem&#xA;&#x9;&#x9;&#x9;FROM DW_TERM_SETUP curr&#xA;&#x9;&#x9;&#x9;WHERE curr.Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;AND ISNULL(Semester,'') &lt;&gt; '') curr&#xA;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT Acad_Year, Semester, Semester_Begin_Date, Semester_End_Date, Acad_Year + (Semester - 1) * 0.5 AS AY_Sem&#xA;&#x9;&#x9;&#x9;FROM DW_TERM_SETUP curr&#xA;&#x9;&#x9;&#x9;WHERE curr.Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;AND ISNULL(Semester,'') &lt;&gt; '') prev&#xA;&#x9;&#x9;ON prev.AY_Sem = curr.AY_Sem - 0.5) ts&#xA;&#x9;ON sbs.Awarded_Date BETWEEN ts.Semester_Begin_Date AND ts.Semester_End_Date&#xA;&#x9;&#x9;OR sbs.Awarded_Date BETWEEN ts.Prev_Semester_Begin_Date AND ts.Prev_Semester_End_Date&#xA;&#x9;WHERE sbs.Qual_Type = 'DPFT'&#xA;&#x9;AND sbs.App_Type = 'BUR' AND sbs.App_Status = 'DIS') bur&#xA;ON ofn.Student_ID = bur.Student_ID&#xA;&#x9;AND ofn.Academic_Year = bur.Academic_Year&#xA;&#x9;AND ofn.Semester = bur.Semester&#xA;LEFT JOIN (&#xA;&#x9;SELECT DISTINCT Student_ID, 'AY' + Acad_Yr AS Academic_Year&#xA;&#x9;FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs&#xA;&#x9;WHERE sbs.Qual_Type = 'DPFT'&#xA;&#x9;AND sbs.App_Type = 'CDC' AND sbs.App_Status IN ('ACC','FCS')&#xA;&#x9;UNION &#xA;&#x9;SELECT DISTINCT Student_ID, 'AY' + CAST((Acad_Yr + 1) AS varchar) AS Academic_Year&#xA;&#x9;FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs&#xA;&#x9;WHERE sbs.Qual_Type = 'DPFT'&#xA;&#x9;AND sbs.App_Type = 'CDC' AND sbs.App_Status IN ('ACC','FCS')) cdc&#xA;ON ofn.Student_ID = cdc.Student_ID &#xA;&#x9;AND ofn.Academic_Year = cdc.Academic_Year&#xA;&#xA;&#xA;&#xA;----Gross_Monthly_Household_Income/Household_Size-------------&#xA;UPDATE fas&#xA;SET fas.Gross_Monthly_Household_Income = CASE &#xA;&#x9;&#x9;&#x9;WHEN ISNULL(incomebur.Monthly_House_Hold_Income,0) &lt;&gt; 0 THEN incomebur.Monthly_House_Hold_Income&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(ISNULL(icare.Monthly_House_Hold_Income,icareprevyr.Monthly_House_Hold_Income),0) &lt;&gt; 0 THEN ISNULL(icare.Monthly_House_Hold_Income,icareprevyr.Monthly_House_Hold_Income)&#xA;&#x9;&#x9;&#x9;ELSE incomeapplcn.Monthly_House_Hold_Income END&#xA;&#xA; FROM &#xA;DM_OFN_STUDENT_FINANCIAL_STATUS fas&#xA;LEFT JOIN (&#xA;SELECT Student_ID, 'AY' + Acad_Year AS Academic_Year, 'S' + Semester AS Semester, Monthly_House_Hold_Income&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester, (sbs.PCI*sbs.Family_Members) as Monthly_House_Hold_Income,&#xA;&#x9;&#x9;&#x9;ROW_NUMBER() OVER ( &#xA;&#x9;&#x9;&#x9;PARTITION BY sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester&#xA;&#x9;&#x9;&#x9;ORDER BY App_Date DESC, PCI ASC) AS rownum&#xA;&#x9;&#x9;FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs&#xA;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester, ts.Semester_End_Date&#xA;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;&#x9;&#x9;&#x9;INNER JOIN DW_TERM_SETUP ts&#xA;&#x9;&#x9;&#x9;ON sdbat.Qual_Type = ts.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND sdbat.Term = ts.Term&#xA;&#x9;&#x9;&#x9;WHERE sdbat.Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;AND ts.Qual_Type = 'DPFT') sdbat&#xA;&#x9;&#x9;ON sbs.Student_ID = sdbat.Student_ID&#xA;&#x9;&#x9;&#x9;AND sbs.App_Date &lt;= sdbat.Semester_End_Date&#xA;&#x9;&#x9;WHERE sbs.Family_Members &gt; 0) incomebur&#xA;&#x9;WHERE incomebur.rownum = 1)incomebur&#xA;ON fas.Student_ID = incomebur.Student_ID&#xA;&#x9;AND fas.Academic_Year = incomebur.Academic_Year&#xA;&#x9;AND fas.Semester = incomebur.Semester&#xA;&#xA;LEFT JOIN(&#xA;&#xA;SELECT Student_ID, 'AY' + RIGHT(Survey_ID,4) AS Academic_Year, CAST(Response AS decimal(8,2)) AS Monthly_House_Hold_Income&#xA;&#x9;FROM V_DW_ICARE_SURVEY_OSS&#xA;&#x9;WHERE &#x9;Question_ID='ICAREGHI')icare&#xA;ON fas.Student_ID = icare.Student_ID&#xA;&#x9;AND fas.Academic_Year = icare.Academic_Year&#x9; &#xA;&#xA;LEFT JOIN(&#xA;&#xA;SELECT Student_ID, 'AY' + RIGHT(Survey_ID,4) +1 AS Academic_Year, CAST(Response AS decimal(8,2)) AS Monthly_House_Hold_Income&#xA;&#x9;FROM V_DW_ICARE_SURVEY_OSS&#xA;&#x9;WHERE &#x9;Question_ID='ICAREGHI')icareprevyr&#xA;ON fas.Student_ID = icare.Student_ID&#xA;&#x9;AND fas.Academic_Year = icare.Academic_Year&#x9; &#xA;&#xA;LEFT JOIN (&#xA;&#x9;&#x9;SELECT Applicant_ID, Total_Mth_Family_Household_Income as Monthly_House_Hold_Income&#xA;&#x9;&#x9;,Household_Size&#xA;&#x9;&#x9;&#xA;&#x9;FROM DW_APPLICANT_HOUSEHOLD_DETAILS&#xA;&#x9;WHERE REPLACE(Household_Size,'.','') &gt; 0) incomeapplcn&#xA;ON fas.Student_ID = incomeapplcn.Applicant_ID&#xA;&#xA;&#xA;-----------------------------------------------------------------Household_Size-----------------------&#xA;&#xA;UPDATE fas&#xA;SET fas.Household_Size= CASE &#xA;&#x9;&#x9;&#x9;WHEN ISNULL(incomebur.Household_Size,0) &lt;&gt; 0 THEN incomebur.Household_Size&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(ISNULL(icare.Household_Size,icareprevyr.Household_Size),0) &lt;&gt; 0 THEN ISNULL(icare.Household_Size,icareprevyr.Household_Size)&#xA;&#x9;&#x9;&#x9;ELSE incomeapplcn.Household_Size END&#xA;&#xA; FROM &#xA;DM_OFN_STUDENT_FINANCIAL_STATUS fas&#xA;LEFT JOIN (&#xA;SELECT Student_ID, 'AY' + Acad_Year AS Academic_Year, 'S' + Semester AS Semester, Household_Size&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester, sbs.Family_Members as Household_Size,&#xA;&#x9;&#x9;&#x9;ROW_NUMBER() OVER ( &#xA;&#x9;&#x9;&#x9;PARTITION BY sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester&#xA;&#x9;&#x9;&#x9;ORDER BY App_Date DESC, PCI ASC) AS rownum&#xA;&#x9;&#x9;FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs&#xA;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester, ts.Semester_End_Date&#xA;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;&#x9;&#x9;&#x9;INNER JOIN DW_TERM_SETUP ts&#xA;&#x9;&#x9;&#x9;ON sdbat.Qual_Type = ts.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND sdbat.Term = ts.Term&#xA;&#x9;&#x9;&#x9;WHERE sdbat.Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;AND ts.Qual_Type = 'DPFT') sdbat&#xA;&#x9;&#x9;ON sbs.Student_ID = sdbat.Student_ID&#xA;&#x9;&#x9;&#x9;AND sbs.App_Date &lt;= sdbat.Semester_End_Date&#xA;&#x9;&#x9;WHERE sbs.Family_Members &gt; 0 and sbs.Family_Members&lt;&gt;0) incomebur&#xA;&#x9;WHERE incomebur.rownum = 1)incomebur&#xA;ON fas.Student_ID = incomebur.Student_ID&#xA;&#x9;AND fas.Academic_Year = incomebur.Academic_Year&#xA;&#x9;AND fas.Semester = incomebur.Semester&#xA;&#xA;LEFT JOIN(&#xA;&#xA;SELECT Student_ID, 'AY' + RIGHT(Survey_ID,4) AS Academic_Year, CAST(Response AS smallint) AS Household_Size&#xA;&#x9;FROM V_DW_ICARE_SURVEY_OSS&#xA;&#x9;WHERE &#x9;Actual_Question='Total Household Members')icare&#xA;ON fas.Student_ID = icare.Student_ID&#xA;&#x9;AND fas.Academic_Year = icare.Academic_Year&#x9; &#xA;&#xA;LEFT JOIN(&#xA;&#xA;SELECT Student_ID, 'AY' + CAST(RIGHT(Survey_ID,4) +1 as varchar) AS Academic_Year, CAST(Response AS smallint) AS Household_Size&#xA;&#x9;FROM V_DW_ICARE_SURVEY_OSS&#xA;&#x9;WHERE &#x9;Actual_Question='Total Household Members')icareprevyr&#xA;ON fas.Student_ID = icare.Student_ID&#xA;&#x9;AND fas.Academic_Year = icare.Academic_Year&#x9; &#xA;&#xA;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT Applicant_ID, &#xA;&#x9;&#x9;CAST(REPLACE(Household_Size,'.','') AS smallint) AS Household_Size&#xA;&#x9;FROM DW_APPLICANT_HOUSEHOLD_DETAILS&#xA;&#x9;WHERE REPLACE(Household_Size,'.','') &gt; 0 ) incomeapplcn&#xA;ON fas.Student_ID = incomeapplcn.Applicant_ID&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;UPDATE fas&#xA;SET fas.Latest_Gross_Monthly_Household_Income = faslatest.Gross_Monthly_Household_Income,&#xA;&#x9;fas.Latest_Household_Size = faslatest.Household_Size&#xA;&#x9;FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas&#xA;INNER JOIN (&#xA;&#x9;SELECT DISTINCT Student_ID, Gross_Monthly_Household_Income, Household_Size&#xA;&#x9;FROM DM_OFN_STUDENT_FINANCIAL_STATUS&#xA;&#x9;WHERE Latest_Record_Ind = 'Y') faslatest&#xA;ON fas.Student_ID = faslatest.Student_ID&#xA;&#xA;&#xA;---------------PCI,PCI_Source,PC_group------------&#xA;UPDATE fas&#xA;SET fas.PCI = &#xA;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;WHEN ISNULL(incomebur.PCI,0) &lt;&gt; 0 THEN incomebur.PCI&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(ISNULL(icare.PCI,icareprevyr.PCI),0) &lt;&gt; 0 THEN ISNULL(icare.PCI,icareprevyr.PCI)&#xA;&#x9;&#x9;&#x9;ELSE incomeapplcn.PCI&#xA;&#x9;&#x9;END,&#xA;&#x9;fas.PCI_Source = &#xA;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;WHEN ISNULL(incomebur.PCI,0) &lt;&gt; 0 THEN 'Bursary'&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(ISNULL(icare.PCI,icareprevyr.PCI),0) &lt;&gt; 0 THEN 'ICARE'&#xA;&#x9;&#x9;&#x9;WHEN incomeapplcn.PCI IS NOT NULL THEN 'Enrolment'&#xA;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;END&#xA;FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas&#xA;LEFT JOIN (&#xA;&#x9;SELECT Student_ID, 'AY' + Acad_Year AS Academic_Year, 'S' + Semester AS Semester, PCI&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester, sbs.PCI,&#xA;&#x9;&#x9;&#x9;ROW_NUMBER() OVER ( &#xA;&#x9;&#x9;&#x9;PARTITION BY sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester&#xA;&#x9;&#x9;&#x9;ORDER BY App_Date DESC, PCI ASC) AS rownum&#xA;&#x9;&#x9;FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs&#xA;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester, ts.Semester_End_Date&#xA;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;&#x9;&#x9;&#x9;INNER JOIN DW_TERM_SETUP ts&#xA;&#x9;&#x9;&#x9;ON sdbat.Qual_Type = ts.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND sdbat.Term = ts.Term&#xA;&#x9;&#x9;&#x9;WHERE sdbat.Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;AND ts.Qual_Type = 'DPFT') sdbat&#xA;&#x9;&#x9;ON sbs.Student_ID = sdbat.Student_ID&#xA;&#x9;&#x9;&#x9;AND sbs.App_Date &lt;= sdbat.Semester_End_Date&#xA;&#x9;&#x9;WHERE sbs.Family_Members &gt; 0) incomebur&#xA;&#x9;WHERE incomebur.rownum = 1) incomebur&#xA;ON fas.Student_ID = incomebur.Student_ID&#xA;&#x9;AND fas.Academic_Year = incomebur.Academic_Year&#xA;&#x9;AND fas.Semester = incomebur.Semester&#xA;LEFT JOIN (&#xA;&#x9;SELECT Student_ID, 'AY' + RIGHT(Survey_ID,4) AS Academic_Year, CAST(Response AS decimal(8,2)) AS PCI&#xA;&#x9;FROM DW_ICARE_SURVEY_RESPONSE&#xA;&#x9;WHERE Survey_ID LIKE 'ICARE%'&#xA;&#x9;AND Qns_ID = 'ICAREPCI') icare&#xA;ON fas.Student_ID = icare.Student_ID&#xA;&#x9;AND fas.Academic_Year = icare.Academic_Year&#xA;LEFT JOIN (&#xA;&#x9;SELECT Student_ID, 'AY' + CAST(RIGHT(Survey_ID,4) + 1 AS varchar) AS Academic_Year, CAST(Response AS decimal(8,2)) AS PCI&#xA;&#x9;FROM DW_ICARE_SURVEY_RESPONSE&#xA;&#x9;WHERE Survey_ID LIKE 'ICARE%'&#xA;&#x9;AND Qns_ID = 'ICAREPCI') icareprevyr&#xA;ON fas.Student_ID = icareprevyr.Student_ID&#xA;&#x9;AND fas.Academic_Year = icareprevyr.Academic_Year&#xA;LEFT JOIN (&#xA;&#x9;SELECT Applicant_ID, &#xA;&#x9;&#x9;CAST(Total_Mth_Family_Household_Income/REPLACE(Household_Size,'.','') AS decimal(8,2)) AS PCI&#xA;&#x9;FROM DW_APPLICANT_HOUSEHOLD_DETAILS&#xA;&#x9;WHERE REPLACE(Household_Size,'.','') &gt; 0) incomeapplcn&#xA;ON fas.Student_ID = incomeapplcn.Applicant_ID;&#xA;&#xA;&#xA;UPDATE DM_OFN_STUDENT_FINANCIAL_STATUS&#xA;SET PCI_Group = &#xA;&#x9;CASE&#xA;&#x9;&#x9;WHEN PCI &lt; 125.00 THEN 'Less than $125'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 125.00 AND 250.99 THEN '$125 - $250'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 251.00 AND 500.99 THEN '$251 - $500'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 501.00 AND 625.99 THEN '$501 - $625'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 626.00 AND 1000.99 THEN '$626 - $1,000'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 1001.00 AND 1250.99 THEN '$1,001 - $1,250'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 1251.00 AND 1500.99 THEN '$1,251 - $1,500'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 1501.00 AND 1725.99 THEN '$1,501 - $1,725'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 1726.00 AND 2000.99 THEN '$1,726 - $2,000'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 2001.00 AND 2250.99 THEN '$$2,001 - $2,250'&#xA;&#x9;&#x9;WHEN PCI BETWEEN 2251.00 AND 2700.99 THEN '$$2,251 - $2,700'&#xA;&#x9;&#x9;WHEN PCI &gt; 2701.00 THEN '$2,701 and above'&#xA;&#x9;&#x9;ELSE 'Unknown'&#xA;&#x9;END;&#xA;&#xA;&#xA;UPDATE fas&#xA;SET fas.Latest_PCI = faslatest.PCI,&#xA;&#x9;fas.Latest_PCI_Group = faslatest.PCI_Group,&#xA;&#x9;fas.Latest_PCI_Source = faslatest.PCI_Source&#xA;FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas&#xA;INNER JOIN (&#xA;&#x9;SELECT DISTINCT Student_ID, PCI, PCI_Group, PCI_Source&#xA;&#x9;FROM DM_OFN_STUDENT_FINANCIAL_STATUS&#xA;&#x9;WHERE Latest_Record_Ind = 'Y') faslatest&#xA;ON fas.Student_ID = faslatest.Student_ID&#xA;&#xA;&#xA;----------------------------------Latest_No_of_Tuition_Grants_Remaining---------------------------&#xA;&#xA;&#xA;UPDATE fas&#xA;SET fas.Latest_No_of_Tuition_Grants_Remaining = tgs.Grants_Remaining&#xA;FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas&#xA;LEFT JOIN (&#xA;&#x9;SELECT Student_ID, Grants_Remaining&#xA;&#x9;FROM (&#x9;&#xA;&#x9;&#x9;SELECT Student_ID, Grants_Remaining,&#xA;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;PARTITION BY Student_ID&#xA;&#x9;&#x9;&#x9;ORDER BY Term DESC) AS rownum&#xA;&#x9;&#x9;FROM DW_STUDENT_TUITION_GRANT_STATUS&#xA;&#x9;&#x9;WHERE Qual_Type = 'DPFT') tgs&#xA;&#x9;WHERE rownum = 1) tgs&#xA;ON fas.Student_ID = tgs.Student_ID&#xA;&#xA;&#xA;&#xA;COMMIT TRANSACTION&#xA;END TRY&#xA;&#xA;BEGIN CATCH&#xA;ROLLBACK TRANSACTION&#xA;&#xA;  INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)&#xA;  SELECT   &#xA;         CAST(@jobstatusid as int) as JOB_STATUS_ID&#xA;        ,ERROR_MESSAGE() AS ErrorMessage&#xA;&#x9;&#x9;,getdate()  as created_on&#xA;END CATCH  &#xA;GO&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SQL_DM_Load">
      <DTS:VariableValue
        DTS:DataType="8">
BEGIN TRANSACTION
BEGIN TRY
--------------------------------------
DECLARE @jobstatusid varchar(10)
select @jobstatusid=0

Delete from DM_OFN_STUDENT_FINANCIAL_STATUS;
Insert into DM_OFN_STUDENT_FINANCIAL_STATUS
SELECT 
MAIN.Student_ID 
,MAIN.Qual_Type
,MAIN.Admit_Term
,Main.Enrolment_Term
,Main.Dept
,main.Descr as Department_Descr
,MAin.Prog
,main.programme as Programme
,'AY'+ MAin.Acad_Year
,'S'+main.Semester
,'AY' + RIGHT(main.Acad_Year,2) + 'S' + main.Semester as Academic_Term
,Main.Term
,main.NMC_Cluster
,main.Program_Status_Start_Academic_Term
,main.Program_Status_Start_Academic_Term_Descr
,main.Student_Status_End_Semester
,main.Student_Status_Descr_End_Semester
,main.Latest_Student_Status
,main.Latest_Student_Status_Descr
,main.Year_of_Study
,null as Latest_Year_of_Study--need to write update
,NULL as FAS_Status 
,main.Latest_Applied_Financial_Scheme
,main.Outstanding_Balance
,main.Total
,main.Race_Mapping_CMIO
,NULL as Gross_Monthly_Household_Income
,NULL as Latest_Gross_Monthly_Household_Income --need to write update
,NULL as Num_Household_Members
,NULL as Latest_Household_Size ----need to write update
,NULL as PCI
,NULL as PCI_Group
,NULL as  PCI_Source
,null as Latest_PCI
,null as Latest_PCI_Group
,null as Latest_PCI_Source
,main.Grants_Remaining
,main.Applied_Mendaki
,null as Latest_Applied_Mendaki
,main.Applied_CEFES
,null as Latest_Applied_CPFES 
,main.Applied_PSSO
,null as Latest_Applied_PSSO
,main.Applied_TFL
,null as Latest_Applied_TFL
,main.Applied_SLA
,null as Latest_Applied_SLA
,main.Applied_SLB
,null as Latest_Applied_SLB
,null as Latest_Record_Ind
,null as Latest_Acad_Term_Ind
,main.Term_GPA
,main.Term_cGPA
,null as Latest_cGPA
,main.Absent_Count
,main.Lessons_Count
,null as Absence_Percentage
,getdate()
,getdate()



from (

select distinct base.* 
,CASE WHEN FAS.Student_ID IS NULL THEN 'Non-FAS' ELSE 'FAS' END AS FAS_Status
,CASE WHEN FS.Student_ID IS NULL THEN 'N' ELSE 'Y' END AS Latest_Applied_Financial_Scheme
,CAB.Outstanding_Balance
,CAB_Tot.Total
,NULL as Gross_Monthly_Household_Income --FAS1.Gross_Monthly_Household_Income
,NULL as Num_Household_Members--FAS1.Num_Household_Members
,tgs.Grants_Remaining as Grants_Remaining
,CASE WHEN MDK.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_Mendaki
,CASE WHEN CPF.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_CEFES
,CASE WHEN PSSO.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_PSSO
,CASE WHEN TFL.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_TFL
,CASE WHEN SLA.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_SLA
,CASE WHEN SLB.Student_ID IS NULL THEN 'N' ELSE 'Y' end as Applied_SLB
--,base.Term_GPA
--,Base.Term_cGPA
,abst_cnt.Absent_Count
,Lessn_cnt.Lessons_Count
,d.Descr
,base.Prog+' - '+pt.Prog_Descr as programme
--,--CASE WHEN PCI_BS.PCI IS NULL THEN PCI_ICare.Response ELSE PCI_BS.PCI END as PCI
--,--CASE WHEN PCI_BS.PCI IS NULL THEN 'iCARE' ELSE 'Bursary' END as PCI_Source
from(
SELECT base.*,nmc.NMC_Cluster,sm.Program_Status_Start_Academic_Term,sm.Program_Status_Start_Academic_Term_Descr
,ROW_NUMBER() over(partition by base.student_id,base.semester,base.acad_year order by sm.Effective_Date DEsc, sm.Effective_Seq desc
)row_num
 from (
select --375700
a.Student_ID,a.Qual_Type,a.Admit_Term,a.Enrolment_Term,a.Dept,a.Prog,
a.Acad_Year,a.Semester,a.Term,a.Student_Status,a.Student_Status_Descr,a.Year_of_Study,a.Race_Mapping_CMIO,a.Term_cGPA,a.Term_GPA
 ,a.Student_Status_End_Semester, a.Student_Status_Descr_End_Semester, a.Prog_Action_End_Semester, a.Prog_Action_Descr_End_Semester
 --,a.Latest_Prog
 ,a.Latest_Prog_Action
 ,a.Latest_Student_Status,a.Latest_Student_Status_Descr
 --,a.Term_Begin_Date,a.Term_End_Date
 ,b.Semester_Begin_Date,b.Semester_End_Date
 FROM (


SELECT sdbat.Student_ID,sdbat.Qual_Type,sdbat.Admit_Term,sdbat.Enrolment_Term,sdbat.Dept,sdbat.Prog,
sdbat.Acad_Year,sdbat.Semester,sdbat.Term,sdbat.Student_Status,sdbat.Student_Status_Descr,sdbat.Year_of_Study,sdbat.Race_Mapping_CMIO,sdbat.Term_cGPA,sdbat.Term_GPA, 
	lt.Student_Status_End_Semester, lt.Student_Status_Descr_End_Semester, lt.Prog_Action_End_Semester, lt.Prog_Action_Descr_End_Semester,
	sm.Latest_Student_Status, sm.Latest_Student_Status_Descr, sm.Latest_Prog_Action
	--,lt.Term_Begin_Date,lt.Term_End_Date
FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
INNER JOIN (
	SELECT Student_ID, Qual_Type, Admit_Term, Prog, Acad_Year, Semester,
		Student_Status AS Student_Status_End_Semester, Student_Status_Descr AS Student_Status_Descr_End_Semester, 
		Prog_Action AS Prog_Action_End_Semester, Prog_Action_Descr AS Prog_Action_Descr_End_Semester
		,Term_Begin_Date,Term_End_Date
	FROM (
		SELECT d.Student_ID, d.Qual_Type, d.Admit_Term, d.Prog, d.Acad_Year, d.Semester, 
			d.Student_Status, d.Student_Status_Descr, 
			Prog_Action, Prog_Action_Descr,
			t.Semester_Begin_Date, t.Semester_End_Date,
			ROW_NUMBER() OVER (
			PARTITION BY d.Student_ID, d.Qual_Type, d.Acad_Year, d.Semester
			ORDER BY t.Term_End_Date DESC, d.Admit_Term DESC, d.Prog DESC) rownum
			,t.Term_Begin_Date,t.Term_End_Date
		FROM DW_STUDENT_DETAILS_BY_ACAD_TERM d
		INNER JOIN DW_TERM_SETUP t
		ON d.Qual_Type = t.Qual_Type
			AND d.Term = t.Term 
		WHERE d.Qual_Type = 'DPFT') d
	WHERE d.rownum = 1) lt -- latest Status for each AY and Sem
ON sdbat.Student_ID = lt.Student_ID
	AND sdbat.Qual_Type = lt.Qual_Type
	AND sdbat.Admit_Term = lt.Admit_Term
	AND sdbat.Prog = lt.Prog
	ANd sdbat.Acad_Year = lt.Acad_Year
	AND sdbat.Semester = lt.Semester
INNER JOIN (
	SELECT Student_Id, Qual_Type, Student_Status AS Latest_Student_Status, 
		Student_Status_Descr AS Latest_Student_Status_Descr, Prog_Action AS Latest_Prog_Action
	FROM (
		SELECT d.Student_ID, d.Qual_Type, d.Admit_Term, d.Prog, d.Acad_Year, d.Semester, 
			d.Student_Status, d.Student_Status_Descr, 
			Prog_Action, Prog_Action_Descr,
			t.Semester_Begin_Date, t.Semester_End_Date, 
			ROW_NUMBER() OVER (
			PARTITION BY d.Student_ID, d.Qual_Type
			ORDER BY t.Term_End_Date DESC, d.Admit_Term DESC, d.Prog DESC) rownum
		FROM DW_STUDENT_DETAILS_BY_ACAD_TERM d
		INNER JOIN DW_TERM_SETUP t
		ON d.Qual_Type = t.Qual_Type
			AND d.Term = t.Term 
		WHERE d.Qual_Type = 'DPFT') sm
	WHERE rownum = 1) sm -- Student_w_latest_status
ON sdbat.Student_ID = sm.Student_ID
	AND sdbat.Qual_Type = sdbat.Qual_Type
WHERE sdbat.Qual_Type = 'DPFT'
AND sdbat.Vacation_Term = 'No')a

LEFT JOIN DW_TERM_SETUP b on a.Term=b.Term and a.Qual_Type=b.Qual_Type
and a.Acad_Year=b.Acad_Year and a.Semester=b.Semester

)Base --Student_Base

LEFT JOIN DW_EXT_NMC nmc ON nmc.RP_Course_Code=Base.Prog and nmc.[Year]=base.Acad_Year

LEFT JOIN (select  Student_Id,Admit_Term,Prog,Qual_Type,Student_Status as Program_Status_Start_Academic_Term
,Student_Status_Descr  as Program_Status_Start_Academic_Term_Descr,Effective_Date,Effective_Seq from DW_STUDENT_MOVEMENT
) sm on sm.Student_Id=Base.Student_ID and sm.Prog=Base.Prog
 and sm.Admit_Term=base.Admit_Term and sm.Qual_Type=base.Qual_Type and sm.Effective_Date&lt;=base.Semester_Begin_Date
 
--)Chk_Dup
--group by Student_ID,Acad_Year,Semester
--having count(1)&gt;1

)base--Base completion 

--Joining with DW_SCHOLARSHIP_BURSARY_STATUS

LEFT JOIN (Select distinct Student_ID,Awarded_Date,Prog from DW_SCHOLARSHIP_BURSARY_STATUS 
where Qual_Type='DPFT' and App_Status='DIS')FAS on FAS.Student_ID=base.Student_ID
--and Fas.Prog=base.Prog 
and FAS.Awarded_Date between base.Semester_Begin_Date and base.Semester_End_Date

--Joining with DW_CUSTOMER_ACCT_FINCL_SCHEME

LEFT JOIN (Select distinct Student_ID from DW_CUSTOMER_ACCT_FINCL_SCHEME 
  where Scheme_App in ('MDK','PSSO','TFL','CPF','SLA','SLB') and App_Status='ACTV' and Qual_Type='DPFT'
  and Subsidy_Percent&gt;0 ) FS on FS.Student_ID=base.Student_ID

--Joining with DW_CUSTOMER_ACCOUNT_BALANCE
LEFT JOIN (Select Student_ID, Outstanding_Balance, Acct_Term, b.Acad_Year, b.Semester from 
(Select Student_ID, Sum(Bal) as Outstanding_Balance, Acct_Term 
from DW_CUSTOMER_ACCOUNT_BALANCE where Business_Unit='RPPET'
group  by Student_ID, Acct_Term
) a
left join 
DW_TERM_SETUP b
on a.Acct_Term=b.Term and  b.Descr like'%Sem%')CAB on CAB.Student_ID=base.Student_ID and CAB.Acad_Year=base.Acad_Year and cab.Semester=base.Semester

LEFT JOIN (Select cab_1.Student_ID, cab_1.Total 
	from (Select Student_ID, Total, ROW_NUMBER() over (partition by Student_ID 
order by Open_Date desc) as rn
from DW_CUSTOMER_ACCOUNT_BALANCE 
where Business_Unit='RPPET') cab_1 where rn=1)
CAB_Tot ON CAB_Tot.Student_ID=base.Student_ID

--LEFT JOIN (select student_ID,Gross_Monthly_Household_Income,Num_Household_Members,App_Date
--,ROW_NUMBER() Over (partition by student_ID order by App_Date desc)Row_Num from DW_FAS_APPLICATION
--where Gross_Monthly_Household_Income IS NOT NULL and  Gross_Monthly_Household_Income&lt;&gt;0.00)FAS1 
-- on FAS1.Student_ID=base.Student_ID  and FAS1.App_Date&lt;=base.Semester_End_Date and FAS1.Row_Num=1

--Joining with DW_STUDENT_TUITION_GRANT_STATUS

 LEFT JOIN DW_STUDENT_TUITION_GRANT_STATUS tgs on tgs.Student_ID=base.Student_ID and tgs.Qual_Type=base.Qual_Type
 and tgs.Term=base.Term

--Joining with DW_FINANCIAL_SCHEME_APPLICATION

LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION 
where Fin_Scheme_Applied='MDK' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) MDK on MDK.Student_ID=base.Student_ID
and (MDK.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or MDK.Last_Updated_Date &lt; base.Semester_Begin_Date )

LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION 
where Fin_Scheme_Applied='CPF' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) CPF on CPF.Student_ID=base.Student_ID
and (CPF.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or CPF.Last_Updated_Date &lt; base.Semester_Begin_Date )

LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION 
where Fin_Scheme_Applied='PSSO' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) PSSO on PSSO.Student_ID=base.Student_ID
and (PSSO.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or PSSO.Last_Updated_Date &lt; base.Semester_Begin_Date )

LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION 
where Fin_Scheme_Applied='TFL' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) TFL on TFL.Student_ID=base.Student_ID
and (TFL.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or TFL.Last_Updated_Date &lt; base.Semester_Begin_Date )

LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION 
where Fin_Scheme_Applied='SLA' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) SLA on SLA.Student_ID=base.Student_ID
and (SLA.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or SLA.Last_Updated_Date &lt; base.Semester_Begin_Date )

LEFT JOIN (Select cast(Last_Updated_Date as date) as Last_Updated_Date,Student_ID from DW_FINANCIAL_SCHEME_APPLICATION 
where Fin_Scheme_Applied='SLB' and App_Status = 'ACTV' and Subsidy_Percentage &gt; 0) SLB on SLB.Student_ID=base.Student_ID
and (SLB.Last_Updated_Date between base.Semester_Begin_Date and base.Semester_End_Date or SLB.Last_Updated_Date &lt; base.Semester_Begin_Date )


--Joining with V_DW_STUDENT_ATTENDANCE

LEFT JOIN (select STUDENT_ID, [Academic Year], Semester, TERM, COUNT(STUDENT_ID) as Absent_Count
 from V_DW_STUDENT_ATTENDANCE where [Attendance Status Desc] in ('Absent', 'Late and Partial', 'Partial')
 GROUP BY STUDENT_ID, [Academic Year], Semester, TERM) abst_cnt on abst_cnt.Student_ID=base.Student_ID
 and abst_cnt.[Academic Year]=base.Acad_Year and abst_cnt.Semester=base.Semester

 LEFT JOIN (select STUDENT_ID, [Academic Year], Semester, TERM, COUNT(STUDENT_ID) as Lessons_Count
 from V_DW_STUDENT_ATTENDANCE where [Attendance Status Desc] &lt;&gt; 'Not Recorded'
 GROUP BY STUDENT_ID, [Academic Year], Semester, TERM) Lessn_cnt on Lessn_cnt.Student_ID=base.Student_ID
 and Lessn_cnt.Semester=base.Semester and Lessn_cnt.[Academic Year]=base.Acad_Year

--Joining with DW_EXT_DEPARTMENT

 LEFT JOIN DW_EXT_DEPARTMENT d on base.Dept=d.Department

--Joining with DW_PET_PROGRAMME
 LEFT JOIN (select  Prog_Code,Prog_Descr,School_Centre from dbo.DW_PET_PROGRAMME a1
		 where a1.Effective_Date in (select max(b1.Effective_Date) from dbo.DW_PET_PROGRAMME b1 where b1.Prog_Code=a1.PROG_CODE)) PT 
ON base.Prog=PT.Prog_Code 

where Base.row_num=1 


)MAIN



-------------------------Update_Year OF study--------------

UPDATE a
SET a.Latest_Year_of_Study= b.Year_of_Study 
from DM_OFN_STUDENT_FINANCIAL_STATUS a
INNER JOIN 
(SELECT Student_ID,Year_of_Study from(
(SELECT Student_ID,Year_of_Study,ROW_NUMBER() over(partition by student_id order by Acad_term desc)as ROW_Num
 FROM [dbo].DM_OFN_STUDENT_FINANCIAL_STATUS))b where b.ROW_Num=1)b on a.Student_ID=b.Student_ID 

 -------------------------Update_Latest_Applied_Mendaki--------------

-- UPDATE a
-- SET a.Latest_Applied_Mendaki= b.Latest_Applied_Mendaki
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--INNER JOIN 
--(select 'Y' AS Latest_Applied_Mendaki,Student_ID
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]
-- where Applied_Mendaki='Y' )b on a.Student_ID=b.Student_ID 

-- UPDATE a
-- SET a.Latest_Applied_Mendaki= 'N'
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--where a.Latest_Applied_Mendaki IS NULL

update ofn
Set ofn.Latest_Applied_Mendaki=ISNULL(b.Latest_Applied_Mendaki,'N')

 --select ISNULL(b.Latest_Applied_Mendaki,'N') as Latest_Applied_Mendaki
    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn
    LEFT JOIN (
  Select distinct Student_ID,'Y' as Latest_Applied_Mendaki from DW_CUSTOMER_ACCT_FINCL_SCHEME 
  where Scheme_App in ('MDK') and App_Status='ACTV' and Qual_Type='DPFT'
  and Subsidy_Percent&gt;0)b
  on ofn.Student_ID=b.Student_ID



 ---------------------------Latest_Applied_CPFES------------
-- UPDATE a
-- SET a.Latest_Applied_CPFES= b.Latest_Applied_CEFES
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--INNER JOIN 
--(select 'Y' AS Latest_Applied_CEFES,Student_ID
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]
-- where Applied_CEFES='Y' )b on a.Student_ID=b.Student_ID 

-- UPDATE a
-- SET a.Latest_Applied_CPFES= 'N'
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--where a.Latest_Applied_CPFES IS NULL


update ofn
Set ofn.Latest_Applied_CPFES=ISNULL(b.Latest_Applied_CPFES,'N')

    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn
    LEFT JOIN (
  Select distinct Student_ID,'Y' as Latest_Applied_CPFES from DW_CUSTOMER_ACCT_FINCL_SCHEME 
  where Scheme_App in ('CPF') and App_Status='ACTV' and Qual_Type='DPFT'
  and Subsidy_Percent&gt;0)b
  on ofn.Student_ID=b.Student_ID


 ---------------Latest_Applied_PSSO----
-- UPDATE a
-- SET a.Latest_Applied_PSSO= b.Latest_Applied_PSSO
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--INNER JOIN 
--(select 'Y' AS Latest_Applied_PSSO,Student_ID
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]
-- where Applied_PSSO='Y' )b on a.Student_ID=b.Student_ID 

-- UPDATE a
-- SET a.Latest_Applied_PSSO= 'N'
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--where a.Latest_Applied_PSSO IS NULL


update ofn
Set ofn.Latest_Applied_PSSO=ISNULL(b.Latest_Applied_PSSO,'N')

    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn
    LEFT JOIN (
  Select distinct Student_ID,'Y' as Latest_Applied_PSSO from DW_CUSTOMER_ACCT_FINCL_SCHEME 
  where Scheme_App in ('PSSO') and App_Status='ACTV' and Qual_Type='DPFT'
  and Subsidy_Percent&gt;0)b
  on ofn.Student_ID=b.Student_ID
 
 ---------------------------Latest_Applied_TFL-------------

-- UPDATE a
-- SET a.Latest_Applied_TFL= b.Latest_Applied_TFL
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--INNER JOIN 
--(select 'Y' AS Latest_Applied_TFL,Student_ID
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]
-- where Applied_TFL='Y' )b on a.Student_ID=b.Student_ID 

-- UPDATE a
-- SET a.Latest_Applied_TFL= 'N'
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--where a.Latest_Applied_TFL IS NULL


update ofn
Set ofn.Latest_Applied_TFL=ISNULL(b.Latest_Applied_TFL,'N')
    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn
    LEFT JOIN (
  Select distinct Student_ID,'Y' as Latest_Applied_TFL from DW_CUSTOMER_ACCT_FINCL_SCHEME 
  where Scheme_App in ('TFL') and App_Status='ACTV' and Qual_Type='DPFT'
  and Subsidy_Percent&gt;0)b
  on ofn.Student_ID=b.Student_ID

-----------------------------Latest_Applied_SLA

--UPDATE a
-- SET a.Latest_Applied_SLA= b.Latest_Applied_SLA
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--INNER JOIN 
--(select 'Y' AS Latest_Applied_SLA,Student_ID
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]
-- where Applied_SLA='Y' )b on a.Student_ID=b.Student_ID 

-- UPDATE a
-- SET a.Latest_Applied_SLA= 'N'
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--where a.Latest_Applied_SLA IS NULL



update ofn
Set ofn.Latest_Applied_SLA=ISNULL(b.Latest_Applied_SLA,'N')


    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn
    LEFT JOIN (
  Select distinct Student_ID,'Y' as Latest_Applied_SLA from DW_CUSTOMER_ACCT_FINCL_SCHEME 
  where Scheme_App in ('SLA') and App_Status='ACTV' and Qual_Type='DPFT'
  and Subsidy_Percent&gt;0)b
  on ofn.Student_ID=b.Student_ID

-------------Latest_Applied_SLB----------
--UPDATE a
-- SET a.Latest_Applied_SLB= b.Latest_Applied_SLB
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--INNER JOIN 
--(select 'Y' AS Latest_Applied_SLB,Student_ID
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS]
-- where Applied_SLB='Y' )b on a.Student_ID=b.Student_ID 

-- UPDATE a
-- SET a.Latest_Applied_SLB= 'N'
-- from [DM_OFN_STUDENT_FINANCIAL_STATUS] a
--where a.Latest_Applied_SLB IS NULL


update ofn
Set ofn.Latest_Applied_SLB=ISNULL(b.Latest_Applied_SLB,'N')


    from DM_OFN_STUDENT_FINANCIAL_STATUS ofn
    LEFT JOIN (
  Select distinct Student_ID,'Y' as Latest_Applied_SLB from DW_CUSTOMER_ACCT_FINCL_SCHEME 
  where Scheme_App in ('SLB') and App_Status='ACTV' and Qual_Type='DPFT'
  and Subsidy_Percent&gt;0)b
  on ofn.Student_ID=b.Student_ID




 ------------Absence_Percentage-------------------
 Update a
 SET a.Absence_Percentage=b.Absence_Percentage
 FROM DM_OFN_STUDENT_FINANCIAL_STATUS a
 INNER JOIN(
 Select Absence_Count * 100.00  / Lessons_Count as Absence_Percentage,Academic_Year,Semester,Student_ID
from DM_OFN_STUDENT_FINANCIAL_STATUS) b on a.Student_ID=b.Student_ID and a.Semester=b.Semester
and a.Academic_Year=b.Academic_Year

-------------Latest_Record_Ind-------------
UPDATE a
SET a.Latest_Record_Ind='Y' 
,a.Latest_Acad_Term_Ind='Y'
from DM_OFN_STUDENT_FINANCIAL_STATUS a INNER JOIN 
(Select Student_ID,Acad_Term as Latest_Acad_Term,ROW_NUMBER() over(partition by Student_ID 
 order by Acad_Term desc)row_num
from DM_OFN_STUDENT_FINANCIAL_STATUS)b on a.Student_ID=b.Student_ID and a.Acad_Term=b.Latest_Acad_Term
and b.row_num=1

UPDATE a
SET a.Latest_Record_Ind='N' 
,a.Latest_Acad_Term_Ind='N'
from DM_OFN_STUDENT_FINANCIAL_STATUS a
where a.Latest_Record_Ind IS NULL and a.Latest_Acad_Term_Ind IS NULL




-------------Latest_Term_cGPA/Latest_Acad_Term_Ind----------
--Update a
--SET a.Latest_cGPA=b.Term_cGPA
--from DM_OFN_STUDENT_FINANCIAL_STATUS a
--INNER JOIN 
--(SELECT Student_ID,Term_cGPA from(
--(SELECT Student_ID,Term_cGPA,ROW_NUMBER() over(partition by student_id order by Acad_term desc)as ROW_Num
-- FROM [dbo].DM_OFN_STUDENT_FINANCIAL_STATUS where Term_cGPA IS NOT NULL) )b where b.ROW_Num=1)b 
-- on a.Student_ID=b.Student_ID 

UPDATE DM_OFN_STUDENT_FINANCIAL_STATUS
SET Latest_cGPA = Term_cGPA
WHERE Latest_Record_Ind = 'Y'


UPDATE fas
SET fas.Latest_cGPA = faslatest.Term_cGPA
FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas
INNER JOIN (
	SELECT DISTINCT Student_ID, Term_cGPA
	FROM DM_OFN_STUDENT_FINANCIAL_STATUS
	WHERE Latest_Record_Ind = 'Y') faslatest
ON fas.Student_ID = faslatest.Student_ID


UPDATE fas
SET fas.Latest_Acad_Term_Ind = ISNULL(fasmax.Latest_Acad_Term_Ind,'N')
FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas
LEFT JOIN (
	SELECT TOP 1 Academic_Year, Semester, 'Y' AS Latest_Acad_Term_Ind
	FROM (
		SELECT DISTINCT Academic_Year, Semester
		FROM DM_OFN_STUDENT_FINANCIAL_STATUS) fas
	ORDER BY Academic_Year DESC, Semester DESC) fasmax
ON fas.Academic_Year = fasmax.Academic_Year
	AND fas.Semester = fasmax.Semester




	---- 20200812: Changes in logic for FAS_Status to include BUR and CDC
UPDATE ofn
SET ofn.FAS_Status = 
	CASE 
		WHEN bur.Student_ID IS NOT NULL OR cdc.Student_ID IS NOT NULL THEN 'FAS'
		ELSE 'Non-FAS'
	END
FROM DM_OFN_STUDENT_FINANCIAL_STATUS ofn
LEFT JOIN (
	SELECT DISTINCT sbs.Student_ID, 'AY' + ts.Acad_Year AS Academic_Year, 'S' + ts.Semester AS Semester
	FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs
	INNER JOIN (
		SELECT curr.Acad_Year, curr.Semester, curr.Semester_Begin_Date, curr.Semester_End_Date, 
			prev.Semester_Begin_Date AS Prev_Semester_Begin_Date, prev.Semester_End_Date as Prev_Semester_End_Date
		FROM (
			SELECT DISTINCT Acad_Year, Semester, Semester_Begin_Date, Semester_End_Date, Acad_Year + (Semester - 1) * 0.5 AS AY_Sem
			FROM DW_TERM_SETUP curr
			WHERE curr.Qual_Type = 'DPFT'
			AND ISNULL(Semester,'') &lt;&gt; '') curr
		INNER JOIN (
			SELECT DISTINCT Acad_Year, Semester, Semester_Begin_Date, Semester_End_Date, Acad_Year + (Semester - 1) * 0.5 AS AY_Sem
			FROM DW_TERM_SETUP curr
			WHERE curr.Qual_Type = 'DPFT'
			AND ISNULL(Semester,'') &lt;&gt; '') prev
		ON prev.AY_Sem = curr.AY_Sem - 0.5) ts
	ON sbs.Awarded_Date BETWEEN ts.Semester_Begin_Date AND ts.Semester_End_Date
		OR sbs.Awarded_Date BETWEEN ts.Prev_Semester_Begin_Date AND ts.Prev_Semester_End_Date
	WHERE sbs.Qual_Type = 'DPFT'
	AND sbs.App_Type = 'BUR' AND sbs.App_Status = 'DIS') bur
ON ofn.Student_ID = bur.Student_ID
	AND ofn.Academic_Year = bur.Academic_Year
	AND ofn.Semester = bur.Semester
LEFT JOIN (
	SELECT DISTINCT Student_ID, 'AY' + Acad_Yr AS Academic_Year
	FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs
	WHERE sbs.Qual_Type = 'DPFT'
	AND sbs.App_Type = 'CDC' AND sbs.App_Status IN ('ACC','FCS')
	UNION 
	SELECT DISTINCT Student_ID, 'AY' + CAST((Acad_Yr + 1) AS varchar) AS Academic_Year
	FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs
	WHERE sbs.Qual_Type = 'DPFT'
	AND sbs.App_Type = 'CDC' AND sbs.App_Status IN ('ACC','FCS')) cdc
ON ofn.Student_ID = cdc.Student_ID 
	AND ofn.Academic_Year = cdc.Academic_Year



----Gross_Monthly_Household_Income/Household_Size-------------
UPDATE fas
SET fas.Gross_Monthly_Household_Income = CASE 
			WHEN ISNULL(incomebur.Monthly_House_Hold_Income,0) &lt;&gt; 0 THEN incomebur.Monthly_House_Hold_Income
			WHEN ISNULL(ISNULL(icare.Monthly_House_Hold_Income,icareprevyr.Monthly_House_Hold_Income),0) &lt;&gt; 0 THEN ISNULL(icare.Monthly_House_Hold_Income,icareprevyr.Monthly_House_Hold_Income)
			ELSE incomeapplcn.Monthly_House_Hold_Income END

 FROM 
DM_OFN_STUDENT_FINANCIAL_STATUS fas
LEFT JOIN (
SELECT Student_ID, 'AY' + Acad_Year AS Academic_Year, 'S' + Semester AS Semester, Monthly_House_Hold_Income
	FROM (
		SELECT sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester, (sbs.PCI*sbs.Family_Members) as Monthly_House_Hold_Income,
			ROW_NUMBER() OVER ( 
			PARTITION BY sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester
			ORDER BY App_Date DESC, PCI ASC) AS rownum
		FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs
		INNER JOIN (
			SELECT DISTINCT sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester, ts.Semester_End_Date
			FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
			INNER JOIN DW_TERM_SETUP ts
			ON sdbat.Qual_Type = ts.Qual_Type
				AND sdbat.Term = ts.Term
			WHERE sdbat.Qual_Type = 'DPFT'
			AND ts.Qual_Type = 'DPFT') sdbat
		ON sbs.Student_ID = sdbat.Student_ID
			AND sbs.App_Date &lt;= sdbat.Semester_End_Date
		WHERE sbs.Family_Members &gt; 0) incomebur
	WHERE incomebur.rownum = 1)incomebur
ON fas.Student_ID = incomebur.Student_ID
	AND fas.Academic_Year = incomebur.Academic_Year
	AND fas.Semester = incomebur.Semester

LEFT JOIN(

SELECT Student_ID, 'AY' + RIGHT(Survey_ID,4) AS Academic_Year, CAST(Response AS decimal(8,2)) AS Monthly_House_Hold_Income
	FROM V_DW_ICARE_SURVEY_OSS
	WHERE 	Question_ID='ICAREGHI')icare
ON fas.Student_ID = icare.Student_ID
	AND fas.Academic_Year = icare.Academic_Year	 

LEFT JOIN(

SELECT Student_ID, 'AY' + RIGHT(Survey_ID,4) +1 AS Academic_Year, CAST(Response AS decimal(8,2)) AS Monthly_House_Hold_Income
	FROM V_DW_ICARE_SURVEY_OSS
	WHERE 	Question_ID='ICAREGHI')icareprevyr
ON fas.Student_ID = icare.Student_ID
	AND fas.Academic_Year = icare.Academic_Year	 

LEFT JOIN (
		SELECT Applicant_ID, Total_Mth_Family_Household_Income as Monthly_House_Hold_Income
		,Household_Size
		
	FROM DW_APPLICANT_HOUSEHOLD_DETAILS
	WHERE REPLACE(Household_Size,'.','') &gt; 0) incomeapplcn
ON fas.Student_ID = incomeapplcn.Applicant_ID


-----------------------------------------------------------------Household_Size-----------------------

UPDATE fas
SET fas.Household_Size= CASE 
			WHEN ISNULL(incomebur.Household_Size,0) &lt;&gt; 0 THEN incomebur.Household_Size
			WHEN ISNULL(ISNULL(icare.Household_Size,icareprevyr.Household_Size),0) &lt;&gt; 0 THEN ISNULL(icare.Household_Size,icareprevyr.Household_Size)
			ELSE incomeapplcn.Household_Size END

 FROM 
DM_OFN_STUDENT_FINANCIAL_STATUS fas
LEFT JOIN (
SELECT Student_ID, 'AY' + Acad_Year AS Academic_Year, 'S' + Semester AS Semester, Household_Size
	FROM (
		SELECT sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester, sbs.Family_Members as Household_Size,
			ROW_NUMBER() OVER ( 
			PARTITION BY sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester
			ORDER BY App_Date DESC, PCI ASC) AS rownum
		FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs
		INNER JOIN (
			SELECT DISTINCT sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester, ts.Semester_End_Date
			FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
			INNER JOIN DW_TERM_SETUP ts
			ON sdbat.Qual_Type = ts.Qual_Type
				AND sdbat.Term = ts.Term
			WHERE sdbat.Qual_Type = 'DPFT'
			AND ts.Qual_Type = 'DPFT') sdbat
		ON sbs.Student_ID = sdbat.Student_ID
			AND sbs.App_Date &lt;= sdbat.Semester_End_Date
		WHERE sbs.Family_Members &gt; 0 and sbs.Family_Members&lt;&gt;0) incomebur
	WHERE incomebur.rownum = 1)incomebur
ON fas.Student_ID = incomebur.Student_ID
	AND fas.Academic_Year = incomebur.Academic_Year
	AND fas.Semester = incomebur.Semester

LEFT JOIN(

SELECT Student_ID, 'AY' + RIGHT(Survey_ID,4) AS Academic_Year, CAST(Response AS smallint) AS Household_Size
	FROM V_DW_ICARE_SURVEY_OSS
	WHERE 	Actual_Question='Total Household Members')icare
ON fas.Student_ID = icare.Student_ID
	AND fas.Academic_Year = icare.Academic_Year	 

LEFT JOIN(

SELECT Student_ID, 'AY' + CAST(RIGHT(Survey_ID,4) +1 as varchar) AS Academic_Year, CAST(Response AS smallint) AS Household_Size
	FROM V_DW_ICARE_SURVEY_OSS
	WHERE 	Actual_Question='Total Household Members')icareprevyr
ON fas.Student_ID = icare.Student_ID
	AND fas.Academic_Year = icare.Academic_Year	 

LEFT JOIN (
			SELECT Applicant_ID, 
		CAST(REPLACE(Household_Size,'.','') AS smallint) AS Household_Size
	FROM DW_APPLICANT_HOUSEHOLD_DETAILS
	WHERE REPLACE(Household_Size,'.','') &gt; 0 ) incomeapplcn
ON fas.Student_ID = incomeapplcn.Applicant_ID





UPDATE fas
SET fas.Latest_Gross_Monthly_Household_Income = faslatest.Gross_Monthly_Household_Income,
	fas.Latest_Household_Size = faslatest.Household_Size
	FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas
INNER JOIN (
	SELECT DISTINCT Student_ID, Gross_Monthly_Household_Income, Household_Size
	FROM DM_OFN_STUDENT_FINANCIAL_STATUS
	WHERE Latest_Record_Ind = 'Y') faslatest
ON fas.Student_ID = faslatest.Student_ID


---------------PCI,PCI_Source,PC_group------------
UPDATE fas
SET fas.PCI = 
		CASE 
			WHEN ISNULL(incomebur.PCI,0) &lt;&gt; 0 THEN incomebur.PCI
			WHEN ISNULL(ISNULL(icare.PCI,icareprevyr.PCI),0) &lt;&gt; 0 THEN ISNULL(icare.PCI,icareprevyr.PCI)
			ELSE incomeapplcn.PCI
		END,
	fas.PCI_Source = 
		CASE 
			WHEN ISNULL(incomebur.PCI,0) &lt;&gt; 0 THEN 'Bursary'
			WHEN ISNULL(ISNULL(icare.PCI,icareprevyr.PCI),0) &lt;&gt; 0 THEN 'ICARE'
			WHEN incomeapplcn.PCI IS NOT NULL THEN 'Enrolment'
			ELSE NULL
		END
FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas
LEFT JOIN (
	SELECT Student_ID, 'AY' + Acad_Year AS Academic_Year, 'S' + Semester AS Semester, PCI
	FROM (
		SELECT sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester, sbs.PCI,
			ROW_NUMBER() OVER ( 
			PARTITION BY sbs.Student_ID, sdbat.Acad_Year, sdbat.Semester
			ORDER BY App_Date DESC, PCI ASC) AS rownum
		FROM DW_SCHOLARSHIP_BURSARY_STATUS sbs
		INNER JOIN (
			SELECT DISTINCT sdbat.Student_ID, sdbat.Acad_Year, sdbat.Semester, ts.Semester_End_Date
			FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
			INNER JOIN DW_TERM_SETUP ts
			ON sdbat.Qual_Type = ts.Qual_Type
				AND sdbat.Term = ts.Term
			WHERE sdbat.Qual_Type = 'DPFT'
			AND ts.Qual_Type = 'DPFT') sdbat
		ON sbs.Student_ID = sdbat.Student_ID
			AND sbs.App_Date &lt;= sdbat.Semester_End_Date
		WHERE sbs.Family_Members &gt; 0) incomebur
	WHERE incomebur.rownum = 1) incomebur
ON fas.Student_ID = incomebur.Student_ID
	AND fas.Academic_Year = incomebur.Academic_Year
	AND fas.Semester = incomebur.Semester
LEFT JOIN (
	SELECT Student_ID, 'AY' + RIGHT(Survey_ID,4) AS Academic_Year, CAST(Response AS decimal(8,2)) AS PCI
	FROM DW_ICARE_SURVEY_RESPONSE
	WHERE Survey_ID LIKE 'ICARE%'
	AND Qns_ID = 'ICAREPCI') icare
ON fas.Student_ID = icare.Student_ID
	AND fas.Academic_Year = icare.Academic_Year
LEFT JOIN (
	SELECT Student_ID, 'AY' + CAST(RIGHT(Survey_ID,4) + 1 AS varchar) AS Academic_Year, CAST(Response AS decimal(8,2)) AS PCI
	FROM DW_ICARE_SURVEY_RESPONSE
	WHERE Survey_ID LIKE 'ICARE%'
	AND Qns_ID = 'ICAREPCI') icareprevyr
ON fas.Student_ID = icareprevyr.Student_ID
	AND fas.Academic_Year = icareprevyr.Academic_Year
LEFT JOIN (
	SELECT Applicant_ID, 
		CAST(Total_Mth_Family_Household_Income/REPLACE(Household_Size,'.','') AS decimal(8,2)) AS PCI
	FROM DW_APPLICANT_HOUSEHOLD_DETAILS
	WHERE REPLACE(Household_Size,'.','') &gt; 0) incomeapplcn
ON fas.Student_ID = incomeapplcn.Applicant_ID;


UPDATE DM_OFN_STUDENT_FINANCIAL_STATUS
SET PCI_Group = 
	CASE
		WHEN PCI &lt; 125.00 THEN 'Less than $125'
		WHEN PCI BETWEEN 125.00 AND 250.99 THEN '$125 - $250'
		WHEN PCI BETWEEN 251.00 AND 500.99 THEN '$251 - $500'
		WHEN PCI BETWEEN 501.00 AND 625.99 THEN '$501 - $625'
		WHEN PCI BETWEEN 626.00 AND 1000.99 THEN '$626 - $1,000'
		WHEN PCI BETWEEN 1001.00 AND 1250.99 THEN '$1,001 - $1,250'
		WHEN PCI BETWEEN 1251.00 AND 1500.99 THEN '$1,251 - $1,500'
		WHEN PCI BETWEEN 1501.00 AND 1725.99 THEN '$1,501 - $1,725'
		WHEN PCI BETWEEN 1726.00 AND 2000.99 THEN '$1,726 - $2,000'
		WHEN PCI BETWEEN 2001.00 AND 2250.99 THEN '$$2,001 - $2,250'
		WHEN PCI BETWEEN 2251.00 AND 2700.99 THEN '$$2,251 - $2,700'
		WHEN PCI &gt; 2701.00 THEN '$2,701 and above'
		ELSE 'Unknown'
	END;


UPDATE fas
SET fas.Latest_PCI = faslatest.PCI,
	fas.Latest_PCI_Group = faslatest.PCI_Group,
	fas.Latest_PCI_Source = faslatest.PCI_Source
FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas
INNER JOIN (
	SELECT DISTINCT Student_ID, PCI, PCI_Group, PCI_Source
	FROM DM_OFN_STUDENT_FINANCIAL_STATUS
	WHERE Latest_Record_Ind = 'Y') faslatest
ON fas.Student_ID = faslatest.Student_ID


----------------------------------Latest_No_of_Tuition_Grants_Remaining---------------------------


UPDATE fas
SET fas.Latest_No_of_Tuition_Grants_Remaining = tgs.Grants_Remaining
FROM DM_OFN_STUDENT_FINANCIAL_STATUS fas
LEFT JOIN (
	SELECT Student_ID, Grants_Remaining
	FROM (	
		SELECT Student_ID, Grants_Remaining,
			ROW_NUMBER() OVER (
			PARTITION BY Student_ID
			ORDER BY Term DESC) AS rownum
		FROM DW_STUDENT_TUITION_GRANT_STATUS
		WHERE Qual_Type = 'DPFT') tgs
	WHERE rownum = 1) tgs
ON fas.Student_ID = tgs.Student_ID



COMMIT TRANSACTION
END TRY

BEGIN CATCH
ROLLBACK TRANSACTION

  INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)
  SELECT   
         CAST(@jobstatusid as int) as JOB_STATUS_ID
        ,ERROR_MESSAGE() AS ErrorMessage
		,getdate()  as created_on
END CATCH  
GO</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{56D94E2C-807A-4690-B7DB-EBCFD8436D8A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="STAGE">
      <DTS:VariableValue
        DTS:DataType="8">DM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{34643CA3-3CA5-4209-A8F2-D6431B88FF9B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TgtTableName">
      <DTS:VariableValue
        DTS:DataType="8">DM_OFN_STUDENT_FINANCIAL_STATUS</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create ETL Job Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{9536413A-51E0-49D6-B803-7E89173C7B1C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create ETL Job Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E2E8C6CF-7F84-4A0E-914F-C7591FC9416D}"
          SQLTask:SqlStatementSource="Exec [dbo].[usp_InsertETLJobLog] ?, ?, ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Job_name"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="1"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="2"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="3"
            SQLTask:DtsVariableName="User::TgtTableName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Error Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{A04DF2FB-4599-4BB9-AB8C-2B430EE7867A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Error Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E2E8C6CF-7F84-4A0E-914F-C7591FC9416D}"
          SQLTask:SqlStatementSource="UPDATE [dbo].[ETL_JOB_STATUS]&#xA;SET&#xA;ERROR_MSG = 'STG table is not completed',&#xA;JOB_STATUS ='Fail'&#xA;--PROCESSED_ON =getdate()&#xA;WHERE JOB_STATUS_ID=?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\JOB_STATUS_ID"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{5A04840A-99AE-4652-BF89-FE22CAD3ADF4}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="JOB_STATUS_ID"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E2E8C6CF-7F84-4A0E-914F-C7591FC9416D}"
          SQLTask:SqlStatementSource="SELECT max([JOB_STATUS_ID])&#xA;      &#xA;  FROM [dbo].[ETL_JOB_STATUS] where [SOURCE_FILENAME]=? &#xA;---and convert(varchar(8),CREATED_ON,112)=convert--(varchar(8) ,getdate(),112)"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Into DM"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{5C6C8102-8A6A-432F-B46D-34D2AC19E2B7}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Into DM"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{532EDEC2-E3D1-46D4-8B9B-F13D59042229}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::SQL_DM_Load" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Process_Date"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{5D8B3E2E-13B2-4C29-BC8B-22FE0895284A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Process_Date"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{532EDEC2-E3D1-46D4-8B9B-F13D59042229}"
          SQLTask:SqlStatementSource="Select getdate()"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Process_date" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Process_date"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="135"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update Job Status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{C6E61913-0362-4B5D-9DAF-C88D30F33847}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update Job Status"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E2E8C6CF-7F84-4A0E-914F-C7591FC9416D}"
          SQLTask:SqlStatementSource="DECLARE &#xA;@jobstatusid INT &#xA;select @jobstatusid=?&#xA;IF exists(select * from dbo.ETL_ERROR_LOG where [JOB_STATUS_ID]=@jobstatusid)&#xA; BEGIN&#xA; Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Fail'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;  END&#xA;ELSE&#xA;BEGIN&#xA;Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Success'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;END" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Validate job status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{F6352DF9-DFC9-4F88-80B4-9828152B166F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Validate job status"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E2E8C6CF-7F84-4A0E-914F-C7591FC9416D}"
          SQLTask:SqlStatementSource="select CASE WHEN JOB_STATUS='Success' then 0 ELSE 1 END AS  JOB_STATUS&#xA;&#xA;from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT' and &#xA;  JOB_STATUS_ID in (Select max(JOB_STATUS_ID) from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT')"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Job_Status" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{C88F75A1-6F5F-4430-B11F-29606CF612A6}"
      DTS:From="Package\Process_Date"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Load Into DM" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{7A815B7B-519C-4231-B096-0883642ADA25}"
      DTS:From="Package\Create ETL Job Log"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\JOB_STATUS_ID" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{6FAEC700-B11C-40BF-86A9-C9F460181ACC}"
      DTS:From="Package\JOB_STATUS_ID"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Validate job status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{7DD3B765-2E01-4776-8714-BFC3DFB66D52}"
      DTS:From="Package\Load Into DM"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Update Job Status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[False]"
      DTS:CreationName=""
      DTS:DTSID="{AED41547-396F-46AA-8B3D-0DD9B477960C}"
      DTS:Expression="@[User::Job_Status]==1"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="False"
      DTS:To="Package\Error Log" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[True]"
      DTS:CreationName=""
      DTS:DTSID="{DEB1D5A0-69F2-47F1-AD4C-672D3757EA29}"
      DTS:Expression="@[User::Job_Status]==0"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="True"
      DTS:To="Package\Process_Date" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{A0F074A9-6EE7-4F02-8858-B9CE4DFC5B8B}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{4ECD55C5-2B6D-4440-8BFF-81AD739B3402}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{1666A7A1-1F1B-4D7F-B419-64654706C03F}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="ETL_ERROR_LOG">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{E2E8C6CF-7F84-4A0E-914F-C7591FC9416D}"
              SQLTask:SqlStatementSource="[dbo].[usp_InsertETLErrorLog] ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::JOB_STATUS_ID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="131"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::ErrorDescription"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="157,42"
          Id="Package\Create ETL Job Log"
          TopLeft="17,13" />
        <NodeLayout
          Size="123,42"
          Id="Package\Error Log"
          TopLeft="699,21" />
        <NodeLayout
          Size="142,42"
          Id="Package\JOB_STATUS_ID"
          TopLeft="230,18" />
        <NodeLayout
          Size="143,42"
          Id="Package\Load Into DM"
          TopLeft="486,219" />
        <NodeLayout
          Size="142,42"
          Id="Package\Process_Date"
          TopLeft="487,131" />
        <NodeLayout
          Size="165,42"
          Id="Package\Update Job Status"
          TopLeft="526,322" />
        <NodeLayout
          Size="166,42"
          Id="Package\Validate job status"
          TopLeft="446,22" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="557.75,173">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46"
              Start="0,0"
              End="0,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="174,36.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="56,0"
              Start="0,0"
              End="48.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="48.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="372,41">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="74,0"
              Start="0,0"
              End="66.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="66.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="557.5,261">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="51,61"
              Start="0,0"
              End="51,53.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.5"
                    Point2="0,30.5"
                    Point3="4,30.5" />
                  <mssgle:LineSegment
                    End="47,30.5" />
                  <mssgle:CubicBezierSegment
                    Point1="47,30.5"
                    Point2="51,30.5"
                    Point3="51,34.5" />
                  <mssgle:LineSegment
                    End="51,53.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[False]"
          TopLeft="612,42.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="87,0"
              Start="0,0"
              End="79.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="79.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="28.01365234375,5,23.4726953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[True]"
          TopLeft="529,64">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="29,67"
              Start="0,0"
              End="29,59.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.5"
                    Point2="0,33.5"
                    Point3="4,33.5" />
                  <mssgle:LineSegment
                    End="25,33.5" />
                  <mssgle:CubicBezierSegment
                    Point1="25,33.5"
                    Point2="29,33.5"
                    Point3="29,37.5" />
                  <mssgle:LineSegment
                    End="29,59.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="3.48755859375,38.5,22.0248828125,9.421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="162,42"
          Id="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          TopLeft="370,98" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[False]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[True]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>