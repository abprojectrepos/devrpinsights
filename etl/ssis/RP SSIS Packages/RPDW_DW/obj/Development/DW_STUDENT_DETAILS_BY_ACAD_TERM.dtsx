<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/30/2019 1:46:31 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NCS-110119GM22"
  DTS:CreatorName="NCS\P0500388"
  DTS:DelayValidation="True"
  DTS:DTSID="{03694D66-DF9D-4EFA-8B0A-91EBB78D2DA8}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.0900.40"
  DTS:LocaleID="18441"
  DTS:ObjectName="DW_STUDENT_DETAILS_BY_ACAD_TERM"
  DTS:PackageType="5"
  DTS:VersionBuild="135"
  DTS:VersionGUID="{006633E6-09A3-47F8-9207-5E9CA82B01D3}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DW]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{D981E45E-50EC-42FF-A869-3AA8F6A69DD6}"
      DTS:ObjectName="DW">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=abeamrpdev.7006065fdbb7.database.windows.net;User ID=dbadmin;Initial Catalog=RPDW_UAT;Provider=SQLNCLI11.1;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ErrorLog]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{E6A0FB44-42CF-4895-9C79-8163C39F0656}"
      DTS:ObjectName="ErrorLog">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DW_Initial_Catalog]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=abeamrpdev.7006065fdbb7.database.windows.net;User ID=dbadmin;Initial Catalog=RPDW_UAT;Provider=SQLNCLI11.1;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{447119D0-16CC-4F52-9E28-C265E03F83D9}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Duplicate_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CD61B7F7-1451-4169-ABE2-359536A920F8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Job_name">
      <DTS:VariableValue
        DTS:DataType="8">DW_STUDENT_DETAILS_BY_ACAD_TERM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0F18E581-0665-4502-AC01-2CFAE20FB0AA}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Job_Status">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{18DFE253-FCB6-4B96-92B9-DCDBB238DA6F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="JOB_STATUS_ID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{908D4A25-5831-431E-8E7A-30E4852EA757}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Mandatory_constraint_Check">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3FB7AD27-F3C2-40D3-AA35-1802643E5EFA}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Process_date">
      <DTS:VariableValue
        DTS:DataType="7">2/1/2019 2:58:47 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{626A26A2-2922-4B85-AF20-45C6F55E6936}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceTable">
      <DTS:VariableValue
        DTS:DataType="8">DW_STUDENT_MOVEMENT</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9819F436-D1A2-4CCD-A32F-B20BEE21320B}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;BEGIN TRANSACTION&#xA;BEGIN TRY&#xA;--------------------------------------&#xA;DECLARE @jobstatusid varchar(10)&#xA;select @jobstatusid=&quot;+ (DT_STR, 5,1252) @[User::JOB_STATUS_ID] +&quot;&#xA;&#xA;&#xA;DELETE FROM [dbo].[DW_STUDENT_DETAILS_BY_ACAD_TERM]&#xA;&#xA;INSERT INTO [dbo].[DW_STUDENT_DETAILS_BY_ACAD_TERM]&#xA;           ([Student_ID]&#xA;           ,[Qual_Type]&#xA;           ,[Qual_Type_Descr]&#xA;           ,[Admit_Term]&#xA;           ,[Prog]&#xA;           ,[Prog_Descr]&#xA;           ,[Dept]&#xA;           ,[Reqmt_Term]&#xA;           ,[Entry_Qualification]&#xA;           ,[Enrolment_Term]&#xA;           ,[Enrolment_Prog]&#xA;           ,[Enrolment_Prog_Descr]&#xA;           ,[Tuition_Grant_Status]&#xA;           ,[Residency_Type]&#xA;           ,[Race_Mapping_CMIO]&#xA;           ,[Term]&#xA;           ,[Acad_Year]&#xA;           ,[Semester]&#xA;           ,[Vacation_Term]&#xA;           ,[No_of_Semesters_with_Grades]&#xA;           ,[No_of_Semesters_Completed_EX]&#xA;           ,[Year_of_Study]&#xA;           ,[Student_Status]&#xA;           ,[Student_Status_Descr]&#xA;&#x9;&#x9;   ,[Student_Status_Effective_Date]&#xA;           ,[Prog_Action]&#xA;           ,[Prog_Action_Descr]&#xA;           ,[Student_Status_15th_day]&#xA;           ,[Student_Status_15th_day_Descr]&#xA;&#x9;&#x9;   ,[Student_Status_15th_day_Effective_Date]&#xA;           ,[Prog_Action_15th_day]&#xA;           ,[Prog_Action_15th_day_Descr]&#xA;           ,[Action_Reason]&#xA;           ,[Term_GPA]&#xA;           ,[Term_cGPA]&#xA;           ,[CREATED_ON]&#xA;           ,[MODIFIED_ON])&#xA;SELECT sdbat.Student_Id, sdbat.Qual_Type, sdbat.Qual_Type_Descr, sdbat.Admit_Term, sdbat.Prog, sdbat.Prog_Descr, sdbat.Dept,&#xA;&#x9;sdbat.Reqmt_Term, sdbat.Entry_Qual_Type, sdbat.Frozen_Intake_Term, sdbat.Enrolment_Prog, sdbat.Enrolment_Prog_Descr, &#xA;&#x9;sdbat.Tuition_Grant_Status, sdbat.Residency_Type, sdbat. Race_Mapping_CMIO, sdbat.Term, sdbat.Acad_Year, sdbat.Semester,&#xA;&#x9;sdbat.Vacation_Term, &#xA;&#x9;NULL AS No_of_Semesters_with_Grades, NULL AS No_of_Semesters_Completed_Ex, NULL AS Year_of_Study,&#xA;&#x9;sdbat.Student_Status, sdbat.Student_Status_Descr, sdbat.Student_Status_Effective_Date, sdbat.Prog_Action, sdbat.Prog_Action_Descr, &#xA;&#x9;sdbat.Student_Status_15th_day, sdbat.Student_Status_15th_day_Descr, sdbat.Student_Status_15th_day_Effective_Date,&#xA;&#x9;sdbat.Prog_Action_15th_day, sdbat.Prog_Action_15th_day_Descr,&#xA;&#x9;sdbat.Action_Reason, sdbat.Term_Gpa, sdbat.Term_cGPA, &#xA;&#x9;SYSDATETIME() AS CREATED_ON, SYSDATETIME() AS MODIFIED_ON&#xA;FROM (&#xA;&#x9;SELECT sdbat.Student_Id, sdbat.Qual_Type, sdbat.Qual_Type_Descr, sdbat.Admit_Term, sdbat.Prog, sdbat.Prog_Descr, sdbat.Dept,&#xA;&#x9;&#x9;sdbat.Reqmt_Term, sdbat.Entry_Qual_Type, sdbat.Frozen_Intake_Term, sdbat.Enrolment_Prog, sdbat.Enrolment_Prog_Descr, &#xA;&#x9;&#x9;sdbat.Tuition_Grant_Status, sdbat.Residency_Type, sdbat. Race_Mapping_CMIO, sdbat.Term, sdbat.Acad_Year, sdbat.Semester,&#xA;&#x9;&#x9;sdbat.Vacation_Term, &#xA;&#x9;&#x9;sdbat.Student_Status, sdbat.Student_Status_Descr, sdbat.Student_Status_Effective_Date, sdbat.Prog_Action, sdbat.Prog_Action_Descr, &#xA;&#x9;&#x9;smfor15thday.Student_Status AS Student_Status_15th_day, smfor15thday.Student_Status_Descr AS Student_Status_15th_day_Descr,&#xA;&#x9;&#x9;smfor15thday.Effective_Date AS Student_Status_15th_day_Effective_Date,&#xA;&#x9;&#x9;smfor15thday.Prog_Action AS Prog_Action_15th_day, smfor15thday.Prog_Action_Descr AS Prog_Action_15th_day_Descr,&#xA;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;PARTITION BY sdbat.Student_Id, sdbat.Qual_Type, sdbat.Admit_Term, sdbat.Prog, sdbat.Term &#xA;&#x9;&#x9;ORDER BY smfor15thday.Effective_Date DESC, smfor15thday.Effective_Seq DESC) AS rownum,&#xA;&#x9;&#x9;sdbat.Action_Reason, sdbat.Term_Gpa, sdbat.Term_cGPA&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT b.Student_Id, b.Qual_Type, b.Qual_Type_Descr, b.Admit_Term, b.Prog, prog.Prog_Descr, prog.School_Centre AS Dept, b.Reqmt_Term,&#xA;&#x9;&#x9;&#x9;sd.Entry_Qual_Type, sfe.Frozen_Intake_Term, sfe.Acad_Prog AS Enrolment_Prog, sfe.Programme_Desc As Enrolment_Prog_Descr, &#xA;&#x9;&#x9;&#x9;tgs.Grant_Status AS Tuition_Grant_Status, sd.Residency_Type, sd.Race_Mapping_CMIO, ts.Term, ts.Acad_Year, ts.Semester, ts.Vacation_Term,&#xA;&#x9;&#x9;&#x9;smforlatest.Student_Status, smforlatest.Student_Status_Descr, smforlatest.Effective_Date AS Student_Status_Effective_Date, &#xA;&#x9;&#x9;&#x9;smforlatest.Prog_Action, smforlatest.Prog_Action_Descr, smforlatest.Action_Reason,&#xA;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;PARTITION BY b.Student_Id, b.Qual_Type, b.Admit_Term, b.Prog, ts.Term &#xA;&#x9;&#x9;&#x9;ORDER BY smforlatest.Effective_Date DESC, smforlatest.Effective_Seq DESC) AS rownum,&#xA;&#x9;&#x9;&#x9;gpa.Term_Gpa, gpa.Cumulative_Gpa AS Term_cGPA, &#xA;&#x9;&#x9;&#x9;ts.Term_Begin_Date&#xA;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;---- Start Student Programmes which are no longer active&#xA;&#x9;&#x9;&#x9;SELECT s.Student_Id, s.Qual_Type, s.Qual_Type_Descr, s.Admit_Term, s.Prog, s.Reqmt_Term, s.Effective_Date AS Effective_Date_Begin, e.Effective_Date AS Effective_Date_End&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY EFFECTIVE_DATE ASC, EFFECTIVE_SEQ ASC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND Student_Status = 'AC' AND Prog_Action IN ('MATR','PRGC')) s&#xA;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) s&#xA;&#x9;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) e&#xA;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1&#xA;&#x9;&#x9;&#x9;&#x9;AND Student_Status NOT IN ('AC','LA','SP')) e&#xA;&#x9;&#x9;&#x9;ON s.Student_Id = e.Student_Id&#xA;&#x9;&#x9;&#x9;&#x9;AND s.Qual_Type = e.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND s.Admit_Term = e.Admit_Term&#xA;&#x9;&#x9;&#x9;&#x9;AND s.Prog = e.Prog&#xA;&#x9;&#x9;&#x9;&#x9;AND ((s.Effective_Date = e.Effective_Date AND s.Effective_Seq &lt; e.Effective_Seq)&#xA;&#x9;&#x9;&#x9;&#x9;OR s.Effective_Date &lt; e.Effective_Date)&#xA;&#x9;&#x9;&#x9;---- End Student Programmes which are no longer active&#xA;&#x9;&#x9;&#x9;UNION ALL&#xA;&#x9;&#x9;&#x9;---- Start Student Programmes which are still active&#xA;&#x9;&#x9;&#x9;SELECT s.Student_Id, s.Qual_Type, s.Qual_Type_Descr, s.Admit_Term, s.Prog, s.Reqmt_Term, s.Effective_Date AS Effective_Date_Begin, &#xA;&#x9;&#x9;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN e.Effective_Date &gt; CAST(SYSDATETIME() AS DATE) THEN CAST(SYSDATETIME() AS DATE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN t.Term_Begin_Date IS NOT NULL AND t.Term_Begin_Date &gt; CAST(SYSDATETIME() AS DATE) THEN CAST(SYSDATETIME() AS DATE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;--WHEN t.Term_End_Date IS NOT NULL AND t.Term_End_Date &gt; e.Effective_Date THEN t.Term_End_Date &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;--ELSE e.Effective_Date -- change this to CAST(SYSDATETIME() AS DATE) if too many terms are incorrectly excluded&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE CAST(SYSDATETIME() AS DATE) -- change this to e.Effective_Date if end period is too extended&#xA;&#x9;&#x9;&#x9;&#x9;END AS Effective_Date_End&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Expected_Grad_Term&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT s.Student_Id, s.Qual_Type, s.Qual_Type_Descr, s.Admit_Term, s.Prog, s.Reqmt_Term, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;s.Effective_Date, s.Effective_Seq, s.Expected_Grad_Term,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY s.Student_Id, s.Qual_Type, s.Admit_Term, s.Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY s.EFFECTIVE_DATE DESC, s.EFFECTIVE_SEQ DESC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Expected_Grad_Term&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT s &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND Student_Status = 'AC' AND Prog_Action IN ('MATR','PRGC')) s&#xA;&#x9;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) e&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND Student_Status NOT IN ('AC','LA','SP')) ended&#xA;&#x9;&#x9;&#x9;&#x9;ON s.Student_Id = ended.Student_Id&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Qual_Type = ended.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Admit_Term = ended.Admit_Term&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Prog = ended.Prog &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND ((s.Effective_Date = ended.Effective_Date AND s.Effective_Seq &lt; ended.Effective_Seq)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OR s.Effective_Date &lt; ended.Effective_Date)&#xA;&#x9;&#x9;&#x9;&#x9;WHERE ended.Student_Id IS NULL&#xA;&#x9;&#x9;&#x9;&#x9;AND NOT EXISTS (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT e&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE s.Student_Id = e.Student_Id&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Qual_Type = e.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Admit_Term = e.Admit_Term&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND e.Student_Status = 'AC' AND e.Prog_Action = 'PRGC'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND ((s.Effective_Date = e.Effective_Date AND s.Effective_Seq &lt; e.Effective_Seq)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OR s.Effective_Date &lt; e.Effective_Date))) s&#xA;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) s&#xA;&#x9;&#x9;&#x9;LEFT JOIN DW_TERM_SETUP t&#xA;&#x9;&#x9;&#x9;ON ISNULL(s.Expected_Grad_Term,'') &lt;&gt; ''&#xA;&#x9;&#x9;&#x9;&#x9;AND t.Qual_Type = s.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND t.Term = s.Expected_Grad_Term&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) e&#xA;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) e&#xA;&#x9;&#x9;&#x9;ON s.Student_Id = e.Student_Id&#xA;&#x9;&#x9;&#x9;&#x9;AND s.Qual_Type = e.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND s.Admit_Term = e.Admit_Term&#xA;&#x9;&#x9;&#x9;&#x9;AND s.Prog = e.Prog&#xA;&#x9;&#x9;&#x9;&#x9;AND ((s.Effective_Date = e.Effective_Date AND s.Effective_Seq &lt; e.Effective_Seq)&#xA;&#x9;&#x9;&#x9;&#x9;OR s.Effective_Date &lt; e.Effective_Date)&#xA;&#x9;&#x9;&#x9;-- End Student Programmes which are still active&#xA;&#x9;&#x9;&#x9;UNION ALL&#xA;&#x9;&#x9;&#x9;---- Start Change of Programme&#xA;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date_Begin, Effective_Date_End&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT s.Student_Id, s.Qual_Type, s.Qual_Type_Descr, s.Admit_Term, s.Prog, s.Reqmt_Term, s.Effective_Date AS Effective_Date_Begin, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN e.Effective_Date &gt; CAST(SYSDATETIME() AS DATE) THEN CAST(SYSDATETIME() AS DATE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN e.Effective_Date IS NOT NULL THEN DATEADD(day,-1,e.Effective_Date) -- change of program&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN t.Term_Begin_Date IS NOT NULL AND t.Term_Begin_Date &gt; CAST(SYSDATETIME() AS DATE) THEN CAST(SYSDATETIME() AS DATE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN t.Term_End_Date IS NOT NULL AND t.Term_End_Date &gt; e.Effective_Date THEN t.Term_End_Date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE CAST(SYSDATETIME() AS DATE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END AS Effective_Date_End,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY s.Student_Id, s.Qual_Type, s.Admit_Term, s.Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY e.Effective_Date ASC, e.Effective_Seq ASC) AS rownum&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Expected_Grad_Term&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Expected_Grad_Term,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT s &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND Student_Status = 'AC' AND Prog_Action IN ('MATR','PRGC')) s&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) s&#xA;&#x9;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) e&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND Student_Status NOT IN ('AC','LA','SP')) ended&#xA;&#x9;&#x9;&#x9;&#x9;ON s.Student_Id = ended.Student_Id&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Qual_Type = ended.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Admit_Term = ended.Admit_Term&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Prog = ended.Prog &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND ((s.Effective_Date = ended.Effective_Date AND s.Effective_Seq &lt; ended.Effective_Seq)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OR s.Effective_Date &lt; ended.Effective_Date)&#xA;&#x9;&#x9;&#x9;&#x9;LEFT JOIN DW_TERM_SETUP t&#xA;&#x9;&#x9;&#x9;&#x9;ON ISNULL(s.Expected_Grad_Term,'') &lt;&gt; ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND t.Qual_Type = s.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND t.Term = s.Expected_Grad_Term&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND Student_Status = 'AC' AND Prog_Action = 'PRGC') e&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) e&#xA;&#x9;&#x9;&#x9;&#x9;ON s.Student_Id = e.Student_Id&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Qual_Type = e.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND s.Admit_Term = e.Admit_Term&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;--AND s.Prog = e.Prog &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND ((s.Effective_Date = e.Effective_Date AND s.Effective_Seq &lt; e.Effective_Seq)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OR s.Effective_Date &lt; e.Effective_Date)&#xA;&#x9;&#x9;&#x9;&#x9;WHERE ended.Student_Id IS NULL) cop&#xA;&#x9;&#x9;&#x9;WHERE rownum = 1&#xA;&#x9;&#x9;&#x9;-- End Change of Programme&#xA;&#x9;&#x9;&#x9;) b  -- Student Movement Matriculation and Completion Base&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT Prog_Code, Prog_Descr, School_Centre&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Prog_Code, Prog_Descr, School_Centre,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Prog_Code &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY Effective_Date DESC) AS rownum&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_PET_PROGRAMME&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) prog&#xA;&#x9;&#x9;&#x9;WHERE rownum = 1) prog -- Programme Lookup&#xA;&#x9;&#x9;ON b.Prog = prog.Prog_Code&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT sd.Student_ID, sd.Admit_Term, eqt.Entry_Qual_Type, sd.Residency_Type, cmio.Race_Mapping_CMIO&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Student_ID, Admit_Term, Applicatn_Number, Residency_Type, Ethnic_Group&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS) sd&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT App_Number, Entry_Qual&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_APPLICANT_DETAILS&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) ad&#xA;&#x9;&#x9;&#x9;ON sd.Applicatn_Number = ad.App_Number&#xA;&#x9;&#x9;&#x9;LEFT JOIN DW_EXT_ENTRY_QUAL_TYPE eqt&#xA;&#x9;&#x9;&#x9;ON ad.Entry_Qual = eqt.Entry_Qual&#xA;&#x9;&#x9;&#x9;LEFT JOIN DW_CMIO_MAPPING cmio&#xA;&#x9;&#x9;&#x9;ON sd.Ethnic_Group = cmio.System_Race_Code) sd -- Distinct Student Details&#xA;&#x9;&#x9;ON b.Student_Id = sd.Student_ID&#xA;&#x9;&#x9;&#x9;AND b.Admit_Term = sd.Admit_Term&#xA;&#x9;&#x9;LEFT JOIN DW_STUDENT_FROZEN_ENROLMENT sfe -- Student Frozen Enrolment&#xA;&#x9;&#x9;ON b.Student_Id = sfe.Student_Id&#xA;&#x9;&#x9;&#x9;AND b.Admit_Term = sfe.Admit_Term&#xA;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;SELECT Qual_Type, Term,&#xA;&#x9;&#x9;&#x9;&#x9;CASE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN Short_Desc LIKE '%Vac%' THEN 'Yes'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 'No'&#xA;&#x9;&#x9;&#x9;&#x9;END AS Vacation_Term, &#xA;&#x9;&#x9;&#x9;&#x9;Term_Begin_Date, Term_End_Date, Acad_Year, Semester, Semester_Begin_Date, Semester_End_Date&#xA;&#x9;&#x9;&#x9;FROM DW_TERM_SETUP &#xA;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) ts -- Term Setup&#xA;&#x9;&#x9;ON b.Qual_Type = ts.Qual_Type&#xA;&#x9;&#x9;&#x9;AND (ts.Term_Begin_Date BETWEEN b.Effective_Date_Begin AND b.Effective_Date_End&#xA;&#x9;&#x9;&#x9;OR ts.Term_End_Date BETWEEN b.Effective_Date_Begin AND b.Effective_Date_End&#xA;&#x9;&#x9;&#x9;OR (b.Effective_Date_Begin BETWEEN ts.Term_Begin_Date AND ts.Term_End_Date&#xA;&#x9;&#x9;&#x9;AND b.Effective_Date_End BETWEEN ts.Term_Begin_Date AND ts.Term_End_Date))&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT tgs.Student_ID, tgs.Qual_Type, ts.Acad_Year, ts.Semester, tgs.Grant_Status&#xA;&#x9;&#x9;&#x9;FROM DW_STUDENT_TUITION_GRANT_STATUS tgs&#xA;&#x9;&#x9;&#x9;INNER JOIN DW_TERM_SETUP ts&#xA;&#x9;&#x9;&#x9;ON tgs.Qual_Type = ts.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;AND tgs.Term = ts.Term&#xA;&#x9;&#x9;&#x9;WHERE tgs.Qual_Type IN ('DPFT','PFP')) tgs -- Student Tuition Grant&#xA;&#x9;&#x9;ON b.Student_Id = tgs.Student_ID&#xA;&#x9;&#x9;&#x9;AND b.Qual_Type = tgs.Qual_Type&#xA;&#x9;&#x9;&#x9;AND ts.Acad_Year = tgs.Acad_Year&#xA;&#x9;&#x9;&#x9;AND ts.Semester = tgs.Semester&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT gpa.Student_Id, gpa.Reqmt_Term, ts.Acad_Year, ts.Semester, gpa.Term_Gpa, gpa.Cumulative_Gpa&#xA;&#x9;&#x9;&#x9;FROM DW_STUDENT_GPA gpa&#xA;&#x9;&#x9;&#x9;INNER JOIN DW_TERM_SETUP ts&#xA;&#x9;&#x9;&#x9;ON gpa.Acad_Term = ts.Term&#xA;&#x9;&#x9;&#x9;&#x9;AND gpa.Qual_Type = ts.Qual_Type&#xA;&#x9;&#x9;&#x9;WHERE gpa.Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;AND ts.Qual_Type = 'DPFT') gpa -- Student GPA &#xA;&#x9;&#x9;ON b.Student_Id = gpa.Student_Id&#xA;&#x9;&#x9;&#x9;AND b.Reqmt_Term = gpa.Reqmt_Term&#xA;&#x9;&#x9;&#x9;AND ts.Acad_Year = gpa.Acad_Year&#xA;&#x9;&#x9;&#x9;AND ts.Semester = gpa.Semester&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, &#xA;&#x9;&#x9;&#x9;&#x9;Student_Status, Student_Status_Descr, Prog_Action, Prog_Action_Descr, Action_Reason&#xA;&#x9;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT&#xA;&#x9;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) smforlatest&#xA;&#x9;&#x9;ON b.Student_Id = smforlatest.Student_Id&#xA;&#x9;&#x9;&#x9;AND b.Qual_Type = smforlatest.Qual_Type&#xA;&#x9;&#x9;&#x9;AND b.Admit_Term = smforlatest.Admit_Term&#xA;&#x9;&#x9;&#x9;AND b.Prog = smforlatest.Prog&#xA;&#x9;&#x9;&#x9;AND smforlatest.Effective_Date &lt;= ts.Term_End_Date) sdbat&#xA;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, &#xA;&#x9;&#x9;&#x9;Student_Status, Student_Status_Descr, Prog_Action, Prog_Action_Descr, Action_Reason&#xA;&#x9;&#x9;FROM DW_STUDENT_MOVEMENT&#xA;&#x9;&#x9;WHERE Qual_Type IN ('DPFT','PFP')) smfor15thday&#xA;&#x9;ON sdbat.Student_Id = smfor15thday.Student_Id&#xA;&#x9;&#x9;AND sdbat.Qual_Type = smfor15thday.Qual_Type&#xA;&#x9;&#x9;AND sdbat.Admit_Term = smfor15thday.Admit_Term&#xA;&#x9;&#x9;AND sdbat.Prog = smfor15thday.Prog&#xA;&#x9;&#x9;AND smfor15thday.Effective_Date &lt;= DATEADD(day,14,sdbat.Term_Begin_Date)&#xA;&#x9;WHERE sdbat.rownum = 1) sdbat&#xA;WHERE sdbat.rownum = 1;&#xA;&#xA;&#xA;UPDATE DW_STUDENT_DETAILS_BY_ACAD_TERM&#xA;SET Year_of_Study = 'PFP'&#xA;WHERE Qual_Type = 'PFP';&#xA;&#xA;&#xA;UPDATE sdbat&#xA;SET sdbat.No_of_Semesters_with_Grades = ISNULL(gpawithexempt.No_of_Semesters_with_Grades,0),&#xA;&#x9;sdbat.No_of_Semesters_Completed_EX = ISNULL(gpawithexempt.No_of_Semesters_Completed_Ex,0),&#xA;&#x9;sdbat.Year_of_Study = ISNULL(gpawithexempt.Year_of_Study,1)&#xA;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;LEFT JOIN (&#xA;&#x9;SELECT Student_ID, Reqmt_Term, Acad_Year, Semester, No_of_Semesters_with_Grades, No_of_Semesters_Completed_Ex,&#xA;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;WHEN No_of_Semesters_Completed_Ex BETWEEN 0 AND 1 THEN '1'&#xA;&#x9;&#x9;&#x9;WHEN No_of_Semesters_Completed_Ex BETWEEN 2 AND 3 THEN '2'&#xA;&#x9;&#x9;&#x9;WHEN No_of_Semesters_Completed_Ex &gt;= 4 THEN '3'&#xA;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;END AS Year_of_Study&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT gpa.Student_Id, gpa.Reqmt_Term, &#xA;&#x9;&#x9;&#x9;gpa.Acad_Year, gpa.Semester, ISNULL(gpa.No_of_Semesters_with_Grades,0) AS No_of_Semesters_with_Grades,&#xA;&#x9;&#x9;&#x9;ISNULL(gpa.No_of_Semesters_with_Grades,0) + &#xA;&#x9;&#x9;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN exempt.Modular_Credits_Exempted BETWEEN 20 AND 39.99 THEN 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN exempt.Modular_Credits_Exempted &gt;= 40 THEN 2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 0&#xA;&#x9;&#x9;&#x9;&#x9;END AS No_of_Semesters_Completed_Ex&#xA;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;SELECT sdbat.Student_Id, sdbat.Reqmt_Term, sdbat.Acad_Year, sdbat.Semester, COUNT(DISTINCT gpaterms.Acad_Term) AS No_of_Semesters_with_Grades&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT sdbat.Student_Id, sdbat.Reqmt_Term, ts.Acad_Year, ts.Semester, ts.Semester_End_Date&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Acad_Year, Semester, Semester_End_Date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_TERM_SETUP&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type = 'DPFT') ts&#xA;&#x9;&#x9;&#x9;&#x9;ON sdbat.Acad_Year = ts.Acad_Year&#xA;&#x9;&#x9;&#x9;&#x9;WHERE sdbat.Qual_Type = 'DPFT') sdbat&#xA;&#x9;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT gpa.Student_Id, gpa.Reqmt_Term, gpa.Acad_Term, ts.Semester_End_Date&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_GPA gpa&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN DW_TERM_SETUP ts&#xA;&#x9;&#x9;&#x9;&#x9;ON gpa.Acad_Term = ts.Term&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND gpa.Qual_Type = ts.Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;WHERE gpa.Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;&#x9;AND ts.Qual_Type = 'DPFT') gpaterms&#xA;&#x9;&#x9;&#x9;ON sdbat.Student_Id = gpaterms.Student_Id&#xA;&#x9;&#x9;&#x9;&#x9;AND sdbat.Reqmt_Term = gpaterms.Reqmt_Term&#xA;&#x9;&#x9;&#x9;&#x9;AND gpaterms.Semester_End_Date &lt; sdbat.Semester_End_Date&#xA;&#x9;&#x9;&#x9;GROUP BY sdbat.Student_Id, sdbat.Reqmt_Term, sdbat.Acad_Year, sdbat.Semester) gpa&#xA;&#x9;&#x9;LEFT JOIN (&#xA;&#x9;&#x9;&#x9;SELECT spec.Student_id, spec.Rqmt_Term, SUM(cs.Mod_Credit) AS Modular_Credits_Exempted&#xA;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_id, Rqmt_Term, Specialisation&#xA;&#x9;&#x9;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT Student_id, Rqmt_Term, Specialisation,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PARTITION BY Student_id, Rqmt_Term, Qual_Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY Effective_Date DESC, Effective_Sequence DESC) rownum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FROM DW_STUDENT_SPECIALISATN &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type = 'DPFT') spec&#xA;&#x9;&#x9;&#x9;&#x9;WHERE rownum = 1) spec&#xA;&#x9;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT Specialisatn, Reqmt_Term, Module_Code, Mod_Credit&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_COURSE_STRUCTURE&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type = 'DPFT') cs&#xA;&#x9;&#x9;&#x9;ON spec.Specialisation = cs.Specialisatn&#xA;&#x9;&#x9;&#x9;&#x9;AND spec.Rqmt_Term = cs.Reqmt_Term&#xA;&#x9;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;&#x9;SELECT Student_ID, Module_Code&#xA;&#x9;&#x9;&#x9;&#x9;FROM DW_MODULE_EXEMPTION&#xA;&#x9;&#x9;&#x9;&#x9;WHERE Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;&#x9;AND Grade = 'EX') exempt&#xA;&#x9;&#x9;&#x9;ON spec.Student_id = exempt.Student_ID&#xA;&#x9;&#x9;&#x9;&#x9;AND cs.Module_Code = exempt.Module_Code&#xA;&#x9;&#x9;&#x9;GROUP BY spec.Student_id, spec.Rqmt_Term) exempt&#xA;&#x9;&#x9;ON gpa.Student_Id = exempt.Student_id&#xA;&#x9;&#x9;&#x9;AND gpa.Reqmt_Term = exempt.Rqmt_Term) gpawithexempt) gpawithexempt -- Student GPA and Module Exemption&#xA;ON sdbat.Student_Id = gpawithexempt.Student_Id&#xA;&#x9;AND sdbat.Reqmt_Term = gpawithexempt.Reqmt_Term&#xA;&#x9;AND sdbat.Acad_Year = gpawithexempt.Acad_Year&#xA;&#x9;AND sdbat.Semester = gpawithexempt.Semester&#xA;WHERE sdbat.Qual_Type = 'DPFT';&#xA;&#xA;&#xA;UPDATE sdbat&#xA;SET sdbat.Term_cGPA = cgpa.Term_cGPA&#xA;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;INNER JOIN (&#xA;&#x9;SELECT Student_ID, Admit_Term, Prog, Term, Term_cGPA&#xA;&#x9;FROM (&#xA;&#x9;&#x9;SELECT sdbat.Student_ID, sdbat.Admit_Term, sdbat.Prog, sdbat.Term, prev.Term_cGPA,&#xA;&#x9;&#x9;&#x9;ROW_NUMBER() OVER (&#xA;&#x9;&#x9;&#x9;PARTITION BY sdbat.Student_ID, sdbat.Admit_Term, sdbat.Prog, sdbat.Term&#xA;&#x9;&#x9;&#x9;ORDER BY prev.Term DESC) AS rownum&#xA;&#x9;&#x9;FROM (&#xA;&#x9;&#x9;&#x9;SELECT Student_ID, Admit_Term, Prog, Reqmt_Term, Term&#xA;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;&#x9;&#x9;&#x9;WHERE sdbat.Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;AND sdbat.Term_cGPA IS NULL) sdbat&#xA;&#x9;&#x9;INNER JOIN (&#xA;&#x9;&#x9;&#x9;SELECT Student_ID, Reqmt_Term, Term, Term_cGPA&#xA;&#x9;&#x9;&#x9;FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat&#xA;&#x9;&#x9;&#x9;WHERE sdbat.Qual_Type = 'DPFT'&#xA;&#x9;&#x9;&#x9;AND sdbat.Term_cGPA IS NOT NULL) prev&#xA;&#x9;&#x9;ON sdbat.Student_ID = prev.Student_ID&#xA;&#x9;&#x9;&#x9;AND sdbat.Reqmt_Term = prev.Reqmt_Term&#xA;&#x9;&#x9;&#x9;AND prev.Term &lt; sdbat.Term) cgpa&#xA;&#x9;WHERE rownum = 1) cgpa&#xA;ON sdbat.Student_ID = cgpa.Student_ID&#xA;&#x9;AND sdbat.Admit_Term = cgpa.Admit_Term&#xA;&#x9;AND sdbat.Prog = cgpa.Prog&#xA;&#x9;AND sdbat.Term = cgpa.Term&#xA;WHERE sdbat.Qual_Type = 'DPFT'&#xA;AND sdbat.Term_cGPA IS NULL;&#xA;&#xA;&#xA;UPDATE DW_STUDENT_DETAILS_BY_ACAD_TERM&#xA;SET Student_Status_15th_day = 'NA', &#xA;&#x9;Student_Status_15th_day_Descr = 'NA', &#xA;&#x9;Prog_Action_15th_day = 'NA', &#xA;&#x9;Prog_Action_15th_day_Descr = 'NA'&#xA;WHERE Student_Status_15th_day IS NULL &#xA;AND Student_Status_15th_day_Descr IS NULL &#xA;AND Prog_Action_15th_day IS NULL &#xA;AND Prog_Action_15th_day_Descr IS NULL;&#xA;&#xA;&#xA;&#xA;COMMIT TRANSACTION&#xA;END TRY&#xA;&#xA;BEGIN CATCH&#xA;ROLLBACK TRANSACTION&#xA;&#xA;  INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)&#xA;  SELECT   &#xA;         CAST(@jobstatusid as int) as JOB_STATUS_ID&#xA;        ,ERROR_MESSAGE() AS ErrorMessage&#xA;&#x9;&#x9;,getdate()  as created_on&#xA;END CATCH  &#xA;GO&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SQL_DM_Load">
      <DTS:VariableValue
        DTS:DataType="8">BEGIN TRANSACTION
BEGIN TRY
--------------------------------------
DECLARE @jobstatusid varchar(10)
select @jobstatusid=0


DELETE FROM [dbo].[DW_STUDENT_DETAILS_BY_ACAD_TERM]

INSERT INTO [dbo].[DW_STUDENT_DETAILS_BY_ACAD_TERM]
           ([Student_ID]
           ,[Qual_Type]
           ,[Qual_Type_Descr]
           ,[Admit_Term]
           ,[Prog]
           ,[Prog_Descr]
           ,[Dept]
           ,[Reqmt_Term]
           ,[Entry_Qualification]
           ,[Enrolment_Term]
           ,[Enrolment_Prog]
           ,[Enrolment_Prog_Descr]
           ,[Tuition_Grant_Status]
           ,[Residency_Type]
           ,[Race_Mapping_CMIO]
           ,[Term]
           ,[Acad_Year]
           ,[Semester]
           ,[Vacation_Term]
           ,[No_of_Semesters_with_Grades]
           ,[No_of_Semesters_Completed_EX]
           ,[Year_of_Study]
           ,[Student_Status]
           ,[Student_Status_Descr]
		   ,[Student_Status_Effective_Date]
           ,[Prog_Action]
           ,[Prog_Action_Descr]
           ,[Student_Status_15th_day]
           ,[Student_Status_15th_day_Descr]
		   ,[Student_Status_15th_day_Effective_Date]
           ,[Prog_Action_15th_day]
           ,[Prog_Action_15th_day_Descr]
           ,[Action_Reason]
           ,[Term_GPA]
           ,[Term_cGPA]
           ,[CREATED_ON]
           ,[MODIFIED_ON])
SELECT sdbat.Student_Id, sdbat.Qual_Type, sdbat.Qual_Type_Descr, sdbat.Admit_Term, sdbat.Prog, sdbat.Prog_Descr, sdbat.Dept,
	sdbat.Reqmt_Term, sdbat.Entry_Qual_Type, sdbat.Frozen_Intake_Term, sdbat.Enrolment_Prog, sdbat.Enrolment_Prog_Descr, 
	sdbat.Tuition_Grant_Status, sdbat.Residency_Type, sdbat. Race_Mapping_CMIO, sdbat.Term, sdbat.Acad_Year, sdbat.Semester,
	sdbat.Vacation_Term, 
	NULL AS No_of_Semesters_with_Grades, NULL AS No_of_Semesters_Completed_Ex, NULL AS Year_of_Study,
	sdbat.Student_Status, sdbat.Student_Status_Descr, sdbat.Student_Status_Effective_Date, sdbat.Prog_Action, sdbat.Prog_Action_Descr, 
	sdbat.Student_Status_15th_day, sdbat.Student_Status_15th_day_Descr, sdbat.Student_Status_15th_day_Effective_Date,
	sdbat.Prog_Action_15th_day, sdbat.Prog_Action_15th_day_Descr,
	sdbat.Action_Reason, sdbat.Term_Gpa, sdbat.Term_cGPA, 
	SYSDATETIME() AS CREATED_ON, SYSDATETIME() AS MODIFIED_ON
FROM (
	SELECT sdbat.Student_Id, sdbat.Qual_Type, sdbat.Qual_Type_Descr, sdbat.Admit_Term, sdbat.Prog, sdbat.Prog_Descr, sdbat.Dept,
		sdbat.Reqmt_Term, sdbat.Entry_Qual_Type, sdbat.Frozen_Intake_Term, sdbat.Enrolment_Prog, sdbat.Enrolment_Prog_Descr, 
		sdbat.Tuition_Grant_Status, sdbat.Residency_Type, sdbat. Race_Mapping_CMIO, sdbat.Term, sdbat.Acad_Year, sdbat.Semester,
		sdbat.Vacation_Term, 
		sdbat.Student_Status, sdbat.Student_Status_Descr, sdbat.Student_Status_Effective_Date, sdbat.Prog_Action, sdbat.Prog_Action_Descr, 
		smfor15thday.Student_Status AS Student_Status_15th_day, smfor15thday.Student_Status_Descr AS Student_Status_15th_day_Descr,
		smfor15thday.Effective_Date AS Student_Status_15th_day_Effective_Date,
		smfor15thday.Prog_Action AS Prog_Action_15th_day, smfor15thday.Prog_Action_Descr AS Prog_Action_15th_day_Descr,
		ROW_NUMBER() OVER (
		PARTITION BY sdbat.Student_Id, sdbat.Qual_Type, sdbat.Admit_Term, sdbat.Prog, sdbat.Term 
		ORDER BY smfor15thday.Effective_Date DESC, smfor15thday.Effective_Seq DESC) AS rownum,
		sdbat.Action_Reason, sdbat.Term_Gpa, sdbat.Term_cGPA
	FROM (
		SELECT b.Student_Id, b.Qual_Type, b.Qual_Type_Descr, b.Admit_Term, b.Prog, prog.Prog_Descr, prog.School_Centre AS Dept, b.Reqmt_Term,
			sd.Entry_Qual_Type, sfe.Frozen_Intake_Term, sfe.Acad_Prog AS Enrolment_Prog, sfe.Programme_Desc As Enrolment_Prog_Descr, 
			tgs.Grant_Status AS Tuition_Grant_Status, sd.Residency_Type, sd.Race_Mapping_CMIO, ts.Term, ts.Acad_Year, ts.Semester, ts.Vacation_Term,
			smforlatest.Student_Status, smforlatest.Student_Status_Descr, smforlatest.Effective_Date AS Student_Status_Effective_Date, 
			smforlatest.Prog_Action, smforlatest.Prog_Action_Descr, smforlatest.Action_Reason,
			ROW_NUMBER() OVER (
			PARTITION BY b.Student_Id, b.Qual_Type, b.Admit_Term, b.Prog, ts.Term 
			ORDER BY smforlatest.Effective_Date DESC, smforlatest.Effective_Seq DESC) AS rownum,
			gpa.Term_Gpa, gpa.Cumulative_Gpa AS Term_cGPA, 
			ts.Term_Begin_Date
		FROM (
			---- Start Student Programmes which are no longer active
			SELECT s.Student_Id, s.Qual_Type, s.Qual_Type_Descr, s.Admit_Term, s.Prog, s.Reqmt_Term, s.Effective_Date AS Effective_Date_Begin, e.Effective_Date AS Effective_Date_End
			FROM (
				SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq
				FROM (
					SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq,
						ROW_NUMBER() OVER (
						PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog
						ORDER BY EFFECTIVE_DATE ASC, EFFECTIVE_SEQ ASC) rownum
					FROM DW_STUDENT_MOVEMENT 
					WHERE Qual_Type IN ('DPFT','PFP')
					AND Student_Status = 'AC' AND Prog_Action IN ('MATR','PRGC')) s
				WHERE rownum = 1) s
			INNER JOIN (
				SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status
				FROM (
					SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status,
						ROW_NUMBER() OVER (
						PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog
						ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum
					FROM DW_STUDENT_MOVEMENT 
					WHERE Qual_Type IN ('DPFT','PFP')) e
				WHERE rownum = 1
				AND Student_Status NOT IN ('AC','LA','SP')) e
			ON s.Student_Id = e.Student_Id
				AND s.Qual_Type = e.Qual_Type
				AND s.Admit_Term = e.Admit_Term
				AND s.Prog = e.Prog
				AND ((s.Effective_Date = e.Effective_Date AND s.Effective_Seq &lt; e.Effective_Seq)
				OR s.Effective_Date &lt; e.Effective_Date)
			---- End Student Programmes which are no longer active
			UNION ALL
			---- Start Student Programmes which are still active
			SELECT s.Student_Id, s.Qual_Type, s.Qual_Type_Descr, s.Admit_Term, s.Prog, s.Reqmt_Term, s.Effective_Date AS Effective_Date_Begin, 
				CASE 
					WHEN e.Effective_Date &gt; CAST(SYSDATETIME() AS DATE) THEN CAST(SYSDATETIME() AS DATE)
					WHEN t.Term_Begin_Date IS NOT NULL AND t.Term_Begin_Date &gt; CAST(SYSDATETIME() AS DATE) THEN CAST(SYSDATETIME() AS DATE)
					--WHEN t.Term_End_Date IS NOT NULL AND t.Term_End_Date &gt; e.Effective_Date THEN t.Term_End_Date 
					--ELSE e.Effective_Date -- change this to CAST(SYSDATETIME() AS DATE) if too many terms are incorrectly excluded
					ELSE CAST(SYSDATETIME() AS DATE) -- change this to e.Effective_Date if end period is too extended
				END AS Effective_Date_End
			FROM (
				SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Expected_Grad_Term
				FROM (
				SELECT s.Student_Id, s.Qual_Type, s.Qual_Type_Descr, s.Admit_Term, s.Prog, s.Reqmt_Term, 
					s.Effective_Date, s.Effective_Seq, s.Expected_Grad_Term,
					ROW_NUMBER() OVER (
					PARTITION BY s.Student_Id, s.Qual_Type, s.Admit_Term, s.Prog
					ORDER BY s.EFFECTIVE_DATE DESC, s.EFFECTIVE_SEQ DESC) rownum
				FROM (
					SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Expected_Grad_Term
					FROM DW_STUDENT_MOVEMENT s 
					WHERE Qual_Type IN ('DPFT','PFP')
					AND Student_Status = 'AC' AND Prog_Action IN ('MATR','PRGC')) s
				LEFT JOIN (
					SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status
					FROM (
						SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status,
							ROW_NUMBER() OVER (
							PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog
							ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum
						FROM DW_STUDENT_MOVEMENT 
						WHERE Qual_Type IN ('DPFT','PFP')) e
					WHERE rownum = 1
					AND Student_Status NOT IN ('AC','LA','SP')) ended
				ON s.Student_Id = ended.Student_Id
					AND s.Qual_Type = ended.Qual_Type
					AND s.Admit_Term = ended.Admit_Term
					AND s.Prog = ended.Prog 
					AND ((s.Effective_Date = ended.Effective_Date AND s.Effective_Seq &lt; ended.Effective_Seq)
					OR s.Effective_Date &lt; ended.Effective_Date)
				WHERE ended.Student_Id IS NULL
				AND NOT EXISTS (
					SELECT 1
					FROM DW_STUDENT_MOVEMENT e
					WHERE s.Student_Id = e.Student_Id
						AND s.Qual_Type = e.Qual_Type
						AND s.Admit_Term = e.Admit_Term
						AND e.Student_Status = 'AC' AND e.Prog_Action = 'PRGC'
						AND ((s.Effective_Date = e.Effective_Date AND s.Effective_Seq &lt; e.Effective_Seq)
						OR s.Effective_Date &lt; e.Effective_Date))) s
				WHERE rownum = 1) s
			LEFT JOIN DW_TERM_SETUP t
			ON ISNULL(s.Expected_Grad_Term,'') &lt;&gt; ''
				AND t.Qual_Type = s.Qual_Type
				AND t.Term = s.Expected_Grad_Term
			LEFT JOIN (
				SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq
				FROM (
					SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq,
						ROW_NUMBER() OVER (
						PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog
						ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum
					FROM DW_STUDENT_MOVEMENT 
					WHERE Qual_Type IN ('DPFT','PFP')) e
				WHERE rownum = 1) e
			ON s.Student_Id = e.Student_Id
				AND s.Qual_Type = e.Qual_Type
				AND s.Admit_Term = e.Admit_Term
				AND s.Prog = e.Prog
				AND ((s.Effective_Date = e.Effective_Date AND s.Effective_Seq &lt; e.Effective_Seq)
				OR s.Effective_Date &lt; e.Effective_Date)
			-- End Student Programmes which are still active
			UNION ALL
			---- Start Change of Programme
			SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date_Begin, Effective_Date_End
			FROM (
				SELECT s.Student_Id, s.Qual_Type, s.Qual_Type_Descr, s.Admit_Term, s.Prog, s.Reqmt_Term, s.Effective_Date AS Effective_Date_Begin, 
					CASE 
						WHEN e.Effective_Date &gt; CAST(SYSDATETIME() AS DATE) THEN CAST(SYSDATETIME() AS DATE)
						WHEN e.Effective_Date IS NOT NULL THEN DATEADD(day,-1,e.Effective_Date) -- change of program
						WHEN t.Term_Begin_Date IS NOT NULL AND t.Term_Begin_Date &gt; CAST(SYSDATETIME() AS DATE) THEN CAST(SYSDATETIME() AS DATE)
						WHEN t.Term_End_Date IS NOT NULL AND t.Term_End_Date &gt; e.Effective_Date THEN t.Term_End_Date
						ELSE CAST(SYSDATETIME() AS DATE)
					END AS Effective_Date_End,
					ROW_NUMBER() OVER (
					PARTITION BY s.Student_Id, s.Qual_Type, s.Admit_Term, s.Prog
					ORDER BY e.Effective_Date ASC, e.Effective_Seq ASC) AS rownum
				FROM (
					SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Expected_Grad_Term
					FROM (
						SELECT Student_Id, Qual_Type, Qual_Type_Descr, Admit_Term, Prog, Reqmt_Term, Effective_Date, Effective_Seq, Expected_Grad_Term,
							ROW_NUMBER() OVER (
							PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog
							ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum
						FROM DW_STUDENT_MOVEMENT s 
						WHERE Qual_Type IN ('DPFT','PFP')
						AND Student_Status = 'AC' AND Prog_Action IN ('MATR','PRGC')) s
					WHERE rownum = 1) s
				LEFT JOIN (
					SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status
					FROM (
						SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, Student_Status,
							ROW_NUMBER() OVER (
							PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog
							ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum
						FROM DW_STUDENT_MOVEMENT 
						WHERE Qual_Type IN ('DPFT','PFP')) e
					WHERE rownum = 1
					AND Student_Status NOT IN ('AC','LA','SP')) ended
				ON s.Student_Id = ended.Student_Id
					AND s.Qual_Type = ended.Qual_Type
					AND s.Admit_Term = ended.Admit_Term
					AND s.Prog = ended.Prog 
					AND ((s.Effective_Date = ended.Effective_Date AND s.Effective_Seq &lt; ended.Effective_Seq)
					OR s.Effective_Date &lt; ended.Effective_Date)
				LEFT JOIN DW_TERM_SETUP t
				ON ISNULL(s.Expected_Grad_Term,'') &lt;&gt; ''
					AND t.Qual_Type = s.Qual_Type
					AND t.Term = s.Expected_Grad_Term
				INNER JOIN (
					SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq
					FROM (
						SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq,
							ROW_NUMBER() OVER (
							PARTITION BY Student_Id, Qual_Type, Admit_Term, Prog
							ORDER BY EFFECTIVE_DATE DESC, EFFECTIVE_SEQ DESC) rownum
						FROM DW_STUDENT_MOVEMENT 
						WHERE Qual_Type IN ('DPFT','PFP')
						AND Student_Status = 'AC' AND Prog_Action = 'PRGC') e
					WHERE rownum = 1) e
				ON s.Student_Id = e.Student_Id
					AND s.Qual_Type = e.Qual_Type
					AND s.Admit_Term = e.Admit_Term
					--AND s.Prog = e.Prog 
					AND ((s.Effective_Date = e.Effective_Date AND s.Effective_Seq &lt; e.Effective_Seq)
					OR s.Effective_Date &lt; e.Effective_Date)
				WHERE ended.Student_Id IS NULL) cop
			WHERE rownum = 1
			-- End Change of Programme
			) b  -- Student Movement Matriculation and Completion Base
		LEFT JOIN (
			SELECT Prog_Code, Prog_Descr, School_Centre
			FROM (
				SELECT Prog_Code, Prog_Descr, School_Centre,
					ROW_NUMBER() OVER(
					PARTITION BY Prog_Code 
					ORDER BY Effective_Date DESC) AS rownum
				FROM DW_PET_PROGRAMME
				WHERE Qual_Type IN ('DPFT','PFP')) prog
			WHERE rownum = 1) prog -- Programme Lookup
		ON b.Prog = prog.Prog_Code
		LEFT JOIN (
			SELECT sd.Student_ID, sd.Admit_Term, eqt.Entry_Qual_Type, sd.Residency_Type, cmio.Race_Mapping_CMIO
			FROM (
				SELECT DISTINCT Student_ID, Admit_Term, Applicatn_Number, Residency_Type, Ethnic_Group
				FROM DW_STUDENT_DETAILS) sd
			LEFT JOIN (
				SELECT DISTINCT App_Number, Entry_Qual
				FROM DW_APPLICANT_DETAILS
				WHERE Qual_Type IN ('DPFT','PFP')) ad
			ON sd.Applicatn_Number = ad.App_Number
			LEFT JOIN DW_EXT_ENTRY_QUAL_TYPE eqt
			ON ad.Entry_Qual = eqt.Entry_Qual
			LEFT JOIN DW_CMIO_MAPPING cmio
			ON sd.Ethnic_Group = cmio.System_Race_Code) sd -- Distinct Student Details
		ON b.Student_Id = sd.Student_ID
			AND b.Admit_Term = sd.Admit_Term
		LEFT JOIN DW_STUDENT_FROZEN_ENROLMENT sfe -- Student Frozen Enrolment
		ON b.Student_Id = sfe.Student_Id
			AND b.Admit_Term = sfe.Admit_Term
		INNER JOIN (
			SELECT Qual_Type, Term,
				CASE
					WHEN Short_Desc LIKE '%Vac%' THEN 'Yes'
					ELSE 'No'
				END AS Vacation_Term, 
				Term_Begin_Date, Term_End_Date, Acad_Year, Semester, Semester_Begin_Date, Semester_End_Date
			FROM DW_TERM_SETUP 
			WHERE Qual_Type IN ('DPFT','PFP')) ts -- Term Setup
		ON b.Qual_Type = ts.Qual_Type
			AND (ts.Term_Begin_Date BETWEEN b.Effective_Date_Begin AND b.Effective_Date_End
			OR ts.Term_End_Date BETWEEN b.Effective_Date_Begin AND b.Effective_Date_End
			OR (b.Effective_Date_Begin BETWEEN ts.Term_Begin_Date AND ts.Term_End_Date
			AND b.Effective_Date_End BETWEEN ts.Term_Begin_Date AND ts.Term_End_Date))
		LEFT JOIN (
			SELECT tgs.Student_ID, tgs.Qual_Type, ts.Acad_Year, ts.Semester, tgs.Grant_Status
			FROM DW_STUDENT_TUITION_GRANT_STATUS tgs
			INNER JOIN DW_TERM_SETUP ts
			ON tgs.Qual_Type = ts.Qual_Type
				AND tgs.Term = ts.Term
			WHERE tgs.Qual_Type IN ('DPFT','PFP')) tgs -- Student Tuition Grant
		ON b.Student_Id = tgs.Student_ID
			AND b.Qual_Type = tgs.Qual_Type
			AND ts.Acad_Year = tgs.Acad_Year
			AND ts.Semester = tgs.Semester
		LEFT JOIN (
			SELECT DISTINCT gpa.Student_Id, gpa.Reqmt_Term, ts.Acad_Year, ts.Semester, gpa.Term_Gpa, gpa.Cumulative_Gpa
			FROM DW_STUDENT_GPA gpa
			INNER JOIN DW_TERM_SETUP ts
			ON gpa.Acad_Term = ts.Term
				AND gpa.Qual_Type = ts.Qual_Type
			WHERE gpa.Qual_Type = 'DPFT'
			AND ts.Qual_Type = 'DPFT') gpa -- Student GPA 
		ON b.Student_Id = gpa.Student_Id
			AND b.Reqmt_Term = gpa.Reqmt_Term
			AND ts.Acad_Year = gpa.Acad_Year
			AND ts.Semester = gpa.Semester
		LEFT JOIN (
			SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, 
				Student_Status, Student_Status_Descr, Prog_Action, Prog_Action_Descr, Action_Reason
			FROM DW_STUDENT_MOVEMENT
			WHERE Qual_Type IN ('DPFT','PFP')) smforlatest
		ON b.Student_Id = smforlatest.Student_Id
			AND b.Qual_Type = smforlatest.Qual_Type
			AND b.Admit_Term = smforlatest.Admit_Term
			AND b.Prog = smforlatest.Prog
			AND smforlatest.Effective_Date &lt;= ts.Term_End_Date) sdbat
	LEFT JOIN (
		SELECT Student_Id, Qual_Type, Admit_Term, Prog, Effective_Date, Effective_Seq, 
			Student_Status, Student_Status_Descr, Prog_Action, Prog_Action_Descr, Action_Reason
		FROM DW_STUDENT_MOVEMENT
		WHERE Qual_Type IN ('DPFT','PFP')) smfor15thday
	ON sdbat.Student_Id = smfor15thday.Student_Id
		AND sdbat.Qual_Type = smfor15thday.Qual_Type
		AND sdbat.Admit_Term = smfor15thday.Admit_Term
		AND sdbat.Prog = smfor15thday.Prog
		AND smfor15thday.Effective_Date &lt;= DATEADD(day,14,sdbat.Term_Begin_Date)
	WHERE sdbat.rownum = 1) sdbat
WHERE sdbat.rownum = 1;


UPDATE DW_STUDENT_DETAILS_BY_ACAD_TERM
SET Year_of_Study = 'PFP'
WHERE Qual_Type = 'PFP';


UPDATE sdbat
SET sdbat.No_of_Semesters_with_Grades = ISNULL(gpawithexempt.No_of_Semesters_with_Grades,0),
	sdbat.No_of_Semesters_Completed_EX = ISNULL(gpawithexempt.No_of_Semesters_Completed_Ex,0),
	sdbat.Year_of_Study = ISNULL(gpawithexempt.Year_of_Study,1)
FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
LEFT JOIN (
	SELECT Student_ID, Reqmt_Term, Acad_Year, Semester, No_of_Semesters_with_Grades, No_of_Semesters_Completed_Ex,
		CASE 
			WHEN No_of_Semesters_Completed_Ex BETWEEN 0 AND 1 THEN '1'
			WHEN No_of_Semesters_Completed_Ex BETWEEN 2 AND 3 THEN '2'
			WHEN No_of_Semesters_Completed_Ex &gt;= 4 THEN '3'
			ELSE NULL
		END AS Year_of_Study
	FROM (
		SELECT gpa.Student_Id, gpa.Reqmt_Term, 
			gpa.Acad_Year, gpa.Semester, ISNULL(gpa.No_of_Semesters_with_Grades,0) AS No_of_Semesters_with_Grades,
			ISNULL(gpa.No_of_Semesters_with_Grades,0) + 
				CASE 
					WHEN exempt.Modular_Credits_Exempted BETWEEN 20 AND 39.99 THEN 1
					WHEN exempt.Modular_Credits_Exempted &gt;= 40 THEN 2
					ELSE 0
				END AS No_of_Semesters_Completed_Ex
		FROM (
			SELECT sdbat.Student_Id, sdbat.Reqmt_Term, sdbat.Acad_Year, sdbat.Semester, COUNT(DISTINCT gpaterms.Acad_Term) AS No_of_Semesters_with_Grades
			FROM (
				SELECT DISTINCT sdbat.Student_Id, sdbat.Reqmt_Term, ts.Acad_Year, ts.Semester, ts.Semester_End_Date
				FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
				INNER JOIN (
					SELECT DISTINCT Acad_Year, Semester, Semester_End_Date
					FROM DW_TERM_SETUP
					WHERE Qual_Type = 'DPFT') ts
				ON sdbat.Acad_Year = ts.Acad_Year
				WHERE sdbat.Qual_Type = 'DPFT') sdbat
			LEFT JOIN (
				SELECT DISTINCT gpa.Student_Id, gpa.Reqmt_Term, gpa.Acad_Term, ts.Semester_End_Date
				FROM DW_STUDENT_GPA gpa
				INNER JOIN DW_TERM_SETUP ts
				ON gpa.Acad_Term = ts.Term
					AND gpa.Qual_Type = ts.Qual_Type
				WHERE gpa.Qual_Type = 'DPFT'
				AND ts.Qual_Type = 'DPFT') gpaterms
			ON sdbat.Student_Id = gpaterms.Student_Id
				AND sdbat.Reqmt_Term = gpaterms.Reqmt_Term
				AND gpaterms.Semester_End_Date &lt; sdbat.Semester_End_Date
			GROUP BY sdbat.Student_Id, sdbat.Reqmt_Term, sdbat.Acad_Year, sdbat.Semester) gpa
		LEFT JOIN (
			SELECT spec.Student_id, spec.Rqmt_Term, SUM(cs.Mod_Credit) AS Modular_Credits_Exempted
			FROM (
				SELECT Student_id, Rqmt_Term, Specialisation
				FROM (
					SELECT Student_id, Rqmt_Term, Specialisation,
						ROW_NUMBER() OVER (
						PARTITION BY Student_id, Rqmt_Term, Qual_Type
						ORDER BY Effective_Date DESC, Effective_Sequence DESC) rownum
					FROM DW_STUDENT_SPECIALISATN 
					WHERE Qual_Type = 'DPFT') spec
				WHERE rownum = 1) spec
			INNER JOIN (
				SELECT DISTINCT Specialisatn, Reqmt_Term, Module_Code, Mod_Credit
				FROM DW_COURSE_STRUCTURE
				WHERE Qual_Type = 'DPFT') cs
			ON spec.Specialisation = cs.Specialisatn
				AND spec.Rqmt_Term = cs.Reqmt_Term
			INNER JOIN (
				SELECT Student_ID, Module_Code
				FROM DW_MODULE_EXEMPTION
				WHERE Qual_Type = 'DPFT'
				AND Grade = 'EX') exempt
			ON spec.Student_id = exempt.Student_ID
				AND cs.Module_Code = exempt.Module_Code
			GROUP BY spec.Student_id, spec.Rqmt_Term) exempt
		ON gpa.Student_Id = exempt.Student_id
			AND gpa.Reqmt_Term = exempt.Rqmt_Term) gpawithexempt) gpawithexempt -- Student GPA and Module Exemption
ON sdbat.Student_Id = gpawithexempt.Student_Id
	AND sdbat.Reqmt_Term = gpawithexempt.Reqmt_Term
	AND sdbat.Acad_Year = gpawithexempt.Acad_Year
	AND sdbat.Semester = gpawithexempt.Semester
WHERE sdbat.Qual_Type = 'DPFT';


UPDATE sdbat
SET sdbat.Term_cGPA = cgpa.Term_cGPA
FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
INNER JOIN (
	SELECT Student_ID, Admit_Term, Prog, Term, Term_cGPA
	FROM (
		SELECT sdbat.Student_ID, sdbat.Admit_Term, sdbat.Prog, sdbat.Term, prev.Term_cGPA,
			ROW_NUMBER() OVER (
			PARTITION BY sdbat.Student_ID, sdbat.Admit_Term, sdbat.Prog, sdbat.Term
			ORDER BY prev.Term DESC) AS rownum
		FROM (
			SELECT Student_ID, Admit_Term, Prog, Reqmt_Term, Term
			FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
			WHERE sdbat.Qual_Type = 'DPFT'
			AND sdbat.Term_cGPA IS NULL) sdbat
		INNER JOIN (
			SELECT Student_ID, Reqmt_Term, Term, Term_cGPA
			FROM DW_STUDENT_DETAILS_BY_ACAD_TERM sdbat
			WHERE sdbat.Qual_Type = 'DPFT'
			AND sdbat.Term_cGPA IS NOT NULL) prev
		ON sdbat.Student_ID = prev.Student_ID
			AND sdbat.Reqmt_Term = prev.Reqmt_Term
			AND prev.Term &lt; sdbat.Term) cgpa
	WHERE rownum = 1) cgpa
ON sdbat.Student_ID = cgpa.Student_ID
	AND sdbat.Admit_Term = cgpa.Admit_Term
	AND sdbat.Prog = cgpa.Prog
	AND sdbat.Term = cgpa.Term
WHERE sdbat.Qual_Type = 'DPFT'
AND sdbat.Term_cGPA IS NULL;


UPDATE DW_STUDENT_DETAILS_BY_ACAD_TERM
SET Student_Status_15th_day = 'NA', 
	Student_Status_15th_day_Descr = 'NA', 
	Prog_Action_15th_day = 'NA', 
	Prog_Action_15th_day_Descr = 'NA'
WHERE Student_Status_15th_day IS NULL 
AND Student_Status_15th_day_Descr IS NULL 
AND Prog_Action_15th_day IS NULL 
AND Prog_Action_15th_day_Descr IS NULL;



COMMIT TRANSACTION
END TRY

BEGIN CATCH
ROLLBACK TRANSACTION

  INSERT INTO ETL_ERROR_LOG(JOB_STATUS_ID,ERROR_RECORD,created_on)
  SELECT   
         CAST(@jobstatusid as int) as JOB_STATUS_ID
        ,ERROR_MESSAGE() AS ErrorMessage
		,getdate()  as created_on
END CATCH  
GO</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C7FC388D-1588-4798-9242-FD2D7300899D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="STAGE">
      <DTS:VariableValue
        DTS:DataType="8">DW</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5012ECE6-ADA0-4823-9E56-6E3C7A91D04B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TgtTableName">
      <DTS:VariableValue
        DTS:DataType="8">DW_STUDENT_DETAILS_BY_ACAD_TERM</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create ETL Job Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{413479DF-141B-4FB9-9DFA-1456A9ADFB9A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create ETL Job Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E6A0FB44-42CF-4895-9C79-8163C39F0656}"
          SQLTask:SqlStatementSource="Exec [dbo].[usp_InsertETLJobLog] ?, ?, ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Job_name"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="1"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="2"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="3"
            SQLTask:DtsVariableName="User::TgtTableName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Error Log"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{92582EA0-2BE8-44F0-A0FE-DA269202D8CD}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Error Log"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E6A0FB44-42CF-4895-9C79-8163C39F0656}"
          SQLTask:SqlStatementSource="UPDATE [dbo].[ETL_JOB_STATUS]&#xA;SET&#xA;ERROR_MSG = 'STG table is not completed',&#xA;JOB_STATUS ='Fail'&#xA;--PROCESSED_ON =getdate()&#xA;WHERE JOB_STATUS_ID=?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\JOB_STATUS_ID"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{35CE6C95-85DC-47CC-AA0E-6BD5A08AA365}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="JOB_STATUS_ID"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E6A0FB44-42CF-4895-9C79-8163C39F0656}"
          SQLTask:SqlStatementSource="SELECT max([JOB_STATUS_ID])&#xA;      &#xA;  FROM [dbo].[ETL_JOB_STATUS] where [SOURCE_FILENAME]=? &#xA;---and convert(varchar(8),CREATED_ON,112)=convert--(varchar(8) ,getdate(),112)"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::SourceTable"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Into DM"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{A38406FE-B958-4751-AA0E-FA33DFD71456}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Into DM"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{D981E45E-50EC-42FF-A869-3AA8F6A69DD6}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::SQL_DM_Load" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Process_Date"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{18BD1062-17D5-481D-A5F1-A11730247BFE}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Process_Date"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{D981E45E-50EC-42FF-A869-3AA8F6A69DD6}"
          SQLTask:SqlStatementSource="Select getdate()"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Process_date" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::Process_date"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="135"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update Job Status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{9F1A6BA0-880F-4088-BA75-952F1F1F812C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update Job Status"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E6A0FB44-42CF-4895-9C79-8163C39F0656}"
          SQLTask:SqlStatementSource="DECLARE &#xA;@jobstatusid INT &#xA;select @jobstatusid=?&#xA;IF exists(select * from dbo.ETL_ERROR_LOG where [JOB_STATUS_ID]=@jobstatusid)&#xA; BEGIN&#xA; Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Fail'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;  END&#xA;ELSE&#xA;BEGIN&#xA;Update [dbo].[ETL_JOB_STATUS]&#xA;SET [PROCESSED_ON] =getdate(),&#xA;[JOB_STATUS]='Success'&#xA;where [JOB_STATUS_ID]=@jobstatusid&#xA;END" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::JOB_STATUS_ID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Validate job status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{696AED7A-B283-418A-AC25-D4BFA7296B62}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Validate job status"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E6A0FB44-42CF-4895-9C79-8163C39F0656}"
          SQLTask:SqlStatementSource="select CASE WHEN JOB_STATUS='Success' then 0 ELSE 1 END AS  JOB_STATUS&#xA;&#xA;from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT' and &#xA;  JOB_STATUS_ID in (Select max(JOB_STATUS_ID) from [dbo].[ETL_JOB_STATUS]&#xA;  where STAGE='STG' and TARGET_TABLENAME='STG_OASIS_STUDENT_DEBARMT')"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Job_Status" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::STAGE"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{DF1EADBB-3644-4859-8FF2-C68F77CC09A2}"
      DTS:From="Package\Process_Date"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Load Into DM" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{A26E6761-23AC-4017-9314-F93C99C2E7B3}"
      DTS:From="Package\Create ETL Job Log"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\JOB_STATUS_ID" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{2BF29FF7-D14A-47EF-A6A4-BA6C7E718057}"
      DTS:From="Package\JOB_STATUS_ID"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Validate job status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{4AB873E5-B5D7-4FCB-A40F-922F7D4F00D9}"
      DTS:From="Package\Load Into DM"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Update Job Status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[False]"
      DTS:CreationName=""
      DTS:DTSID="{C0BAF10F-9A03-42EE-80DC-AA3E8137C600}"
      DTS:Expression="@[User::Job_Status]==1"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="False"
      DTS:To="Package\Error Log" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[True]"
      DTS:CreationName=""
      DTS:DTSID="{F7884882-28D3-48C5-968D-36C213A08178}"
      DTS:Expression="@[User::Job_Status]==0"
      DTS:From="Package\Validate job status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="True"
      DTS:To="Package\Process_Date" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{04CB2F12-D98F-4B8F-92CC-E4CB02E88330}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{6B148060-B635-460B-BDAA-8C5E6F1E7D61}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{D37A76C4-E535-4A1C-9C66-F6AF46F50C00}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="ETL_ERROR_LOG">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{E6A0FB44-42CF-4895-9C79-8163C39F0656}"
              SQLTask:SqlStatementSource="[dbo].[usp_InsertETLErrorLog] ?, ?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::JOB_STATUS_ID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="131"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::ErrorDescription"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="157,42"
          Id="Package\Create ETL Job Log"
          TopLeft="17,13" />
        <NodeLayout
          Size="123,42"
          Id="Package\Error Log"
          TopLeft="699,21" />
        <NodeLayout
          Size="142,42"
          Id="Package\JOB_STATUS_ID"
          TopLeft="230,18" />
        <NodeLayout
          Size="143,42"
          Id="Package\Load Into DM"
          TopLeft="486,219" />
        <NodeLayout
          Size="142,42"
          Id="Package\Process_Date"
          TopLeft="487,131" />
        <NodeLayout
          Size="165,42"
          Id="Package\Update Job Status"
          TopLeft="526,322" />
        <NodeLayout
          Size="166,42"
          Id="Package\Validate job status"
          TopLeft="446,22" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="557.75,173">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46"
              Start="0,0"
              End="0,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="174,36.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="56,0"
              Start="0,0"
              End="48.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="48.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="372,41">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="74,0"
              Start="0,0"
              End="66.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="66.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="557.5,261">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="51,61"
              Start="0,0"
              End="51,53.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.5"
                    Point2="0,30.5"
                    Point3="4,30.5" />
                  <mssgle:LineSegment
                    End="47,30.5" />
                  <mssgle:CubicBezierSegment
                    Point1="47,30.5"
                    Point2="51,30.5"
                    Point3="51,34.5" />
                  <mssgle:LineSegment
                    End="51,53.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[False]"
          TopLeft="612,42.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="87,0"
              Start="0,0"
              End="79.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="79.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="28.01365234375,5,23.4726953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[True]"
          TopLeft="529,64">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="29,67"
              Start="0,0"
              End="29,59.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.5"
                    Point2="0,33.5"
                    Point3="4,33.5" />
                  <mssgle:LineSegment
                    End="25,33.5" />
                  <mssgle:CubicBezierSegment
                    Point1="25,33.5"
                    Point2="29,33.5"
                    Point3="29,37.5" />
                  <mssgle:LineSegment
                    End="29,59.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="3.48755859375,38.5,22.0248828125,9.421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="162,42"
          Id="Package.EventHandlers[OnError]\ETL_ERROR_LOG"
          TopLeft="370,98" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[False]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package.PrecedenceConstraints[True]">
    <ShowAnnotation>ConstraintName</ShowAnnotation>
  </PrecedenceConstraint>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>